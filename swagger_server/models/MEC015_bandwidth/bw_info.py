# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.MEC015_bandwidth.bw_info_session_filter import BwInfoSessionFilter  # noqa: F401,E501
from swagger_server.models.MEC015_bandwidth.bw_info_time_stamp import BwInfoTimeStamp  # noqa: F401,E501
from swagger_server import util


class BwInfo(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, allocation_direction: str=None, app_ins_id: str=None, fixed_allocation: str=None, fixed_bw_priority: str=None, request_type: int=None, session_filter: List[BwInfoSessionFilter]=None, time_stamp: BwInfoTimeStamp=None):  # noqa: E501
        """BwInfo - a model defined in Swagger

        :param allocation_direction: The allocation_direction of this BwInfo.  # noqa: E501
        :type allocation_direction: str
        :param app_ins_id: The app_ins_id of this BwInfo.  # noqa: E501
        :type app_ins_id: str
        :param fixed_allocation: The fixed_allocation of this BwInfo.  # noqa: E501
        :type fixed_allocation: str
        :param fixed_bw_priority: The fixed_bw_priority of this BwInfo.  # noqa: E501
        :type fixed_bw_priority: str
        :param request_type: The request_type of this BwInfo.  # noqa: E501
        :type request_type: int
        :param session_filter: The session_filter of this BwInfo.  # noqa: E501
        :type session_filter: List[BwInfoSessionFilter]
        :param time_stamp: The time_stamp of this BwInfo.  # noqa: E501
        :type time_stamp: BwInfoTimeStamp
        """
        self.swagger_types = {
            'allocation_direction': str,
            'app_ins_id': str,
            'fixed_allocation': str,
            'fixed_bw_priority': str,
            'request_type': int,
            'session_filter': List[BwInfoSessionFilter],
            'time_stamp': BwInfoTimeStamp
        }

        self.attribute_map = {
            'allocation_direction': 'allocationDirection',
            'app_ins_id': 'appInsId',
            'fixed_allocation': 'fixedAllocation',
            'fixed_bw_priority': 'fixedBWPriority',
            'request_type': 'requestType',
            'session_filter': 'sessionFilter',
            'time_stamp': 'timeStamp'
        }
        self._allocation_direction = allocation_direction
        self._app_ins_id = app_ins_id
        self._fixed_allocation = fixed_allocation
        self._fixed_bw_priority = fixed_bw_priority
        self._request_type = request_type
        self._session_filter = session_filter
        self._time_stamp = time_stamp

    @classmethod
    def from_dict(cls, dikt) -> 'BwInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BwInfo of this BwInfo.  # noqa: E501
        :rtype: BwInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allocation_direction(self) -> str:
        """Gets the allocation_direction of this BwInfo.

        The direction of the requested BW allocation: 00 = Downlink (towards the UE) 01 = Uplink (towards the application/session) 10 = Symmetrical  # noqa: E501

        :return: The allocation_direction of this BwInfo.
        :rtype: str
        """
        return self._allocation_direction

    @allocation_direction.setter
    def allocation_direction(self, allocation_direction: str):
        """Sets the allocation_direction of this BwInfo.

        The direction of the requested BW allocation: 00 = Downlink (towards the UE) 01 = Uplink (towards the application/session) 10 = Symmetrical  # noqa: E501

        :param allocation_direction: The allocation_direction of this BwInfo.
        :type allocation_direction: str
        """
        if allocation_direction is None:
            raise ValueError("Invalid value for `allocation_direction`, must not be `None`")  # noqa: E501

        self._allocation_direction = allocation_direction

    @property
    def app_ins_id(self) -> str:
        """Gets the app_ins_id of this BwInfo.

        Application instance identifier  # noqa: E501

        :return: The app_ins_id of this BwInfo.
        :rtype: str
        """
        return self._app_ins_id

    @app_ins_id.setter
    def app_ins_id(self, app_ins_id: str):
        """Sets the app_ins_id of this BwInfo.

        Application instance identifier  # noqa: E501

        :param app_ins_id: The app_ins_id of this BwInfo.
        :type app_ins_id: str
        """
        if app_ins_id is None:
            raise ValueError("Invalid value for `app_ins_id`, must not be `None`")  # noqa: E501

        self._app_ins_id = app_ins_id

    @property
    def fixed_allocation(self) -> str:
        """Gets the fixed_allocation of this BwInfo.

        Size of requested fixed BW allocation in [bps]  # noqa: E501

        :return: The fixed_allocation of this BwInfo.
        :rtype: str
        """
        return self._fixed_allocation

    @fixed_allocation.setter
    def fixed_allocation(self, fixed_allocation: str):
        """Sets the fixed_allocation of this BwInfo.

        Size of requested fixed BW allocation in [bps]  # noqa: E501

        :param fixed_allocation: The fixed_allocation of this BwInfo.
        :type fixed_allocation: str
        """
        if fixed_allocation is None:
            raise ValueError("Invalid value for `fixed_allocation`, must not be `None`")  # noqa: E501

        self._fixed_allocation = fixed_allocation

    @property
    def fixed_bw_priority(self) -> str:
        """Gets the fixed_bw_priority of this BwInfo.

        Indicates the allocation priority when dealing with several applications or sessions in parallel. Values are not defined in the present document  # noqa: E501

        :return: The fixed_bw_priority of this BwInfo.
        :rtype: str
        """
        return self._fixed_bw_priority

    @fixed_bw_priority.setter
    def fixed_bw_priority(self, fixed_bw_priority: str):
        """Sets the fixed_bw_priority of this BwInfo.

        Indicates the allocation priority when dealing with several applications or sessions in parallel. Values are not defined in the present document  # noqa: E501

        :param fixed_bw_priority: The fixed_bw_priority of this BwInfo.
        :type fixed_bw_priority: str
        """
        allowed_values = ["SEE_DESCRIPTION"]  # noqa: E501
        if fixed_bw_priority not in allowed_values:
            raise ValueError(
                "Invalid value for `fixed_bw_priority` ({0}), must be one of {1}"
                .format(fixed_bw_priority, allowed_values)
            )

        self._fixed_bw_priority = fixed_bw_priority

    @property
    def request_type(self) -> int:
        """Gets the request_type of this BwInfo.

        Numeric value (0 - 255) corresponding to specific type of consumer as following: 0 = APPLICATION_SPECIFIC_BW_ALLOCATION 1 = SESSION_SPECIFIC_BW_ALLOCATION  # noqa: E501

        :return: The request_type of this BwInfo.
        :rtype: int
        """
        return self._request_type

    @request_type.setter
    def request_type(self, request_type: int):
        """Sets the request_type of this BwInfo.

        Numeric value (0 - 255) corresponding to specific type of consumer as following: 0 = APPLICATION_SPECIFIC_BW_ALLOCATION 1 = SESSION_SPECIFIC_BW_ALLOCATION  # noqa: E501

        :param request_type: The request_type of this BwInfo.
        :type request_type: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if request_type not in allowed_values:
            raise ValueError(
                "Invalid value for `request_type` ({0}), must be one of {1}"
                .format(request_type, allowed_values)
            )

        self._request_type = request_type

    @property
    def session_filter(self) -> List[BwInfoSessionFilter]:
        """Gets the session_filter of this BwInfo.

        Session filtering criteria, applicable when requestType is set as SESSION_SPECIFIC_BW_ALLOCATION. Any filtering criteria shall define a single session only. In case multiple sessions match sessionFilter the request shall be rejected  # noqa: E501

        :return: The session_filter of this BwInfo.
        :rtype: List[BwInfoSessionFilter]
        """
        return self._session_filter

    @session_filter.setter
    def session_filter(self, session_filter: List[BwInfoSessionFilter]):
        """Sets the session_filter of this BwInfo.

        Session filtering criteria, applicable when requestType is set as SESSION_SPECIFIC_BW_ALLOCATION. Any filtering criteria shall define a single session only. In case multiple sessions match sessionFilter the request shall be rejected  # noqa: E501

        :param session_filter: The session_filter of this BwInfo.
        :type session_filter: List[BwInfoSessionFilter]
        """

        self._session_filter = session_filter

    @property
    def time_stamp(self) -> BwInfoTimeStamp:
        """Gets the time_stamp of this BwInfo.


        :return: The time_stamp of this BwInfo.
        :rtype: BwInfoTimeStamp
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp: BwInfoTimeStamp):
        """Sets the time_stamp of this BwInfo.


        :param time_stamp: The time_stamp of this BwInfo.
        :type time_stamp: BwInfoTimeStamp
        """

        self._time_stamp = time_stamp
