# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401 # pylint: disable=unused-import

from typing import List, Dict  # noqa: F401 # pylint: disable=unused-import

from swagger_server.models.base_model_ import Model
from swagger_server.models.MEC015_bandwidth.bw_info_deltas_session_filter import \
	BwInfoDeltasSessionFilter  # noqa: F401 # pylint: disable=unused-import,E501
from swagger_server import util


class BwInfoDeltas(Model):
	"""NOTE: This class is auto generated by the swagger code generator program.

	Do not edit the class manually.
	"""

	def __init__(self, allocation_direction: str = None, app_ins_id: str = None, fixed_allocation: str = None,
	             fixed_bw_priority: str = None, request_type: str = None,
	             session_filter: List[BwInfoDeltasSessionFilter] = None):  # noqa: E501
		"""BwInfoDeltas - a model defined in Swagger

		:param allocation_direction: The allocation_direction of this BwInfoDeltas.  # noqa: E501
		:type allocation_direction: str
		:param app_ins_id: The app_ins_id of this BwInfoDeltas.  # noqa: E501
		:type app_ins_id: str
		:param fixed_allocation: The fixed_allocation of this BwInfoDeltas.  # noqa: E501
		:type fixed_allocation: str
		:param fixed_bw_priority: The fixed_bw_priority of this BwInfoDeltas.  # noqa: E501
		:type fixed_bw_priority: str
		:param request_type: The request_type of this BwInfoDeltas.  # noqa: E501
		:type request_type: str
		:param session_filter: The session_filter of this BwInfoDeltas.  # noqa: E501
		:type session_filter: List[BwInfoDeltasSessionFilter]
		"""
		self.swagger_types = {
			'allocation_direction': str,
			'app_ins_id': str,
			'fixed_allocation': str,
			'fixed_bw_priority': str,
			'request_type': str,
			'session_filter': List[BwInfoDeltasSessionFilter]
		}

		self.attribute_map = {
			'allocation_direction': 'allocationDirection',
			'app_ins_id': 'appInsId',
			'fixed_allocation': 'fixedAllocation',
			'fixed_bw_priority': 'fixedBWPriority',
			'request_type': 'requestType',
			'session_filter': 'sessionFilter'
		}
		self._allocation_direction = allocation_direction
		self._app_ins_id = app_ins_id
		self._fixed_allocation = fixed_allocation
		self._fixed_bw_priority = fixed_bw_priority
		self._request_type = request_type
		self._session_filter = session_filter

	@classmethod
	def from_dict(cls, dikt) -> 'BwInfoDeltas':
		"""Returns the dict as a model

		:param dikt: A dict.
		:type: dict
		:return: The BwInfoDeltas of this BwInfoDeltas.  # noqa: E501
		:rtype: BwInfoDeltas
		"""
		return util.deserialize_model(dikt, cls)

	@property
	def allocation_direction(self) -> str:
		"""Gets the allocation_direction of this BwInfoDeltas.

		The direction of the requested BW allocation: 00 = Downlink (towards the UE) 01 = Uplink (towards the application/session) 10 = Symmetrical  # noqa: E501

		:return: The allocation_direction of this BwInfoDeltas.
		:rtype: str
		"""
		return self._allocation_direction

	@allocation_direction.setter
	def allocation_direction(self, allocation_direction: str):
		"""Sets the allocation_direction of this BwInfoDeltas.

		The direction of the requested BW allocation: 00 = Downlink (towards the UE) 01 = Uplink (towards the application/session) 10 = Symmetrical  # noqa: E501

		:param allocation_direction: The allocation_direction of this BwInfoDeltas.
		:type allocation_direction: str
		"""

		self._allocation_direction = allocation_direction

	@property
	def app_ins_id(self) -> str:
		"""Gets the app_ins_id of this BwInfoDeltas.

		Application instance identifier  # noqa: E501

		:return: The app_ins_id of this BwInfoDeltas.
		:rtype: str
		"""
		return self._app_ins_id

	@app_ins_id.setter
	def app_ins_id(self, app_ins_id: str):
		"""Sets the app_ins_id of this BwInfoDeltas.

		Application instance identifier  # noqa: E501

		:param app_ins_id: The app_ins_id of this BwInfoDeltas.
		:type app_ins_id: str
		"""
		if app_ins_id is None:
			raise ValueError("Invalid value for `app_ins_id`, must not be `None`")  # noqa: E501

		self._app_ins_id = app_ins_id

	@property
	def fixed_allocation(self) -> str:
		"""Gets the fixed_allocation of this BwInfoDeltas.

		Size of requested fixed BW allocation in [bps]  # noqa: E501

		:return: The fixed_allocation of this BwInfoDeltas.
		:rtype: str
		"""
		return self._fixed_allocation

	@fixed_allocation.setter
	def fixed_allocation(self, fixed_allocation: str):
		"""Sets the fixed_allocation of this BwInfoDeltas.

		Size of requested fixed BW allocation in [bps]  # noqa: E501

		:param fixed_allocation: The fixed_allocation of this BwInfoDeltas.
		:type fixed_allocation: str
		"""

		self._fixed_allocation = fixed_allocation

	@property
	def fixed_bw_priority(self) -> str:
		"""Gets the fixed_bw_priority of this BwInfoDeltas.

		Indicates the allocation priority when dealing with several applications or sessions in parallel. Values are not defined in the present document  # noqa: E501

		:return: The fixed_bw_priority of this BwInfoDeltas.
		:rtype: str
		"""
		return self._fixed_bw_priority

	@fixed_bw_priority.setter
	def fixed_bw_priority(self, fixed_bw_priority: str):
		"""Sets the fixed_bw_priority of this BwInfoDeltas.

		Indicates the allocation priority when dealing with several applications or sessions in parallel. Values are not defined in the present document  # noqa: E501

		:param fixed_bw_priority: The fixed_bw_priority of this BwInfoDeltas.
		:type fixed_bw_priority: str
		"""
		allowed_values = ["SEE DESCRIPTION"]  # noqa: E501
		if fixed_bw_priority not in allowed_values:
			raise ValueError(
				"Invalid value for `fixed_bw_priority` ({0}), must be one of {1}"
					.format(fixed_bw_priority, allowed_values)
			)

		self._fixed_bw_priority = fixed_bw_priority

	@property
	def request_type(self) -> str:
		"""Gets the request_type of this BwInfoDeltas.

		Numeric value (0 - 255) corresponding to specific type of consumer as following: 0 = APPLICATION_SPECIFIC_BW_ALLOCATION 1 = SESSION_SPECIFIC_BW_ALLOCATION  # noqa: E501

		:return: The request_type of this BwInfoDeltas.
		:rtype: str
		"""
		return self._request_type

	@request_type.setter
	def request_type(self, request_type: str):
		"""Sets the request_type of this BwInfoDeltas.

		Numeric value (0 - 255) corresponding to specific type of consumer as following: 0 = APPLICATION_SPECIFIC_BW_ALLOCATION 1 = SESSION_SPECIFIC_BW_ALLOCATION  # noqa: E501

		:param request_type: The request_type of this BwInfoDeltas.
		:type request_type: str
		"""
		allowed_values = ["0", "1"]  # noqa: E501
		if request_type not in allowed_values:
			raise ValueError(
				"Invalid value for `request_type` ({0}), must be one of {1}"
					.format(request_type, allowed_values)
			)

		self._request_type = request_type

	@property
	def session_filter(self) -> List[BwInfoDeltasSessionFilter]:
		"""Gets the session_filter of this BwInfoDeltas.

		Session filtering criteria, applicable when requestType is set as SESSION_SPECIFIC_BW_ALLOCATION. Any filtering criteria shall define a single session only. In case multiple sessions match sessionFilter the request shall be rejected  # noqa: E501

		:return: The session_filter of this BwInfoDeltas.
		:rtype: List[BwInfoDeltasSessionFilter]
		"""
		return self._session_filter

	@session_filter.setter
	def session_filter(self, session_filter: List[BwInfoDeltasSessionFilter]):
		"""Sets the session_filter of this BwInfoDeltas.

		Session filtering criteria, applicable when requestType is set as SESSION_SPECIFIC_BW_ALLOCATION. Any filtering criteria shall define a single session only. In case multiple sessions match sessionFilter the request shall be rejected  # noqa: E501

		:param session_filter: The session_filter of this BwInfoDeltas.
		:type session_filter: List[BwInfoDeltasSessionFilter]
		"""

		self._session_filter = session_filter
