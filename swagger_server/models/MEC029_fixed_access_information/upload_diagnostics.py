# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.MEC029_fixed_access_information.time_stamp import TimeStamp  # noqa: F401,E501
from swagger_server.models.MEC029_fixed_access_information.upload_diagnostics_diagnostics_state import UploadDiagnosticsDiagnosticsState  # noqa: F401,E501
from swagger_server import util


class UploadDiagnostics(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, b_om_time: TimeStamp=None, diagnostics_state: UploadDiagnosticsDiagnosticsState=None, e_om_time: TimeStamp=None, r_om_time: TimeStamp=None, t_cp_open_reponse_time: TimeStamp=None, t_cp_open_request_time: TimeStamp=None, test_bytes_sent: int=None, test_file_length: int=None, upload_uri: str=None):  # noqa: E501
        """UploadDiagnostics - a model defined in Swagger

        :param b_om_time: The b_om_time of this UploadDiagnostics.  # noqa: E501
        :type b_om_time: TimeStamp
        :param diagnostics_state: The diagnostics_state of this UploadDiagnostics.  # noqa: E501
        :type diagnostics_state: UploadDiagnosticsDiagnosticsState
        :param e_om_time: The e_om_time of this UploadDiagnostics.  # noqa: E501
        :type e_om_time: TimeStamp
        :param r_om_time: The r_om_time of this UploadDiagnostics.  # noqa: E501
        :type r_om_time: TimeStamp
        :param t_cp_open_reponse_time: The t_cp_open_reponse_time of this UploadDiagnostics.  # noqa: E501
        :type t_cp_open_reponse_time: TimeStamp
        :param t_cp_open_request_time: The t_cp_open_request_time of this UploadDiagnostics.  # noqa: E501
        :type t_cp_open_request_time: TimeStamp
        :param test_bytes_sent: The test_bytes_sent of this UploadDiagnostics.  # noqa: E501
        :type test_bytes_sent: int
        :param test_file_length: The test_file_length of this UploadDiagnostics.  # noqa: E501
        :type test_file_length: int
        :param upload_uri: The upload_uri of this UploadDiagnostics.  # noqa: E501
        :type upload_uri: str
        """
        self.swagger_types = {
            'b_om_time': TimeStamp,
            'diagnostics_state': UploadDiagnosticsDiagnosticsState,
            'e_om_time': TimeStamp,
            'r_om_time': TimeStamp,
            't_cp_open_reponse_time': TimeStamp,
            't_cp_open_request_time': TimeStamp,
            'test_bytes_sent': int,
            'test_file_length': int,
            'upload_uri': str
        }

        self.attribute_map = {
            'b_om_time': 'bOMTime',
            'diagnostics_state': 'diagnosticsState',
            'e_om_time': 'eOMTime',
            'r_om_time': 'rOMTime',
            't_cp_open_reponse_time': 'tCPOpenReponseTime',
            't_cp_open_request_time': 'tCPOpenRequestTime',
            'test_bytes_sent': 'testBytesSent',
            'test_file_length': 'testFileLength',
            'upload_uri': 'uploadURI'
        }
        self._b_om_time = b_om_time
        self._diagnostics_state = diagnostics_state
        self._e_om_time = e_om_time
        self._r_om_time = r_om_time
        self._t_cp_open_reponse_time = t_cp_open_reponse_time
        self._t_cp_open_request_time = t_cp_open_request_time
        self._test_bytes_sent = test_bytes_sent
        self._test_file_length = test_file_length
        self._upload_uri = upload_uri

    @classmethod
    def from_dict(cls, dikt) -> 'UploadDiagnostics':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UploadDiagnostics of this UploadDiagnostics.  # noqa: E501
        :rtype: UploadDiagnostics
        """
        return util.deserialize_model(dikt, cls)

    @property
    def b_om_time(self) -> TimeStamp:
        """Gets the b_om_time of this UploadDiagnostics.


        :return: The b_om_time of this UploadDiagnostics.
        :rtype: TimeStamp
        """
        return self._b_om_time

    @b_om_time.setter
    def b_om_time(self, b_om_time: TimeStamp):
        """Sets the b_om_time of this UploadDiagnostics.


        :param b_om_time: The b_om_time of this UploadDiagnostics.
        :type b_om_time: TimeStamp
        """

        self._b_om_time = b_om_time

    @property
    def diagnostics_state(self) -> UploadDiagnosticsDiagnosticsState:
        """Gets the diagnostics_state of this UploadDiagnostics.


        :return: The diagnostics_state of this UploadDiagnostics.
        :rtype: UploadDiagnosticsDiagnosticsState
        """
        return self._diagnostics_state

    @diagnostics_state.setter
    def diagnostics_state(self, diagnostics_state: UploadDiagnosticsDiagnosticsState):
        """Sets the diagnostics_state of this UploadDiagnostics.


        :param diagnostics_state: The diagnostics_state of this UploadDiagnostics.
        :type diagnostics_state: UploadDiagnosticsDiagnosticsState
        """
        if diagnostics_state is None:
            raise ValueError("Invalid value for `diagnostics_state`, must not be `None`")  # noqa: E501

        self._diagnostics_state = diagnostics_state

    @property
    def e_om_time(self) -> TimeStamp:
        """Gets the e_om_time of this UploadDiagnostics.


        :return: The e_om_time of this UploadDiagnostics.
        :rtype: TimeStamp
        """
        return self._e_om_time

    @e_om_time.setter
    def e_om_time(self, e_om_time: TimeStamp):
        """Sets the e_om_time of this UploadDiagnostics.


        :param e_om_time: The e_om_time of this UploadDiagnostics.
        :type e_om_time: TimeStamp
        """

        self._e_om_time = e_om_time

    @property
    def r_om_time(self) -> TimeStamp:
        """Gets the r_om_time of this UploadDiagnostics.


        :return: The r_om_time of this UploadDiagnostics.
        :rtype: TimeStamp
        """
        return self._r_om_time

    @r_om_time.setter
    def r_om_time(self, r_om_time: TimeStamp):
        """Sets the r_om_time of this UploadDiagnostics.


        :param r_om_time: The r_om_time of this UploadDiagnostics.
        :type r_om_time: TimeStamp
        """

        self._r_om_time = r_om_time

    @property
    def t_cp_open_reponse_time(self) -> TimeStamp:
        """Gets the t_cp_open_reponse_time of this UploadDiagnostics.


        :return: The t_cp_open_reponse_time of this UploadDiagnostics.
        :rtype: TimeStamp
        """
        return self._t_cp_open_reponse_time

    @t_cp_open_reponse_time.setter
    def t_cp_open_reponse_time(self, t_cp_open_reponse_time: TimeStamp):
        """Sets the t_cp_open_reponse_time of this UploadDiagnostics.


        :param t_cp_open_reponse_time: The t_cp_open_reponse_time of this UploadDiagnostics.
        :type t_cp_open_reponse_time: TimeStamp
        """

        self._t_cp_open_reponse_time = t_cp_open_reponse_time

    @property
    def t_cp_open_request_time(self) -> TimeStamp:
        """Gets the t_cp_open_request_time of this UploadDiagnostics.


        :return: The t_cp_open_request_time of this UploadDiagnostics.
        :rtype: TimeStamp
        """
        return self._t_cp_open_request_time

    @t_cp_open_request_time.setter
    def t_cp_open_request_time(self, t_cp_open_request_time: TimeStamp):
        """Sets the t_cp_open_request_time of this UploadDiagnostics.


        :param t_cp_open_request_time: The t_cp_open_request_time of this UploadDiagnostics.
        :type t_cp_open_request_time: TimeStamp
        """

        self._t_cp_open_request_time = t_cp_open_request_time

    @property
    def test_bytes_sent(self) -> int:
        """Gets the test_bytes_sent of this UploadDiagnostics.

        The test traffic sent in bytes during the FTP/HTTP transaction including FTP/HTTP headers, between bOMTime and eOMTime.  # noqa: E501

        :return: The test_bytes_sent of this UploadDiagnostics.
        :rtype: int
        """
        return self._test_bytes_sent

    @test_bytes_sent.setter
    def test_bytes_sent(self, test_bytes_sent: int):
        """Sets the test_bytes_sent of this UploadDiagnostics.

        The test traffic sent in bytes during the FTP/HTTP transaction including FTP/HTTP headers, between bOMTime and eOMTime.  # noqa: E501

        :param test_bytes_sent: The test_bytes_sent of this UploadDiagnostics.
        :type test_bytes_sent: int
        """

        self._test_bytes_sent = test_bytes_sent

    @property
    def test_file_length(self) -> int:
        """Gets the test_file_length of this UploadDiagnostics.

        The size of the file (in bytes) to be uploaded to the server.  # noqa: E501

        :return: The test_file_length of this UploadDiagnostics.
        :rtype: int
        """
        return self._test_file_length

    @test_file_length.setter
    def test_file_length(self, test_file_length: int):
        """Sets the test_file_length of this UploadDiagnostics.

        The size of the file (in bytes) to be uploaded to the server.  # noqa: E501

        :param test_file_length: The test_file_length of this UploadDiagnostics.
        :type test_file_length: int
        """

        self._test_file_length = test_file_length

    @property
    def upload_uri(self) -> str:
        """Gets the upload_uri of this UploadDiagnostics.

        The URI for the device to perform the upload to.  # noqa: E501

        :return: The upload_uri of this UploadDiagnostics.
        :rtype: str
        """
        return self._upload_uri

    @upload_uri.setter
    def upload_uri(self, upload_uri: str):
        """Sets the upload_uri of this UploadDiagnostics.

        The URI for the device to perform the upload to.  # noqa: E501

        :param upload_uri: The upload_uri of this UploadDiagnostics.
        :type upload_uri: str
        """

        self._upload_uri = upload_uri
