# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.MEC029_fixed_access_information.device_err_status import DeviceErrStatus  # noqa: F401,E501
from swagger_server.models.MEC029_fixed_access_information.time_stamp import TimeStamp  # noqa: F401,E501
from swagger_server import util


class DevInfoNotification(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, device_err_status: DeviceErrStatus=None, device_id: str=None, notification_type: str=None, time_stamp: TimeStamp=None):  # noqa: E501
        """DevInfoNotification - a model defined in Swagger

        :param device_err_status: The device_err_status of this DevInfoNotification.  # noqa: E501
        :type device_err_status: DeviceErrStatus
        :param device_id: The device_id of this DevInfoNotification.  # noqa: E501
        :type device_id: str
        :param notification_type: The notification_type of this DevInfoNotification.  # noqa: E501
        :type notification_type: str
        :param time_stamp: The time_stamp of this DevInfoNotification.  # noqa: E501
        :type time_stamp: TimeStamp
        """
        self.swagger_types = {
            'device_err_status': DeviceErrStatus,
            'device_id': str,
            'notification_type': str,
            'time_stamp': TimeStamp
        }

        self.attribute_map = {
            'device_err_status': 'deviceErrStatus',
            'device_id': 'deviceId',
            'notification_type': 'notificationType',
            'time_stamp': 'timeStamp'
        }
        self._device_err_status = device_err_status
        self._device_id = device_id
        self._notification_type = notification_type
        self._time_stamp = time_stamp

    @classmethod
    def from_dict(cls, dikt) -> 'DevInfoNotification':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DevInfoNotification of this DevInfoNotification.  # noqa: E501
        :rtype: DevInfoNotification
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device_err_status(self) -> DeviceErrStatus:
        """Gets the device_err_status of this DevInfoNotification.


        :return: The device_err_status of this DevInfoNotification.
        :rtype: DeviceErrStatus
        """
        return self._device_err_status

    @device_err_status.setter
    def device_err_status(self, device_err_status: DeviceErrStatus):
        """Sets the device_err_status of this DevInfoNotification.


        :param device_err_status: The device_err_status of this DevInfoNotification.
        :type device_err_status: DeviceErrStatus
        """
        if device_err_status is None:
            raise ValueError("Invalid value for `device_err_status`, must not be `None`")  # noqa: E501

        self._device_err_status = device_err_status

    @property
    def device_id(self) -> str:
        """Gets the device_id of this DevInfoNotification.

        The identifier for a device.  # noqa: E501

        :return: The device_id of this DevInfoNotification.
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id: str):
        """Sets the device_id of this DevInfoNotification.

        The identifier for a device.  # noqa: E501

        :param device_id: The device_id of this DevInfoNotification.
        :type device_id: str
        """
        if device_id is None:
            raise ValueError("Invalid value for `device_id`, must not be `None`")  # noqa: E501

        self._device_id = device_id

    @property
    def notification_type(self) -> str:
        """Gets the notification_type of this DevInfoNotification.

        Shall be set to \"DevInfoNotification\".  # noqa: E501

        :return: The notification_type of this DevInfoNotification.
        :rtype: str
        """
        return self._notification_type

    @notification_type.setter
    def notification_type(self, notification_type: str):
        """Sets the notification_type of this DevInfoNotification.

        Shall be set to \"DevInfoNotification\".  # noqa: E501

        :param notification_type: The notification_type of this DevInfoNotification.
        :type notification_type: str
        """
        if notification_type is None:
            raise ValueError("Invalid value for `notification_type`, must not be `None`")  # noqa: E501

        self._notification_type = notification_type

    @property
    def time_stamp(self) -> TimeStamp:
        """Gets the time_stamp of this DevInfoNotification.


        :return: The time_stamp of this DevInfoNotification.
        :rtype: TimeStamp
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp: TimeStamp):
        """Sets the time_stamp of this DevInfoNotification.


        :param time_stamp: The time_stamp of this DevInfoNotification.
        :type time_stamp: TimeStamp
        """

        self._time_stamp = time_stamp
