# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.MEC029_fixed_access_information.device_info_device_status import DeviceInfoDeviceStatus  # noqa: F401,E501
from swagger_server.models.MEC029_fixed_access_information.download_diagnostics import DownloadDiagnostics  # noqa: F401,E501
from swagger_server.models.MEC029_fixed_access_information.ip_ping_diagnostics import IPPingDiagnostics  # noqa: F401,E501
from swagger_server.models.MEC029_fixed_access_information.time_stamp import TimeStamp  # noqa: F401,E501
from swagger_server.models.MEC029_fixed_access_information.trace_route_diagnostics import TraceRouteDiagnostics  # noqa: F401,E501
from swagger_server.models.MEC029_fixed_access_information.upload_diagnostics import UploadDiagnostics  # noqa: F401,E501
from swagger_server import util


class DeviceInfo(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, device_id: List[str]=None, device_status: DeviceInfoDeviceStatus=None, download_diagnostics: DownloadDiagnostics=None, gw_id: List[str]=None, i_p_connection_up_time: int=None, i_p_ping_diagnostics: IPPingDiagnostics=None, time_stamp: TimeStamp=None, total_bytes_received: int=None, total_bytes_sent: int=None, total_packets_received: int=None, total_packets_sent: int=None, trace_route_diagnostics: TraceRouteDiagnostics=None, up_time: int=None, upload_diagnostics: UploadDiagnostics=None):  # noqa: E501
        """DeviceInfo - a model defined in Swagger

        :param device_id: The device_id of this DeviceInfo.  # noqa: E501
        :type device_id: List[str]
        :param device_status: The device_status of this DeviceInfo.  # noqa: E501
        :type device_status: DeviceInfoDeviceStatus
        :param download_diagnostics: The download_diagnostics of this DeviceInfo.  # noqa: E501
        :type download_diagnostics: DownloadDiagnostics
        :param gw_id: The gw_id of this DeviceInfo.  # noqa: E501
        :type gw_id: List[str]
        :param i_p_connection_up_time: The i_p_connection_up_time of this DeviceInfo.  # noqa: E501
        :type i_p_connection_up_time: int
        :param i_p_ping_diagnostics: The i_p_ping_diagnostics of this DeviceInfo.  # noqa: E501
        :type i_p_ping_diagnostics: IPPingDiagnostics
        :param time_stamp: The time_stamp of this DeviceInfo.  # noqa: E501
        :type time_stamp: TimeStamp
        :param total_bytes_received: The total_bytes_received of this DeviceInfo.  # noqa: E501
        :type total_bytes_received: int
        :param total_bytes_sent: The total_bytes_sent of this DeviceInfo.  # noqa: E501
        :type total_bytes_sent: int
        :param total_packets_received: The total_packets_received of this DeviceInfo.  # noqa: E501
        :type total_packets_received: int
        :param total_packets_sent: The total_packets_sent of this DeviceInfo.  # noqa: E501
        :type total_packets_sent: int
        :param trace_route_diagnostics: The trace_route_diagnostics of this DeviceInfo.  # noqa: E501
        :type trace_route_diagnostics: TraceRouteDiagnostics
        :param up_time: The up_time of this DeviceInfo.  # noqa: E501
        :type up_time: int
        :param upload_diagnostics: The upload_diagnostics of this DeviceInfo.  # noqa: E501
        :type upload_diagnostics: UploadDiagnostics
        """
        self.swagger_types = {
            'device_id': List[str],
            'device_status': DeviceInfoDeviceStatus,
            'download_diagnostics': DownloadDiagnostics,
            'gw_id': List[str],
            'i_p_connection_up_time': int,
            'i_p_ping_diagnostics': IPPingDiagnostics,
            'time_stamp': TimeStamp,
            'total_bytes_received': int,
            'total_bytes_sent': int,
            'total_packets_received': int,
            'total_packets_sent': int,
            'trace_route_diagnostics': TraceRouteDiagnostics,
            'up_time': int,
            'upload_diagnostics': UploadDiagnostics
        }

        self.attribute_map = {
            'device_id': 'deviceId',
            'device_status': 'deviceStatus',
            'download_diagnostics': 'downloadDiagnostics',
            'gw_id': 'gwId',
            'i_p_connection_up_time': 'iPConnectionUpTime',
            'i_p_ping_diagnostics': 'iPPingDiagnostics',
            'time_stamp': 'timeStamp',
            'total_bytes_received': 'totalBytesReceived',
            'total_bytes_sent': 'totalBytesSent',
            'total_packets_received': 'totalPacketsReceived',
            'total_packets_sent': 'totalPacketsSent',
            'trace_route_diagnostics': 'traceRouteDiagnostics',
            'up_time': 'upTime',
            'upload_diagnostics': 'uploadDiagnostics'
        }
        self._device_id = device_id
        self._device_status = device_status
        self._download_diagnostics = download_diagnostics
        self._gw_id = gw_id
        self._i_p_connection_up_time = i_p_connection_up_time
        self._i_p_ping_diagnostics = i_p_ping_diagnostics
        self._time_stamp = time_stamp
        self._total_bytes_received = total_bytes_received
        self._total_bytes_sent = total_bytes_sent
        self._total_packets_received = total_packets_received
        self._total_packets_sent = total_packets_sent
        self._trace_route_diagnostics = trace_route_diagnostics
        self._up_time = up_time
        self._upload_diagnostics = upload_diagnostics

    @classmethod
    def from_dict(cls, dikt) -> 'DeviceInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DeviceInfo of this DeviceInfo.  # noqa: E501
        :rtype: DeviceInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device_id(self) -> List[str]:
        """Gets the device_id of this DeviceInfo.

        Typically, the serial number of the device.This value shall remain fixed over the lifetime of the device, including across firmware updates.  # noqa: E501

        :return: The device_id of this DeviceInfo.
        :rtype: List[str]
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id: List[str]):
        """Sets the device_id of this DeviceInfo.

        Typically, the serial number of the device.This value shall remain fixed over the lifetime of the device, including across firmware updates.  # noqa: E501

        :param device_id: The device_id of this DeviceInfo.
        :type device_id: List[str]
        """

        self._device_id = device_id

    @property
    def device_status(self) -> DeviceInfoDeviceStatus:
        """Gets the device_status of this DeviceInfo.


        :return: The device_status of this DeviceInfo.
        :rtype: DeviceInfoDeviceStatus
        """
        return self._device_status

    @device_status.setter
    def device_status(self, device_status: DeviceInfoDeviceStatus):
        """Sets the device_status of this DeviceInfo.


        :param device_status: The device_status of this DeviceInfo.
        :type device_status: DeviceInfoDeviceStatus
        """
        if device_status is None:
            raise ValueError("Invalid value for `device_status`, must not be `None`")  # noqa: E501

        self._device_status = device_status

    @property
    def download_diagnostics(self) -> DownloadDiagnostics:
        """Gets the download_diagnostics of this DeviceInfo.


        :return: The download_diagnostics of this DeviceInfo.
        :rtype: DownloadDiagnostics
        """
        return self._download_diagnostics

    @download_diagnostics.setter
    def download_diagnostics(self, download_diagnostics: DownloadDiagnostics):
        """Sets the download_diagnostics of this DeviceInfo.


        :param download_diagnostics: The download_diagnostics of this DeviceInfo.
        :type download_diagnostics: DownloadDiagnostics
        """

        self._download_diagnostics = download_diagnostics

    @property
    def gw_id(self) -> List[str]:
        """Gets the gw_id of this DeviceInfo.

        Information (typically the serial number) to identify an Internet Gateway Device through which the customer premises device is connected.  This value shall remain fixed over the lifetime of the device, including across firmware updates.  # noqa: E501

        :return: The gw_id of this DeviceInfo.
        :rtype: List[str]
        """
        return self._gw_id

    @gw_id.setter
    def gw_id(self, gw_id: List[str]):
        """Sets the gw_id of this DeviceInfo.

        Information (typically the serial number) to identify an Internet Gateway Device through which the customer premises device is connected.  This value shall remain fixed over the lifetime of the device, including across firmware updates.  # noqa: E501

        :param gw_id: The gw_id of this DeviceInfo.
        :type gw_id: List[str]
        """
        if gw_id is None:
            raise ValueError("Invalid value for `gw_id`, must not be `None`")  # noqa: E501

        self._gw_id = gw_id

    @property
    def i_p_connection_up_time(self) -> int:
        """Gets the i_p_connection_up_time of this DeviceInfo.

        The time in seconds that the IP interface has been connected.  # noqa: E501

        :return: The i_p_connection_up_time of this DeviceInfo.
        :rtype: int
        """
        return self._i_p_connection_up_time

    @i_p_connection_up_time.setter
    def i_p_connection_up_time(self, i_p_connection_up_time: int):
        """Sets the i_p_connection_up_time of this DeviceInfo.

        The time in seconds that the IP interface has been connected.  # noqa: E501

        :param i_p_connection_up_time: The i_p_connection_up_time of this DeviceInfo.
        :type i_p_connection_up_time: int
        """
        if i_p_connection_up_time is None:
            raise ValueError("Invalid value for `i_p_connection_up_time`, must not be `None`")  # noqa: E501

        self._i_p_connection_up_time = i_p_connection_up_time

    @property
    def i_p_ping_diagnostics(self) -> IPPingDiagnostics:
        """Gets the i_p_ping_diagnostics of this DeviceInfo.


        :return: The i_p_ping_diagnostics of this DeviceInfo.
        :rtype: IPPingDiagnostics
        """
        return self._i_p_ping_diagnostics

    @i_p_ping_diagnostics.setter
    def i_p_ping_diagnostics(self, i_p_ping_diagnostics: IPPingDiagnostics):
        """Sets the i_p_ping_diagnostics of this DeviceInfo.


        :param i_p_ping_diagnostics: The i_p_ping_diagnostics of this DeviceInfo.
        :type i_p_ping_diagnostics: IPPingDiagnostics
        """

        self._i_p_ping_diagnostics = i_p_ping_diagnostics

    @property
    def time_stamp(self) -> TimeStamp:
        """Gets the time_stamp of this DeviceInfo.


        :return: The time_stamp of this DeviceInfo.
        :rtype: TimeStamp
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp: TimeStamp):
        """Sets the time_stamp of this DeviceInfo.


        :param time_stamp: The time_stamp of this DeviceInfo.
        :type time_stamp: TimeStamp
        """

        self._time_stamp = time_stamp

    @property
    def total_bytes_received(self) -> int:
        """Gets the total_bytes_received of this DeviceInfo.

        Total number of IP payload bytes received since the device was last restarted.  # noqa: E501

        :return: The total_bytes_received of this DeviceInfo.
        :rtype: int
        """
        return self._total_bytes_received

    @total_bytes_received.setter
    def total_bytes_received(self, total_bytes_received: int):
        """Sets the total_bytes_received of this DeviceInfo.

        Total number of IP payload bytes received since the device was last restarted.  # noqa: E501

        :param total_bytes_received: The total_bytes_received of this DeviceInfo.
        :type total_bytes_received: int
        """
        if total_bytes_received is None:
            raise ValueError("Invalid value for `total_bytes_received`, must not be `None`")  # noqa: E501

        self._total_bytes_received = total_bytes_received

    @property
    def total_bytes_sent(self) -> int:
        """Gets the total_bytes_sent of this DeviceInfo.

        Total number of IP payload bytes sent since the device was last restarted.  # noqa: E501

        :return: The total_bytes_sent of this DeviceInfo.
        :rtype: int
        """
        return self._total_bytes_sent

    @total_bytes_sent.setter
    def total_bytes_sent(self, total_bytes_sent: int):
        """Sets the total_bytes_sent of this DeviceInfo.

        Total number of IP payload bytes sent since the device was last restarted.  # noqa: E501

        :param total_bytes_sent: The total_bytes_sent of this DeviceInfo.
        :type total_bytes_sent: int
        """
        if total_bytes_sent is None:
            raise ValueError("Invalid value for `total_bytes_sent`, must not be `None`")  # noqa: E501

        self._total_bytes_sent = total_bytes_sent

    @property
    def total_packets_received(self) -> int:
        """Gets the total_packets_received of this DeviceInfo.

        Total number of packets received since the device was last restarted.  # noqa: E501

        :return: The total_packets_received of this DeviceInfo.
        :rtype: int
        """
        return self._total_packets_received

    @total_packets_received.setter
    def total_packets_received(self, total_packets_received: int):
        """Sets the total_packets_received of this DeviceInfo.

        Total number of packets received since the device was last restarted.  # noqa: E501

        :param total_packets_received: The total_packets_received of this DeviceInfo.
        :type total_packets_received: int
        """
        if total_packets_received is None:
            raise ValueError("Invalid value for `total_packets_received`, must not be `None`")  # noqa: E501

        self._total_packets_received = total_packets_received

    @property
    def total_packets_sent(self) -> int:
        """Gets the total_packets_sent of this DeviceInfo.

        Total number of packets sent since the device was last restarted.  # noqa: E501

        :return: The total_packets_sent of this DeviceInfo.
        :rtype: int
        """
        return self._total_packets_sent

    @total_packets_sent.setter
    def total_packets_sent(self, total_packets_sent: int):
        """Sets the total_packets_sent of this DeviceInfo.

        Total number of packets sent since the device was last restarted.  # noqa: E501

        :param total_packets_sent: The total_packets_sent of this DeviceInfo.
        :type total_packets_sent: int
        """
        if total_packets_sent is None:
            raise ValueError("Invalid value for `total_packets_sent`, must not be `None`")  # noqa: E501

        self._total_packets_sent = total_packets_sent

    @property
    def trace_route_diagnostics(self) -> TraceRouteDiagnostics:
        """Gets the trace_route_diagnostics of this DeviceInfo.


        :return: The trace_route_diagnostics of this DeviceInfo.
        :rtype: TraceRouteDiagnostics
        """
        return self._trace_route_diagnostics

    @trace_route_diagnostics.setter
    def trace_route_diagnostics(self, trace_route_diagnostics: TraceRouteDiagnostics):
        """Sets the trace_route_diagnostics of this DeviceInfo.


        :param trace_route_diagnostics: The trace_route_diagnostics of this DeviceInfo.
        :type trace_route_diagnostics: TraceRouteDiagnostics
        """

        self._trace_route_diagnostics = trace_route_diagnostics

    @property
    def up_time(self) -> int:
        """Gets the up_time of this DeviceInfo.

        Time in seconds since the device was last restarted.  # noqa: E501

        :return: The up_time of this DeviceInfo.
        :rtype: int
        """
        return self._up_time

    @up_time.setter
    def up_time(self, up_time: int):
        """Sets the up_time of this DeviceInfo.

        Time in seconds since the device was last restarted.  # noqa: E501

        :param up_time: The up_time of this DeviceInfo.
        :type up_time: int
        """
        if up_time is None:
            raise ValueError("Invalid value for `up_time`, must not be `None`")  # noqa: E501

        self._up_time = up_time

    @property
    def upload_diagnostics(self) -> UploadDiagnostics:
        """Gets the upload_diagnostics of this DeviceInfo.


        :return: The upload_diagnostics of this DeviceInfo.
        :rtype: UploadDiagnostics
        """
        return self._upload_diagnostics

    @upload_diagnostics.setter
    def upload_diagnostics(self, upload_diagnostics: UploadDiagnostics):
        """Sets the upload_diagnostics of this DeviceInfo.


        :param upload_diagnostics: The upload_diagnostics of this DeviceInfo.
        :type upload_diagnostics: UploadDiagnostics
        """

        self._upload_diagnostics = upload_diagnostics
