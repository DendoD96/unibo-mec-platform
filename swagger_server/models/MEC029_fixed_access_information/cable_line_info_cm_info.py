# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.MEC029_fixed_access_information.cable_line_info_cm_info_cm_dpv_stats import CableLineInfoCmInfoCmDpvStats  # noqa: F401,E501
from swagger_server.models.MEC029_fixed_access_information.cable_line_info_cm_info_cm_status import CableLineInfoCmInfoCmStatus  # noqa: F401,E501
from swagger_server.models.MEC029_fixed_access_information.cable_line_info_cm_info_service_flow_stats import CableLineInfoCmInfoServiceFlowStats  # noqa: F401,E501
from swagger_server import util


class CableLineInfoCmInfo(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, cm_dpv_stats: List[CableLineInfoCmInfoCmDpvStats]=None, cm_id: str=None, cm_status: CableLineInfoCmInfoCmStatus=None, service_flow_stats: List[CableLineInfoCmInfoServiceFlowStats]=None):  # noqa: E501
        """CableLineInfoCmInfo - a model defined in Swagger

        :param cm_dpv_stats: The cm_dpv_stats of this CableLineInfoCmInfo.  # noqa: E501
        :type cm_dpv_stats: List[CableLineInfoCmInfoCmDpvStats]
        :param cm_id: The cm_id of this CableLineInfoCmInfo.  # noqa: E501
        :type cm_id: str
        :param cm_status: The cm_status of this CableLineInfoCmInfo.  # noqa: E501
        :type cm_status: CableLineInfoCmInfoCmStatus
        :param service_flow_stats: The service_flow_stats of this CableLineInfoCmInfo.  # noqa: E501
        :type service_flow_stats: List[CableLineInfoCmInfoServiceFlowStats]
        """
        self.swagger_types = {
            'cm_dpv_stats': List[CableLineInfoCmInfoCmDpvStats],
            'cm_id': str,
            'cm_status': CableLineInfoCmInfoCmStatus,
            'service_flow_stats': List[CableLineInfoCmInfoServiceFlowStats]
        }

        self.attribute_map = {
            'cm_dpv_stats': 'cmDpvStats',
            'cm_id': 'cmId',
            'cm_status': 'cmStatus',
            'service_flow_stats': 'serviceFlowStats'
        }
        self._cm_dpv_stats = cm_dpv_stats
        self._cm_id = cm_id
        self._cm_status = cm_status
        self._service_flow_stats = service_flow_stats

    @classmethod
    def from_dict(cls, dikt) -> 'CableLineInfoCmInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CableLineInfo.cmInfo of this CableLineInfoCmInfo.  # noqa: E501
        :rtype: CableLineInfoCmInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cm_dpv_stats(self) -> List[CableLineInfoCmInfoCmDpvStats]:
        """Gets the cm_dpv_stats of this CableLineInfoCmInfo.


        :return: The cm_dpv_stats of this CableLineInfoCmInfo.
        :rtype: List[CableLineInfoCmInfoCmDpvStats]
        """
        return self._cm_dpv_stats

    @cm_dpv_stats.setter
    def cm_dpv_stats(self, cm_dpv_stats: List[CableLineInfoCmInfoCmDpvStats]):
        """Sets the cm_dpv_stats of this CableLineInfoCmInfo.


        :param cm_dpv_stats: The cm_dpv_stats of this CableLineInfoCmInfo.
        :type cm_dpv_stats: List[CableLineInfoCmInfoCmDpvStats]
        """

        self._cm_dpv_stats = cm_dpv_stats

    @property
    def cm_id(self) -> str:
        """Gets the cm_id of this CableLineInfoCmInfo.

        Information (typically the serial number) to identify a Cable Modem at subscriber locations intended for use in conveying data communications on a cable data system.This value SHALL remain fixed over the lifetime of thedevice, including across firmware updates.  # noqa: E501

        :return: The cm_id of this CableLineInfoCmInfo.
        :rtype: str
        """
        return self._cm_id

    @cm_id.setter
    def cm_id(self, cm_id: str):
        """Sets the cm_id of this CableLineInfoCmInfo.

        Information (typically the serial number) to identify a Cable Modem at subscriber locations intended for use in conveying data communications on a cable data system.This value SHALL remain fixed over the lifetime of thedevice, including across firmware updates.  # noqa: E501

        :param cm_id: The cm_id of this CableLineInfoCmInfo.
        :type cm_id: str
        """
        if cm_id is None:
            raise ValueError("Invalid value for `cm_id`, must not be `None`")  # noqa: E501

        self._cm_id = cm_id

    @property
    def cm_status(self) -> CableLineInfoCmInfoCmStatus:
        """Gets the cm_status of this CableLineInfoCmInfo.


        :return: The cm_status of this CableLineInfoCmInfo.
        :rtype: CableLineInfoCmInfoCmStatus
        """
        return self._cm_status

    @cm_status.setter
    def cm_status(self, cm_status: CableLineInfoCmInfoCmStatus):
        """Sets the cm_status of this CableLineInfoCmInfo.


        :param cm_status: The cm_status of this CableLineInfoCmInfo.
        :type cm_status: CableLineInfoCmInfoCmStatus
        """

        self._cm_status = cm_status

    @property
    def service_flow_stats(self) -> List[CableLineInfoCmInfoServiceFlowStats]:
        """Gets the service_flow_stats of this CableLineInfoCmInfo.


        :return: The service_flow_stats of this CableLineInfoCmInfo.
        :rtype: List[CableLineInfoCmInfoServiceFlowStats]
        """
        return self._service_flow_stats

    @service_flow_stats.setter
    def service_flow_stats(self, service_flow_stats: List[CableLineInfoCmInfoServiceFlowStats]):
        """Sets the service_flow_stats of this CableLineInfoCmInfo.


        :param service_flow_stats: The service_flow_stats of this CableLineInfoCmInfo.
        :type service_flow_stats: List[CableLineInfoCmInfoServiceFlowStats]
        """

        self._service_flow_stats = service_flow_stats
