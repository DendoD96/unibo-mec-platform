# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.MEC029_fixed_access_information.fa_info_connectivity_info_interface_type import FaInfoConnectivityInfoInterfaceType  # noqa: F401,E501
from swagger_server.models.MEC029_fixed_access_information.fa_info_connectivity_info_last_mile_tech import FaInfoConnectivityInfoLastMileTech  # noqa: F401,E501
from swagger_server import util


class FaInfoConnectivityInfo(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, dsbw: int=None, interface_type: FaInfoConnectivityInfoInterfaceType=None, last_mile_tech: FaInfoConnectivityInfoLastMileTech=None, latency: int=None, usbw: int=None):  # noqa: E501
        """FaInfoConnectivityInfo - a model defined in Swagger

        :param dsbw: The dsbw of this FaInfoConnectivityInfo.  # noqa: E501
        :type dsbw: int
        :param interface_type: The interface_type of this FaInfoConnectivityInfo.  # noqa: E501
        :type interface_type: FaInfoConnectivityInfoInterfaceType
        :param last_mile_tech: The last_mile_tech of this FaInfoConnectivityInfo.  # noqa: E501
        :type last_mile_tech: FaInfoConnectivityInfoLastMileTech
        :param latency: The latency of this FaInfoConnectivityInfo.  # noqa: E501
        :type latency: int
        :param usbw: The usbw of this FaInfoConnectivityInfo.  # noqa: E501
        :type usbw: int
        """
        self.swagger_types = {
            'dsbw': int,
            'interface_type': FaInfoConnectivityInfoInterfaceType,
            'last_mile_tech': FaInfoConnectivityInfoLastMileTech,
            'latency': int,
            'usbw': int
        }

        self.attribute_map = {
            'dsbw': 'dsbw',
            'interface_type': 'interfaceType',
            'last_mile_tech': 'lastMileTech',
            'latency': 'latency',
            'usbw': 'usbw'
        }
        self._dsbw = dsbw
        self._interface_type = interface_type
        self._last_mile_tech = last_mile_tech
        self._latency = latency
        self._usbw = usbw

    @classmethod
    def from_dict(cls, dikt) -> 'FaInfoConnectivityInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FaInfo.connectivityInfo of this FaInfoConnectivityInfo.  # noqa: E501
        :rtype: FaInfoConnectivityInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dsbw(self) -> int:
        """Gets the dsbw of this FaInfoConnectivityInfo.

        The bandwidth (in Mbps) from the network towards the customer site.  # noqa: E501

        :return: The dsbw of this FaInfoConnectivityInfo.
        :rtype: int
        """
        return self._dsbw

    @dsbw.setter
    def dsbw(self, dsbw: int):
        """Sets the dsbw of this FaInfoConnectivityInfo.

        The bandwidth (in Mbps) from the network towards the customer site.  # noqa: E501

        :param dsbw: The dsbw of this FaInfoConnectivityInfo.
        :type dsbw: int
        """

        self._dsbw = dsbw

    @property
    def interface_type(self) -> FaInfoConnectivityInfoInterfaceType:
        """Gets the interface_type of this FaInfoConnectivityInfo.


        :return: The interface_type of this FaInfoConnectivityInfo.
        :rtype: FaInfoConnectivityInfoInterfaceType
        """
        return self._interface_type

    @interface_type.setter
    def interface_type(self, interface_type: FaInfoConnectivityInfoInterfaceType):
        """Sets the interface_type of this FaInfoConnectivityInfo.


        :param interface_type: The interface_type of this FaInfoConnectivityInfo.
        :type interface_type: FaInfoConnectivityInfoInterfaceType
        """
        if interface_type is None:
            raise ValueError("Invalid value for `interface_type`, must not be `None`")  # noqa: E501

        self._interface_type = interface_type

    @property
    def last_mile_tech(self) -> FaInfoConnectivityInfoLastMileTech:
        """Gets the last_mile_tech of this FaInfoConnectivityInfo.


        :return: The last_mile_tech of this FaInfoConnectivityInfo.
        :rtype: FaInfoConnectivityInfoLastMileTech
        """
        return self._last_mile_tech

    @last_mile_tech.setter
    def last_mile_tech(self, last_mile_tech: FaInfoConnectivityInfoLastMileTech):
        """Sets the last_mile_tech of this FaInfoConnectivityInfo.


        :param last_mile_tech: The last_mile_tech of this FaInfoConnectivityInfo.
        :type last_mile_tech: FaInfoConnectivityInfoLastMileTech
        """
        if last_mile_tech is None:
            raise ValueError("Invalid value for `last_mile_tech`, must not be `None`")  # noqa: E501

        self._last_mile_tech = last_mile_tech

    @property
    def latency(self) -> int:
        """Gets the latency of this FaInfoConnectivityInfo.

        Maximum baseline latency (in ms) between customer site and service edge node.  # noqa: E501

        :return: The latency of this FaInfoConnectivityInfo.
        :rtype: int
        """
        return self._latency

    @latency.setter
    def latency(self, latency: int):
        """Sets the latency of this FaInfoConnectivityInfo.

        Maximum baseline latency (in ms) between customer site and service edge node.  # noqa: E501

        :param latency: The latency of this FaInfoConnectivityInfo.
        :type latency: int
        """

        self._latency = latency

    @property
    def usbw(self) -> int:
        """Gets the usbw of this FaInfoConnectivityInfo.

        The bandwidth (in Mbps) from the customer site towards the network.  # noqa: E501

        :return: The usbw of this FaInfoConnectivityInfo.
        :rtype: int
        """
        return self._usbw

    @usbw.setter
    def usbw(self, usbw: int):
        """Sets the usbw of this FaInfoConnectivityInfo.

        The bandwidth (in Mbps) from the customer site towards the network.  # noqa: E501

        :param usbw: The usbw of this FaInfoConnectivityInfo.
        :type usbw: int
        """

        self._usbw = usbw
