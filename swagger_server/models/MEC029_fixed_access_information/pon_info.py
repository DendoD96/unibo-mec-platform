# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.MEC029_fixed_access_information.cp_info import CpInfo  # noqa: F401,E501
from swagger_server.models.MEC029_fixed_access_information.pon_info_optical_network_info import PonInfoOpticalNetworkInfo  # noqa: F401,E501
from swagger_server.models.MEC029_fixed_access_information.time_stamp import TimeStamp  # noqa: F401,E501
from swagger_server import util


class PonInfo(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, customer_premises_info: List[CpInfo]=None, optical_network_info: List[PonInfoOpticalNetworkInfo]=None, pon_sys_id: str=None, time_stamp: TimeStamp=None):  # noqa: E501
        """PonInfo - a model defined in Swagger

        :param customer_premises_info: The customer_premises_info of this PonInfo.  # noqa: E501
        :type customer_premises_info: List[CpInfo]
        :param optical_network_info: The optical_network_info of this PonInfo.  # noqa: E501
        :type optical_network_info: List[PonInfoOpticalNetworkInfo]
        :param pon_sys_id: The pon_sys_id of this PonInfo.  # noqa: E501
        :type pon_sys_id: str
        :param time_stamp: The time_stamp of this PonInfo.  # noqa: E501
        :type time_stamp: TimeStamp
        """
        self.swagger_types = {
            'customer_premises_info': List[CpInfo],
            'optical_network_info': List[PonInfoOpticalNetworkInfo],
            'pon_sys_id': str,
            'time_stamp': TimeStamp
        }

        self.attribute_map = {
            'customer_premises_info': 'customerPremisesInfo',
            'optical_network_info': 'opticalNetworkInfo',
            'pon_sys_id': 'ponSYS_ID',
            'time_stamp': 'timeStamp'
        }
        self._customer_premises_info = customer_premises_info
        self._optical_network_info = optical_network_info
        self._pon_sys_id = pon_sys_id
        self._time_stamp = time_stamp

    @classmethod
    def from_dict(cls, dikt) -> 'PonInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PonInfo of this PonInfo.  # noqa: E501
        :rtype: PonInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def customer_premises_info(self) -> List[CpInfo]:
        """Gets the customer_premises_info of this PonInfo.

        The physical location of a customer site.  # noqa: E501

        :return: The customer_premises_info of this PonInfo.
        :rtype: List[CpInfo]
        """
        return self._customer_premises_info

    @customer_premises_info.setter
    def customer_premises_info(self, customer_premises_info: List[CpInfo]):
        """Sets the customer_premises_info of this PonInfo.

        The physical location of a customer site.  # noqa: E501

        :param customer_premises_info: The customer_premises_info of this PonInfo.
        :type customer_premises_info: List[CpInfo]
        """
        if customer_premises_info is None:
            raise ValueError("Invalid value for `customer_premises_info`, must not be `None`")  # noqa: E501

        self._customer_premises_info = customer_premises_info

    @property
    def optical_network_info(self) -> List[PonInfoOpticalNetworkInfo]:
        """Gets the optical_network_info of this PonInfo.


        :return: The optical_network_info of this PonInfo.
        :rtype: List[PonInfoOpticalNetworkInfo]
        """
        return self._optical_network_info

    @optical_network_info.setter
    def optical_network_info(self, optical_network_info: List[PonInfoOpticalNetworkInfo]):
        """Sets the optical_network_info of this PonInfo.


        :param optical_network_info: The optical_network_info of this PonInfo.
        :type optical_network_info: List[PonInfoOpticalNetworkInfo]
        """
        if optical_network_info is None:
            raise ValueError("Invalid value for `optical_network_info`, must not be `None`")  # noqa: E501

        self._optical_network_info = optical_network_info

    @property
    def pon_sys_id(self) -> str:
        """Gets the pon_sys_id of this PonInfo.

        The 20-bit identity of the optical system within a certain domain.This is a reference value set by the OSS.  # noqa: E501

        :return: The pon_sys_id of this PonInfo.
        :rtype: str
        """
        return self._pon_sys_id

    @pon_sys_id.setter
    def pon_sys_id(self, pon_sys_id: str):
        """Sets the pon_sys_id of this PonInfo.

        The 20-bit identity of the optical system within a certain domain.This is a reference value set by the OSS.  # noqa: E501

        :param pon_sys_id: The pon_sys_id of this PonInfo.
        :type pon_sys_id: str
        """
        if pon_sys_id is None:
            raise ValueError("Invalid value for `pon_sys_id`, must not be `None`")  # noqa: E501

        self._pon_sys_id = pon_sys_id

    @property
    def time_stamp(self) -> TimeStamp:
        """Gets the time_stamp of this PonInfo.


        :return: The time_stamp of this PonInfo.
        :rtype: TimeStamp
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp: TimeStamp):
        """Sets the time_stamp of this PonInfo.


        :param time_stamp: The time_stamp of this PonInfo.
        :type time_stamp: TimeStamp
        """

        self._time_stamp = time_stamp
