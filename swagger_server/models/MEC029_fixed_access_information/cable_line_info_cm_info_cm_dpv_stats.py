# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.MEC029_fixed_access_information.time_stamp import TimeStamp  # noqa: F401,E501
from swagger_server import util


class CableLineInfoCmInfoCmDpvStats(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, avg_latency: int=None, if_index: str=None, last_meas_latency: int=None, last_meas_time: TimeStamp=None, max_latency: int=None, min_latency: int=None, num_meas: int=None):  # noqa: E501
        """CableLineInfoCmInfoCmDpvStats - a model defined in Swagger

        :param avg_latency: The avg_latency of this CableLineInfoCmInfoCmDpvStats.  # noqa: E501
        :type avg_latency: int
        :param if_index: The if_index of this CableLineInfoCmInfoCmDpvStats.  # noqa: E501
        :type if_index: str
        :param last_meas_latency: The last_meas_latency of this CableLineInfoCmInfoCmDpvStats.  # noqa: E501
        :type last_meas_latency: int
        :param last_meas_time: The last_meas_time of this CableLineInfoCmInfoCmDpvStats.  # noqa: E501
        :type last_meas_time: TimeStamp
        :param max_latency: The max_latency of this CableLineInfoCmInfoCmDpvStats.  # noqa: E501
        :type max_latency: int
        :param min_latency: The min_latency of this CableLineInfoCmInfoCmDpvStats.  # noqa: E501
        :type min_latency: int
        :param num_meas: The num_meas of this CableLineInfoCmInfoCmDpvStats.  # noqa: E501
        :type num_meas: int
        """
        self.swagger_types = {
            'avg_latency': int,
            'if_index': str,
            'last_meas_latency': int,
            'last_meas_time': TimeStamp,
            'max_latency': int,
            'min_latency': int,
            'num_meas': int
        }

        self.attribute_map = {
            'avg_latency': 'avgLatency',
            'if_index': 'ifIndex',
            'last_meas_latency': 'lastMeasLatency',
            'last_meas_time': 'lastMeasTime',
            'max_latency': 'maxLatency',
            'min_latency': 'minLatency',
            'num_meas': 'numMeas'
        }
        self._avg_latency = avg_latency
        self._if_index = if_index
        self._last_meas_latency = last_meas_latency
        self._last_meas_time = last_meas_time
        self._max_latency = max_latency
        self._min_latency = min_latency
        self._num_meas = num_meas

    @classmethod
    def from_dict(cls, dikt) -> 'CableLineInfoCmInfoCmDpvStats':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CableLineInfo.cmInfo.cmDpvStats of this CableLineInfoCmInfoCmDpvStats.  # noqa: E501
        :rtype: CableLineInfoCmInfoCmDpvStats
        """
        return util.deserialize_model(dikt, cls)

    @property
    def avg_latency(self) -> int:
        """Gets the avg_latency of this CableLineInfoCmInfoCmDpvStats.

        The average latency measurement.  # noqa: E501

        :return: The avg_latency of this CableLineInfoCmInfoCmDpvStats.
        :rtype: int
        """
        return self._avg_latency

    @avg_latency.setter
    def avg_latency(self, avg_latency: int):
        """Sets the avg_latency of this CableLineInfoCmInfoCmDpvStats.

        The average latency measurement.  # noqa: E501

        :param avg_latency: The avg_latency of this CableLineInfoCmInfoCmDpvStats.
        :type avg_latency: int
        """
        if avg_latency is None:
            raise ValueError("Invalid value for `avg_latency`, must not be `None`")  # noqa: E501

        self._avg_latency = avg_latency

    @property
    def if_index(self) -> str:
        """Gets the if_index of this CableLineInfoCmInfoCmDpvStats.

        It represents the interface Index of the Downstream Interface where the measurements are taken.  # noqa: E501

        :return: The if_index of this CableLineInfoCmInfoCmDpvStats.
        :rtype: str
        """
        return self._if_index

    @if_index.setter
    def if_index(self, if_index: str):
        """Sets the if_index of this CableLineInfoCmInfoCmDpvStats.

        It represents the interface Index of the Downstream Interface where the measurements are taken.  # noqa: E501

        :param if_index: The if_index of this CableLineInfoCmInfoCmDpvStats.
        :type if_index: str
        """
        if if_index is None:
            raise ValueError("Invalid value for `if_index`, must not be `None`")  # noqa: E501

        self._if_index = if_index

    @property
    def last_meas_latency(self) -> int:
        """Gets the last_meas_latency of this CableLineInfoCmInfoCmDpvStats.

        The last latency measurement.  # noqa: E501

        :return: The last_meas_latency of this CableLineInfoCmInfoCmDpvStats.
        :rtype: int
        """
        return self._last_meas_latency

    @last_meas_latency.setter
    def last_meas_latency(self, last_meas_latency: int):
        """Sets the last_meas_latency of this CableLineInfoCmInfoCmDpvStats.

        The last latency measurement.  # noqa: E501

        :param last_meas_latency: The last_meas_latency of this CableLineInfoCmInfoCmDpvStats.
        :type last_meas_latency: int
        """
        if last_meas_latency is None:
            raise ValueError("Invalid value for `last_meas_latency`, must not be `None`")  # noqa: E501

        self._last_meas_latency = last_meas_latency

    @property
    def last_meas_time(self) -> TimeStamp:
        """Gets the last_meas_time of this CableLineInfoCmInfoCmDpvStats.


        :return: The last_meas_time of this CableLineInfoCmInfoCmDpvStats.
        :rtype: TimeStamp
        """
        return self._last_meas_time

    @last_meas_time.setter
    def last_meas_time(self, last_meas_time: TimeStamp):
        """Sets the last_meas_time of this CableLineInfoCmInfoCmDpvStats.


        :param last_meas_time: The last_meas_time of this CableLineInfoCmInfoCmDpvStats.
        :type last_meas_time: TimeStamp
        """
        if last_meas_time is None:
            raise ValueError("Invalid value for `last_meas_time`, must not be `None`")  # noqa: E501

        self._last_meas_time = last_meas_time

    @property
    def max_latency(self) -> int:
        """Gets the max_latency of this CableLineInfoCmInfoCmDpvStats.

        The maximum latency measurement.  # noqa: E501

        :return: The max_latency of this CableLineInfoCmInfoCmDpvStats.
        :rtype: int
        """
        return self._max_latency

    @max_latency.setter
    def max_latency(self, max_latency: int):
        """Sets the max_latency of this CableLineInfoCmInfoCmDpvStats.

        The maximum latency measurement.  # noqa: E501

        :param max_latency: The max_latency of this CableLineInfoCmInfoCmDpvStats.
        :type max_latency: int
        """
        if max_latency is None:
            raise ValueError("Invalid value for `max_latency`, must not be `None`")  # noqa: E501

        self._max_latency = max_latency

    @property
    def min_latency(self) -> int:
        """Gets the min_latency of this CableLineInfoCmInfoCmDpvStats.

        The minimum latency measurement.  # noqa: E501

        :return: The min_latency of this CableLineInfoCmInfoCmDpvStats.
        :rtype: int
        """
        return self._min_latency

    @min_latency.setter
    def min_latency(self, min_latency: int):
        """Sets the min_latency of this CableLineInfoCmInfoCmDpvStats.

        The minimum latency measurement.  # noqa: E501

        :param min_latency: The min_latency of this CableLineInfoCmInfoCmDpvStats.
        :type min_latency: int
        """
        if min_latency is None:
            raise ValueError("Invalid value for `min_latency`, must not be `None`")  # noqa: E501

        self._min_latency = min_latency

    @property
    def num_meas(self) -> int:
        """Gets the num_meas of this CableLineInfoCmInfoCmDpvStats.

        The number of latency measurements made.  # noqa: E501

        :return: The num_meas of this CableLineInfoCmInfoCmDpvStats.
        :rtype: int
        """
        return self._num_meas

    @num_meas.setter
    def num_meas(self, num_meas: int):
        """Sets the num_meas of this CableLineInfoCmInfoCmDpvStats.

        The number of latency measurements made.  # noqa: E501

        :param num_meas: The num_meas of this CableLineInfoCmInfoCmDpvStats.
        :type num_meas: int
        """
        if num_meas is None:
            raise ValueError("Invalid value for `num_meas`, must not be `None`")  # noqa: E501

        self._num_meas = num_meas
