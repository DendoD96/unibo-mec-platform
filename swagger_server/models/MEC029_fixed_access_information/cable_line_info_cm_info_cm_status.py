# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.MEC029_fixed_access_information.cable_line_info_cm_info_cm_status_cm_reg_state import CableLineInfoCmInfoCmStatusCmRegState  # noqa: F401,E501
from swagger_server import util


class CableLineInfoCmInfoCmStatus(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, cm_reg_state: CableLineInfoCmInfoCmStatusCmRegState=None, em_dls_oper_status: bool=None, energy_mgt1x1_oper_status: bool=None, if_index: str=None, invalid_reg_rsps: int=None, lost_syncs: int=None, resets: int=None):  # noqa: E501
        """CableLineInfoCmInfoCmStatus - a model defined in Swagger

        :param cm_reg_state: The cm_reg_state of this CableLineInfoCmInfoCmStatus.  # noqa: E501
        :type cm_reg_state: CableLineInfoCmInfoCmStatusCmRegState
        :param em_dls_oper_status: The em_dls_oper_status of this CableLineInfoCmInfoCmStatus.  # noqa: E501
        :type em_dls_oper_status: bool
        :param energy_mgt1x1_oper_status: The energy_mgt1x1_oper_status of this CableLineInfoCmInfoCmStatus.  # noqa: E501
        :type energy_mgt1x1_oper_status: bool
        :param if_index: The if_index of this CableLineInfoCmInfoCmStatus.  # noqa: E501
        :type if_index: str
        :param invalid_reg_rsps: The invalid_reg_rsps of this CableLineInfoCmInfoCmStatus.  # noqa: E501
        :type invalid_reg_rsps: int
        :param lost_syncs: The lost_syncs of this CableLineInfoCmInfoCmStatus.  # noqa: E501
        :type lost_syncs: int
        :param resets: The resets of this CableLineInfoCmInfoCmStatus.  # noqa: E501
        :type resets: int
        """
        self.swagger_types = {
            'cm_reg_state': CableLineInfoCmInfoCmStatusCmRegState,
            'em_dls_oper_status': bool,
            'energy_mgt1x1_oper_status': bool,
            'if_index': str,
            'invalid_reg_rsps': int,
            'lost_syncs': int,
            'resets': int
        }

        self.attribute_map = {
            'cm_reg_state': 'cmRegState',
            'em_dls_oper_status': 'emDlsOperStatus',
            'energy_mgt1x1_oper_status': 'energyMgt1x1OperStatus',
            'if_index': 'ifIndex',
            'invalid_reg_rsps': 'invalidRegRsps',
            'lost_syncs': 'lostSyncs',
            'resets': 'resets'
        }
        self._cm_reg_state = cm_reg_state
        self._em_dls_oper_status = em_dls_oper_status
        self._energy_mgt1x1_oper_status = energy_mgt1x1_oper_status
        self._if_index = if_index
        self._invalid_reg_rsps = invalid_reg_rsps
        self._lost_syncs = lost_syncs
        self._resets = resets

    @classmethod
    def from_dict(cls, dikt) -> 'CableLineInfoCmInfoCmStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CableLineInfo.cmInfo.cmStatus of this CableLineInfoCmInfoCmStatus.  # noqa: E501
        :rtype: CableLineInfoCmInfoCmStatus
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cm_reg_state(self) -> CableLineInfoCmInfoCmStatusCmRegState:
        """Gets the cm_reg_state of this CableLineInfoCmInfoCmStatus.


        :return: The cm_reg_state of this CableLineInfoCmInfoCmStatus.
        :rtype: CableLineInfoCmInfoCmStatusCmRegState
        """
        return self._cm_reg_state

    @cm_reg_state.setter
    def cm_reg_state(self, cm_reg_state: CableLineInfoCmInfoCmStatusCmRegState):
        """Sets the cm_reg_state of this CableLineInfoCmInfoCmStatus.


        :param cm_reg_state: The cm_reg_state of this CableLineInfoCmInfoCmStatus.
        :type cm_reg_state: CableLineInfoCmInfoCmStatusCmRegState
        """
        if cm_reg_state is None:
            raise ValueError("Invalid value for `cm_reg_state`, must not be `None`")  # noqa: E501

        self._cm_reg_state = cm_reg_state

    @property
    def em_dls_oper_status(self) -> bool:
        """Gets the em_dls_oper_status of this CableLineInfoCmInfoCmStatus.

        It indicates whether the CM is currently operating in Energy Management DLS Mode.  # noqa: E501

        :return: The em_dls_oper_status of this CableLineInfoCmInfoCmStatus.
        :rtype: bool
        """
        return self._em_dls_oper_status

    @em_dls_oper_status.setter
    def em_dls_oper_status(self, em_dls_oper_status: bool):
        """Sets the em_dls_oper_status of this CableLineInfoCmInfoCmStatus.

        It indicates whether the CM is currently operating in Energy Management DLS Mode.  # noqa: E501

        :param em_dls_oper_status: The em_dls_oper_status of this CableLineInfoCmInfoCmStatus.
        :type em_dls_oper_status: bool
        """
        if em_dls_oper_status is None:
            raise ValueError("Invalid value for `em_dls_oper_status`, must not be `None`")  # noqa: E501

        self._em_dls_oper_status = em_dls_oper_status

    @property
    def energy_mgt1x1_oper_status(self) -> bool:
        """Gets the energy_mgt1x1_oper_status of this CableLineInfoCmInfoCmStatus.

        It indicates whether the CM is currently operating in Energy Management 1x1 Mode.  # noqa: E501

        :return: The energy_mgt1x1_oper_status of this CableLineInfoCmInfoCmStatus.
        :rtype: bool
        """
        return self._energy_mgt1x1_oper_status

    @energy_mgt1x1_oper_status.setter
    def energy_mgt1x1_oper_status(self, energy_mgt1x1_oper_status: bool):
        """Sets the energy_mgt1x1_oper_status of this CableLineInfoCmInfoCmStatus.

        It indicates whether the CM is currently operating in Energy Management 1x1 Mode.  # noqa: E501

        :param energy_mgt1x1_oper_status: The energy_mgt1x1_oper_status of this CableLineInfoCmInfoCmStatus.
        :type energy_mgt1x1_oper_status: bool
        """
        if energy_mgt1x1_oper_status is None:
            raise ValueError("Invalid value for `energy_mgt1x1_oper_status`, must not be `None`")  # noqa: E501

        self._energy_mgt1x1_oper_status = energy_mgt1x1_oper_status

    @property
    def if_index(self) -> str:
        """Gets the if_index of this CableLineInfoCmInfoCmStatus.

        It denotes the MAC Domain interface index of the CM.  # noqa: E501

        :return: The if_index of this CableLineInfoCmInfoCmStatus.
        :rtype: str
        """
        return self._if_index

    @if_index.setter
    def if_index(self, if_index: str):
        """Sets the if_index of this CableLineInfoCmInfoCmStatus.

        It denotes the MAC Domain interface index of the CM.  # noqa: E501

        :param if_index: The if_index of this CableLineInfoCmInfoCmStatus.
        :type if_index: str
        """
        if if_index is None:
            raise ValueError("Invalid value for `if_index`, must not be `None`")  # noqa: E501

        self._if_index = if_index

    @property
    def invalid_reg_rsps(self) -> int:
        """Gets the invalid_reg_rsps of this CableLineInfoCmInfoCmStatus.

        It denotes the number of times the CM received invalid registration response messages.  # noqa: E501

        :return: The invalid_reg_rsps of this CableLineInfoCmInfoCmStatus.
        :rtype: int
        """
        return self._invalid_reg_rsps

    @invalid_reg_rsps.setter
    def invalid_reg_rsps(self, invalid_reg_rsps: int):
        """Sets the invalid_reg_rsps of this CableLineInfoCmInfoCmStatus.

        It denotes the number of times the CM received invalid registration response messages.  # noqa: E501

        :param invalid_reg_rsps: The invalid_reg_rsps of this CableLineInfoCmInfoCmStatus.
        :type invalid_reg_rsps: int
        """
        if invalid_reg_rsps is None:
            raise ValueError("Invalid value for `invalid_reg_rsps`, must not be `None`")  # noqa: E501

        self._invalid_reg_rsps = invalid_reg_rsps

    @property
    def lost_syncs(self) -> int:
        """Gets the lost_syncs of this CableLineInfoCmInfoCmStatus.

        It denotes the number of times the CM lost synchronization with the downstream channel.  # noqa: E501

        :return: The lost_syncs of this CableLineInfoCmInfoCmStatus.
        :rtype: int
        """
        return self._lost_syncs

    @lost_syncs.setter
    def lost_syncs(self, lost_syncs: int):
        """Sets the lost_syncs of this CableLineInfoCmInfoCmStatus.

        It denotes the number of times the CM lost synchronization with the downstream channel.  # noqa: E501

        :param lost_syncs: The lost_syncs of this CableLineInfoCmInfoCmStatus.
        :type lost_syncs: int
        """
        if lost_syncs is None:
            raise ValueError("Invalid value for `lost_syncs`, must not be `None`")  # noqa: E501

        self._lost_syncs = lost_syncs

    @property
    def resets(self) -> int:
        """Gets the resets of this CableLineInfoCmInfoCmStatus.

        It denotes the number of times the CM reset or initialized this interface.  # noqa: E501

        :return: The resets of this CableLineInfoCmInfoCmStatus.
        :rtype: int
        """
        return self._resets

    @resets.setter
    def resets(self, resets: int):
        """Sets the resets of this CableLineInfoCmInfoCmStatus.

        It denotes the number of times the CM reset or initialized this interface.  # noqa: E501

        :param resets: The resets of this CableLineInfoCmInfoCmStatus.
        :type resets: int
        """
        if resets is None:
            raise ValueError("Invalid value for `resets`, must not be `None`")  # noqa: E501

        self._resets = resets
