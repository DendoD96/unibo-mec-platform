# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.MEC029_fixed_access_information.cm_conn_subscription_filter_criteria_cm_conn_cm_if_cm_reg_state import CmConnSubscriptionFilterCriteriaCmConnCmIfCmRegState  # noqa: F401,E501
from swagger_server import util


class CmConnSubscriptionFilterCriteriaCmConnCmIf(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, cm_id: str=None, cm_reg_state: List[CmConnSubscriptionFilterCriteriaCmConnCmIfCmRegState]=None, if_index: List[str]=None):  # noqa: E501
        """CmConnSubscriptionFilterCriteriaCmConnCmIf - a model defined in Swagger

        :param cm_id: The cm_id of this CmConnSubscriptionFilterCriteriaCmConnCmIf.  # noqa: E501
        :type cm_id: str
        :param cm_reg_state: The cm_reg_state of this CmConnSubscriptionFilterCriteriaCmConnCmIf.  # noqa: E501
        :type cm_reg_state: List[CmConnSubscriptionFilterCriteriaCmConnCmIfCmRegState]
        :param if_index: The if_index of this CmConnSubscriptionFilterCriteriaCmConnCmIf.  # noqa: E501
        :type if_index: List[str]
        """
        self.swagger_types = {
            'cm_id': str,
            'cm_reg_state': List[CmConnSubscriptionFilterCriteriaCmConnCmIfCmRegState],
            'if_index': List[str]
        }

        self.attribute_map = {
            'cm_id': 'cmId',
            'cm_reg_state': 'cmRegState',
            'if_index': 'ifIndex'
        }
        self._cm_id = cm_id
        self._cm_reg_state = cm_reg_state
        self._if_index = if_index

    @classmethod
    def from_dict(cls, dikt) -> 'CmConnSubscriptionFilterCriteriaCmConnCmIf':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CmConnSubscription.filterCriteriaCmConn.cmIf of this CmConnSubscriptionFilterCriteriaCmConnCmIf.  # noqa: E501
        :rtype: CmConnSubscriptionFilterCriteriaCmConnCmIf
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cm_id(self) -> str:
        """Gets the cm_id of this CmConnSubscriptionFilterCriteriaCmConnCmIf.

        The identifier of a Cable Modem at subscriber locations intended for use in conveying data communications on a cable data system.  # noqa: E501

        :return: The cm_id of this CmConnSubscriptionFilterCriteriaCmConnCmIf.
        :rtype: str
        """
        return self._cm_id

    @cm_id.setter
    def cm_id(self, cm_id: str):
        """Sets the cm_id of this CmConnSubscriptionFilterCriteriaCmConnCmIf.

        The identifier of a Cable Modem at subscriber locations intended for use in conveying data communications on a cable data system.  # noqa: E501

        :param cm_id: The cm_id of this CmConnSubscriptionFilterCriteriaCmConnCmIf.
        :type cm_id: str
        """
        if cm_id is None:
            raise ValueError("Invalid value for `cm_id`, must not be `None`")  # noqa: E501

        self._cm_id = cm_id

    @property
    def cm_reg_state(self) -> List[CmConnSubscriptionFilterCriteriaCmConnCmIfCmRegState]:
        """Gets the cm_reg_state of this CmConnSubscriptionFilterCriteriaCmConnCmIf.


        :return: The cm_reg_state of this CmConnSubscriptionFilterCriteriaCmConnCmIf.
        :rtype: List[CmConnSubscriptionFilterCriteriaCmConnCmIfCmRegState]
        """
        return self._cm_reg_state

    @cm_reg_state.setter
    def cm_reg_state(self, cm_reg_state: List[CmConnSubscriptionFilterCriteriaCmConnCmIfCmRegState]):
        """Sets the cm_reg_state of this CmConnSubscriptionFilterCriteriaCmConnCmIf.


        :param cm_reg_state: The cm_reg_state of this CmConnSubscriptionFilterCriteriaCmConnCmIf.
        :type cm_reg_state: List[CmConnSubscriptionFilterCriteriaCmConnCmIfCmRegState]
        """
        if cm_reg_state is None:
            raise ValueError("Invalid value for `cm_reg_state`, must not be `None`")  # noqa: E501

        self._cm_reg_state = cm_reg_state

    @property
    def if_index(self) -> List[str]:
        """Gets the if_index of this CmConnSubscriptionFilterCriteriaCmConnCmIf.

        The MAC Domain interface index of the CM.  # noqa: E501

        :return: The if_index of this CmConnSubscriptionFilterCriteriaCmConnCmIf.
        :rtype: List[str]
        """
        return self._if_index

    @if_index.setter
    def if_index(self, if_index: List[str]):
        """Sets the if_index of this CmConnSubscriptionFilterCriteriaCmConnCmIf.

        The MAC Domain interface index of the CM.  # noqa: E501

        :param if_index: The if_index of this CmConnSubscriptionFilterCriteriaCmConnCmIf.
        :type if_index: List[str]
        """
        if if_index is None:
            raise ValueError("Invalid value for `if_index`, must not be `None`")  # noqa: E501

        self._if_index = if_index
