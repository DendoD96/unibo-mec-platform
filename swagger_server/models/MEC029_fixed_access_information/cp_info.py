# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401 # pylint: disable=unused-import

from typing import List, Dict  # noqa: F401 # pylint: disable=unused-import

from swagger_server.models.base_model_ import Model
from swagger_server import util


class CpInfo(Model):
	"""NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

	def __init__(self, latitude: float = None, longitude: float = None, postal_code: str = None):  # noqa: E501
		"""CpInfo - a model defined in Swagger

        :param latitude: The latitude of this CpInfo.  # noqa: E501
        :type latitude: float
        :param longitude: The longitude of this CpInfo.  # noqa: E501
        :type longitude: float
        :param postal_code: The postal_code of this CpInfo.  # noqa: E501
        :type postal_code: str
        """
		self.swagger_types = {
			'latitude': float,
			'longitude': float,
			'postal_code': str
		}

		self.attribute_map = {
			'latitude': 'latitude',
			'longitude': 'longitude',
			'postal_code': 'postalCode'
		}
		self._latitude = latitude
		self._longitude = longitude
		self._postal_code = postal_code

	@classmethod
	def from_dict(cls, dikt) -> 'CpInfo':
		"""Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CpInfo of this CpInfo.  # noqa: E501
        :rtype: CpInfo
        """
		return util.deserialize_model(dikt, cls)

	@property
	def latitude(self) -> float:
		"""Gets the latitude of this CpInfo.

        Latitude (DATUM=WGS84) -90 to 90 in decimal degree format DDD.ddd  # noqa: E501

        :return: The latitude of this CpInfo.
        :rtype: float
        """
		return self._latitude

	@latitude.setter
	def latitude(self, latitude: float):
		"""Sets the latitude of this CpInfo.

        Latitude (DATUM=WGS84) -90 to 90 in decimal degree format DDD.ddd  # noqa: E501

        :param latitude: The latitude of this CpInfo.
        :type latitude: float
        """

		self._latitude = latitude

	@property
	def longitude(self) -> float:
		"""Gets the longitude of this CpInfo.

        Longitude (DATUM=WGS84) -180 to 180 in decimal degree format DDD.ddd  # noqa: E501

        :return: The longitude of this CpInfo.
        :rtype: float
        """
		return self._longitude

	@longitude.setter
	def longitude(self, longitude: float):
		"""Sets the longitude of this CpInfo.

        Longitude (DATUM=WGS84) -180 to 180 in decimal degree format DDD.ddd  # noqa: E501

        :param longitude: The longitude of this CpInfo.
        :type longitude: float
        """

		self._longitude = longitude

	@property
	def postal_code(self) -> str:
		"""Gets the postal_code of this CpInfo.

        Postal code for the location  # noqa: E501

        :return: The postal_code of this CpInfo.
        :rtype: str
        """
		return self._postal_code

	@postal_code.setter
	def postal_code(self, postal_code: str):
		"""Sets the postal_code of this CpInfo.

        Postal code for the location  # noqa: E501

        :param postal_code: The postal_code of this CpInfo.
        :type postal_code: str
        """

		self._postal_code = postal_code
