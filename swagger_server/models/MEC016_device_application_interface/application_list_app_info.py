# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.MEC016_device_application_interface.application_list_app_info_app_charcs import ApplicationListAppInfoAppCharcs  # noqa: F401,E501
from swagger_server.models.MEC016_device_application_interface.location_constraints import LocationConstraints  # noqa: F401,E501
from swagger_server import util


class ApplicationListAppInfo(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, app_charcs: ApplicationListAppInfoAppCharcs=None, app_d_id: str=None, app_d_version: str=None, app_description: str=None, app_location: List[LocationConstraints]=None, app_name: str=None, app_provider: str=None, app_soft_version: str=None):  # noqa: E501
        """ApplicationListAppInfo - a model defined in Swagger

        :param app_charcs: The app_charcs of this ApplicationListAppInfo.  # noqa: E501
        :type app_charcs: ApplicationListAppInfoAppCharcs
        :param app_d_id: The app_d_id of this ApplicationListAppInfo.  # noqa: E501
        :type app_d_id: str
        :param app_d_version: The app_d_version of this ApplicationListAppInfo.  # noqa: E501
        :type app_d_version: str
        :param app_description: The app_description of this ApplicationListAppInfo.  # noqa: E501
        :type app_description: str
        :param app_location: The app_location of this ApplicationListAppInfo.  # noqa: E501
        :type app_location: List[LocationConstraints]
        :param app_name: The app_name of this ApplicationListAppInfo.  # noqa: E501
        :type app_name: str
        :param app_provider: The app_provider of this ApplicationListAppInfo.  # noqa: E501
        :type app_provider: str
        :param app_soft_version: The app_soft_version of this ApplicationListAppInfo.  # noqa: E501
        :type app_soft_version: str
        """
        self.swagger_types = {
            'app_charcs': ApplicationListAppInfoAppCharcs,
            'app_d_id': str,
            'app_d_version': str,
            'app_description': str,
            'app_location': List[LocationConstraints],
            'app_name': str,
            'app_provider': str,
            'app_soft_version': str
        }

        self.attribute_map = {
            'app_charcs': 'appCharcs',
            'app_d_id': 'appDId',
            'app_d_version': 'appDVersion',
            'app_description': 'appDescription',
            'app_location': 'appLocation',
            'app_name': 'appName',
            'app_provider': 'appProvider',
            'app_soft_version': 'appSoftVersion'
        }
        self._app_charcs = app_charcs
        self._app_d_id = app_d_id
        self._app_d_version = app_d_version
        self._app_description = app_description
        self._app_location = app_location
        self._app_name = app_name
        self._app_provider = app_provider
        self._app_soft_version = app_soft_version

    @classmethod
    def from_dict(cls, dikt) -> 'ApplicationListAppInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ApplicationList_appInfo of this ApplicationListAppInfo.  # noqa: E501
        :rtype: ApplicationListAppInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_charcs(self) -> ApplicationListAppInfoAppCharcs:
        """Gets the app_charcs of this ApplicationListAppInfo.


        :return: The app_charcs of this ApplicationListAppInfo.
        :rtype: ApplicationListAppInfoAppCharcs
        """
        return self._app_charcs

    @app_charcs.setter
    def app_charcs(self, app_charcs: ApplicationListAppInfoAppCharcs):
        """Sets the app_charcs of this ApplicationListAppInfo.


        :param app_charcs: The app_charcs of this ApplicationListAppInfo.
        :type app_charcs: ApplicationListAppInfoAppCharcs
        """

        self._app_charcs = app_charcs

    @property
    def app_d_id(self) -> str:
        """Gets the app_d_id of this ApplicationListAppInfo.

        Identifier of this MEC application descriptor. It is equivalent to the appDId defined in clause 6.2.1.2 of ETSI GS MEC 0102 [1]. This attribute shall be globally unique.  # noqa: E501

        :return: The app_d_id of this ApplicationListAppInfo.
        :rtype: str
        """
        return self._app_d_id

    @app_d_id.setter
    def app_d_id(self, app_d_id: str):
        """Sets the app_d_id of this ApplicationListAppInfo.

        Identifier of this MEC application descriptor. It is equivalent to the appDId defined in clause 6.2.1.2 of ETSI GS MEC 0102 [1]. This attribute shall be globally unique.  # noqa: E501

        :param app_d_id: The app_d_id of this ApplicationListAppInfo.
        :type app_d_id: str
        """
        if app_d_id is None:
            raise ValueError("Invalid value for `app_d_id`, must not be `None`")  # noqa: E501

        self._app_d_id = app_d_id

    @property
    def app_d_version(self) -> str:
        """Gets the app_d_version of this ApplicationListAppInfo.

        Identifies the version of the application descriptor. It is equivalent to the appDVersion defined in clause 6.2.1.2 of ETSI GS MEC 0102 [1].  # noqa: E501

        :return: The app_d_version of this ApplicationListAppInfo.
        :rtype: str
        """
        return self._app_d_version

    @app_d_version.setter
    def app_d_version(self, app_d_version: str):
        """Sets the app_d_version of this ApplicationListAppInfo.

        Identifies the version of the application descriptor. It is equivalent to the appDVersion defined in clause 6.2.1.2 of ETSI GS MEC 0102 [1].  # noqa: E501

        :param app_d_version: The app_d_version of this ApplicationListAppInfo.
        :type app_d_version: str
        """
        if app_d_version is None:
            raise ValueError("Invalid value for `app_d_version`, must not be `None`")  # noqa: E501

        self._app_d_version = app_d_version

    @property
    def app_description(self) -> str:
        """Gets the app_description of this ApplicationListAppInfo.

        Human readable description of the MEC application (see note 2).  # noqa: E501

        :return: The app_description of this ApplicationListAppInfo.
        :rtype: str
        """
        return self._app_description

    @app_description.setter
    def app_description(self, app_description: str):
        """Sets the app_description of this ApplicationListAppInfo.

        Human readable description of the MEC application (see note 2).  # noqa: E501

        :param app_description: The app_description of this ApplicationListAppInfo.
        :type app_description: str
        """
        if app_description is None:
            raise ValueError("Invalid value for `app_description`, must not be `None`")  # noqa: E501

        self._app_description = app_description

    @property
    def app_location(self) -> List[LocationConstraints]:
        """Gets the app_location of this ApplicationListAppInfo.

        Identifies the locations of the MEC application.  # noqa: E501

        :return: The app_location of this ApplicationListAppInfo.
        :rtype: List[LocationConstraints]
        """
        return self._app_location

    @app_location.setter
    def app_location(self, app_location: List[LocationConstraints]):
        """Sets the app_location of this ApplicationListAppInfo.

        Identifies the locations of the MEC application.  # noqa: E501

        :param app_location: The app_location of this ApplicationListAppInfo.
        :type app_location: List[LocationConstraints]
        """

        self._app_location = app_location

    @property
    def app_name(self) -> str:
        """Gets the app_name of this ApplicationListAppInfo.

        Name of the MEC application. The length of the value shall not exceed 32 characters.  # noqa: E501

        :return: The app_name of this ApplicationListAppInfo.
        :rtype: str
        """
        return self._app_name

    @app_name.setter
    def app_name(self, app_name: str):
        """Sets the app_name of this ApplicationListAppInfo.

        Name of the MEC application. The length of the value shall not exceed 32 characters.  # noqa: E501

        :param app_name: The app_name of this ApplicationListAppInfo.
        :type app_name: str
        """
        if app_name is None:
            raise ValueError("Invalid value for `app_name`, must not be `None`")  # noqa: E501

        self._app_name = app_name

    @property
    def app_provider(self) -> str:
        """Gets the app_provider of this ApplicationListAppInfo.

        Provider of the MEC application. The length of the value shall not exceed 32 characters.  # noqa: E501

        :return: The app_provider of this ApplicationListAppInfo.
        :rtype: str
        """
        return self._app_provider

    @app_provider.setter
    def app_provider(self, app_provider: str):
        """Sets the app_provider of this ApplicationListAppInfo.

        Provider of the MEC application. The length of the value shall not exceed 32 characters.  # noqa: E501

        :param app_provider: The app_provider of this ApplicationListAppInfo.
        :type app_provider: str
        """
        if app_provider is None:
            raise ValueError("Invalid value for `app_provider`, must not be `None`")  # noqa: E501

        self._app_provider = app_provider

    @property
    def app_soft_version(self) -> str:
        """Gets the app_soft_version of this ApplicationListAppInfo.

        Software version of the MEC application. The length of the value shall not exceed 32 characters.  # noqa: E501

        :return: The app_soft_version of this ApplicationListAppInfo.
        :rtype: str
        """
        return self._app_soft_version

    @app_soft_version.setter
    def app_soft_version(self, app_soft_version: str):
        """Sets the app_soft_version of this ApplicationListAppInfo.

        Software version of the MEC application. The length of the value shall not exceed 32 characters.  # noqa: E501

        :param app_soft_version: The app_soft_version of this ApplicationListAppInfo.
        :type app_soft_version: str
        """
        if app_soft_version is None:
            raise ValueError("Invalid value for `app_soft_version`, must not be `None`")  # noqa: E501

        self._app_soft_version = app_soft_version
