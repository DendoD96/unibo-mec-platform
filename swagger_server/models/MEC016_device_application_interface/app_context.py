# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.MEC016_device_application_interface.app_context_app_info import AppContextAppInfo  # noqa: F401,E501
from swagger_server import util


class AppContext(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, app_auto_instantiation: bool=None, app_info: AppContextAppInfo=None, app_location_updates: bool=None, associate_dev_app_id: str=None, callback_reference: str=None, context_id: str=None):  # noqa: E501
        """AppContext - a model defined in Swagger

        :param app_auto_instantiation: The app_auto_instantiation of this AppContext.  # noqa: E501
        :type app_auto_instantiation: bool
        :param app_info: The app_info of this AppContext.  # noqa: E501
        :type app_info: AppContextAppInfo
        :param app_location_updates: The app_location_updates of this AppContext.  # noqa: E501
        :type app_location_updates: bool
        :param associate_dev_app_id: The associate_dev_app_id of this AppContext.  # noqa: E501
        :type associate_dev_app_id: str
        :param callback_reference: The callback_reference of this AppContext.  # noqa: E501
        :type callback_reference: str
        :param context_id: The context_id of this AppContext.  # noqa: E501
        :type context_id: str
        """
        self.swagger_types = {
            'app_auto_instantiation': bool,
            'app_info': AppContextAppInfo,
            'app_location_updates': bool,
            'associate_dev_app_id': str,
            'callback_reference': str,
            'context_id': str
        }

        self.attribute_map = {
            'app_auto_instantiation': 'appAutoInstantiation',
            'app_info': 'appInfo',
            'app_location_updates': 'appLocationUpdates',
            'associate_dev_app_id': 'associateDevAppId',
            'callback_reference': 'callbackReference',
            'context_id': 'contextId'
        }
        self._app_auto_instantiation = app_auto_instantiation
        self._app_info = app_info
        self._app_location_updates = app_location_updates
        self._associate_dev_app_id = associate_dev_app_id
        self._callback_reference = callback_reference
        self._context_id = context_id

    @classmethod
    def from_dict(cls, dikt) -> 'AppContext':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AppContext of this AppContext.  # noqa: E501
        :rtype: AppContext
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_auto_instantiation(self) -> bool:
        """Gets the app_auto_instantiation of this AppContext.

        Provides indication to the MEC system that instantiation of the requested application is desired should a requested appLocation become available that was not at the time of the request.  # noqa: E501

        :return: The app_auto_instantiation of this AppContext.
        :rtype: bool
        """
        return self._app_auto_instantiation

    @app_auto_instantiation.setter
    def app_auto_instantiation(self, app_auto_instantiation: bool):
        """Sets the app_auto_instantiation of this AppContext.

        Provides indication to the MEC system that instantiation of the requested application is desired should a requested appLocation become available that was not at the time of the request.  # noqa: E501

        :param app_auto_instantiation: The app_auto_instantiation of this AppContext.
        :type app_auto_instantiation: bool
        """

        self._app_auto_instantiation = app_auto_instantiation

    @property
    def app_info(self) -> AppContextAppInfo:
        """Gets the app_info of this AppContext.


        :return: The app_info of this AppContext.
        :rtype: AppContextAppInfo
        """
        return self._app_info

    @app_info.setter
    def app_info(self, app_info: AppContextAppInfo):
        """Sets the app_info of this AppContext.


        :param app_info: The app_info of this AppContext.
        :type app_info: AppContextAppInfo
        """
        if app_info is None:
            raise ValueError("Invalid value for `app_info`, must not be `None`")  # noqa: E501

        self._app_info = app_info

    @property
    def app_location_updates(self) -> bool:
        """Gets the app_location_updates of this AppContext.

        Used by the device application to request to receive notifications at the callbackReference URI relating to location availability for user application instantiation.  # noqa: E501

        :return: The app_location_updates of this AppContext.
        :rtype: bool
        """
        return self._app_location_updates

    @app_location_updates.setter
    def app_location_updates(self, app_location_updates: bool):
        """Sets the app_location_updates of this AppContext.

        Used by the device application to request to receive notifications at the callbackReference URI relating to location availability for user application instantiation.  # noqa: E501

        :param app_location_updates: The app_location_updates of this AppContext.
        :type app_location_updates: bool
        """

        self._app_location_updates = app_location_updates

    @property
    def associate_dev_app_id(self) -> str:
        """Gets the associate_dev_app_id of this AppContext.

        Uniquely identifies the device application. The length of the value shall not exceed 32 characters.  # noqa: E501

        :return: The associate_dev_app_id of this AppContext.
        :rtype: str
        """
        return self._associate_dev_app_id

    @associate_dev_app_id.setter
    def associate_dev_app_id(self, associate_dev_app_id: str):
        """Sets the associate_dev_app_id of this AppContext.

        Uniquely identifies the device application. The length of the value shall not exceed 32 characters.  # noqa: E501

        :param associate_dev_app_id: The associate_dev_app_id of this AppContext.
        :type associate_dev_app_id: str
        """
        if associate_dev_app_id is None:
            raise ValueError("Invalid value for `associate_dev_app_id`, must not be `None`")  # noqa: E501

        self._associate_dev_app_id = associate_dev_app_id

    @property
    def callback_reference(self) -> str:
        """Gets the callback_reference of this AppContext.

        URI assigned by the device application to receive application lifecycle related notifications. Inclusion in the request implies the client supports the pub/sub mechanism and is capable of receiving notifications. This endpoint shall be maintained for the lifetime of the application context.  # noqa: E501

        :return: The callback_reference of this AppContext.
        :rtype: str
        """
        return self._callback_reference

    @callback_reference.setter
    def callback_reference(self, callback_reference: str):
        """Sets the callback_reference of this AppContext.

        URI assigned by the device application to receive application lifecycle related notifications. Inclusion in the request implies the client supports the pub/sub mechanism and is capable of receiving notifications. This endpoint shall be maintained for the lifetime of the application context.  # noqa: E501

        :param callback_reference: The callback_reference of this AppContext.
        :type callback_reference: str
        """

        self._callback_reference = callback_reference

    @property
    def context_id(self) -> str:
        """Gets the context_id of this AppContext.

        Uniquely identifies the application context in the MEC system. Assigned by the MEC system and shall be present other than in a create request. The length of the value shall not exceed 32 characters.  # noqa: E501

        :return: The context_id of this AppContext.
        :rtype: str
        """
        return self._context_id

    @context_id.setter
    def context_id(self, context_id: str):
        """Sets the context_id of this AppContext.

        Uniquely identifies the application context in the MEC system. Assigned by the MEC system and shall be present other than in a create request. The length of the value shall not exceed 32 characters.  # noqa: E501

        :param context_id: The context_id of this AppContext.
        :type context_id: str
        """

        self._context_id = context_id
