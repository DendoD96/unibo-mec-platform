# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ApplicationListAppInfoAppCharcs(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, bandwidth: int=None, latency: int=None, memory: int=None, service_cont: int=None, storage: int=None):  # noqa: E501
        """ApplicationListAppInfoAppCharcs - a model defined in Swagger

        :param bandwidth: The bandwidth of this ApplicationListAppInfoAppCharcs.  # noqa: E501
        :type bandwidth: int
        :param latency: The latency of this ApplicationListAppInfoAppCharcs.  # noqa: E501
        :type latency: int
        :param memory: The memory of this ApplicationListAppInfoAppCharcs.  # noqa: E501
        :type memory: int
        :param service_cont: The service_cont of this ApplicationListAppInfoAppCharcs.  # noqa: E501
        :type service_cont: int
        :param storage: The storage of this ApplicationListAppInfoAppCharcs.  # noqa: E501
        :type storage: int
        """
        self.swagger_types = {
            'bandwidth': int,
            'latency': int,
            'memory': int,
            'service_cont': int,
            'storage': int
        }

        self.attribute_map = {
            'bandwidth': 'bandwidth',
            'latency': 'latency',
            'memory': 'memory',
            'service_cont': 'serviceCont',
            'storage': 'storage'
        }
        self._bandwidth = bandwidth
        self._latency = latency
        self._memory = memory
        self._service_cont = service_cont
        self._storage = storage

    @classmethod
    def from_dict(cls, dikt) -> 'ApplicationListAppInfoAppCharcs':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ApplicationList_appInfo_appCharcs of this ApplicationListAppInfoAppCharcs.  # noqa: E501
        :rtype: ApplicationListAppInfoAppCharcs
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bandwidth(self) -> int:
        """Gets the bandwidth of this ApplicationListAppInfoAppCharcs.

        The required connection bandwidth in kbit/s for the use of the MEC application instance.   # noqa: E501

        :return: The bandwidth of this ApplicationListAppInfoAppCharcs.
        :rtype: int
        """
        return self._bandwidth

    @bandwidth.setter
    def bandwidth(self, bandwidth: int):
        """Sets the bandwidth of this ApplicationListAppInfoAppCharcs.

        The required connection bandwidth in kbit/s for the use of the MEC application instance.   # noqa: E501

        :param bandwidth: The bandwidth of this ApplicationListAppInfoAppCharcs.
        :type bandwidth: int
        """

        self._bandwidth = bandwidth

    @property
    def latency(self) -> int:
        """Gets the latency of this ApplicationListAppInfoAppCharcs.

        The target round trip time in milliseconds supported by the MEC system for the MEC application instance.  # noqa: E501

        :return: The latency of this ApplicationListAppInfoAppCharcs.
        :rtype: int
        """
        return self._latency

    @latency.setter
    def latency(self, latency: int):
        """Sets the latency of this ApplicationListAppInfoAppCharcs.

        The target round trip time in milliseconds supported by the MEC system for the MEC application instance.  # noqa: E501

        :param latency: The latency of this ApplicationListAppInfoAppCharcs.
        :type latency: int
        """

        self._latency = latency

    @property
    def memory(self) -> int:
        """Gets the memory of this ApplicationListAppInfoAppCharcs.

        The maximum size in Mbytes of the memory resource expected to be used by the MEC application instance in the MEC system.  # noqa: E501

        :return: The memory of this ApplicationListAppInfoAppCharcs.
        :rtype: int
        """
        return self._memory

    @memory.setter
    def memory(self, memory: int):
        """Sets the memory of this ApplicationListAppInfoAppCharcs.

        The maximum size in Mbytes of the memory resource expected to be used by the MEC application instance in the MEC system.  # noqa: E501

        :param memory: The memory of this ApplicationListAppInfoAppCharcs.
        :type memory: int
        """

        self._memory = memory

    @property
    def service_cont(self) -> int:
        """Gets the service_cont of this ApplicationListAppInfoAppCharcs.

        Required service continuity mode for this application. Permitted values: 0 = SERVICE_CONTINUITY_NOT_REQUIRED. 1 = SERVICE_CONTINUITY_REQUIRED.  # noqa: E501

        :return: The service_cont of this ApplicationListAppInfoAppCharcs.
        :rtype: int
        """
        return self._service_cont

    @service_cont.setter
    def service_cont(self, service_cont: int):
        """Sets the service_cont of this ApplicationListAppInfoAppCharcs.

        Required service continuity mode for this application. Permitted values: 0 = SERVICE_CONTINUITY_NOT_REQUIRED. 1 = SERVICE_CONTINUITY_REQUIRED.  # noqa: E501

        :param service_cont: The service_cont of this ApplicationListAppInfoAppCharcs.
        :type service_cont: int
        """
        allowed_values = ["0", "1"]  # noqa: E501
        if service_cont not in allowed_values:
            raise ValueError(
                "Invalid value for `service_cont` ({0}), must be one of {1}"
                .format(service_cont, allowed_values)
            )

        self._service_cont = service_cont

    @property
    def storage(self) -> int:
        """Gets the storage of this ApplicationListAppInfoAppCharcs.

        The maximum size in Mbytes of the storage resource expected to be used by the MEC application instance in the MEC system.  # noqa: E501

        :return: The storage of this ApplicationListAppInfoAppCharcs.
        :rtype: int
        """
        return self._storage

    @storage.setter
    def storage(self, storage: int):
        """Sets the storage of this ApplicationListAppInfoAppCharcs.

        The maximum size in Mbytes of the storage resource expected to be used by the MEC application instance in the MEC system.  # noqa: E501

        :param storage: The storage of this ApplicationListAppInfoAppCharcs.
        :type storage: int
        """

        self._storage = storage
