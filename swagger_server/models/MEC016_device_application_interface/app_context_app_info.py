# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401 # pylint: disable=unused-import

from typing import List, Dict  # noqa: F401 # pylint: disable=unused-import

from swagger_server.models.base_model_ import Model
from swagger_server.models.MEC016_device_application_interface.app_context_app_info_user_app_instance_info import \
	AppContextAppInfoUserAppInstanceInfo  # noqa: F401 # pylint: disable=unused-import,E501
from swagger_server import util


class AppContextAppInfo(Model):
	"""NOTE: This class is auto generated by the swagger code generator program.

	Do not edit the class manually.
	"""

	def __init__(self, app_d_id: str = None, app_d_version: str = None, app_description: str = None,
	             app_name: str = None, app_provider: str = None, app_soft_version: str = None,
	             app_package_source: str = None,
	             user_app_instance_info: List[AppContextAppInfoUserAppInstanceInfo] = None):  # noqa: E501
		"""AppContextAppInfo - a model defined in Swagger

		:param app_d_id: The app_d_id of this AppContextAppInfo.  # noqa: E501
		:type app_d_id: str
		:param app_d_version: The app_d_version of this AppContextAppInfo.  # noqa: E501
		:type app_d_version: str
		:param app_description: The app_description of this AppContextAppInfo.  # noqa: E501
		:type app_description: str
		:param app_name: The app_name of this AppContextAppInfo.  # noqa: E501
		:type app_name: str
		:param app_provider: The app_provider of this AppContextAppInfo.  # noqa: E501
		:type app_provider: str
		:param app_soft_version: The app_soft_version of this AppContextAppInfo.  # noqa: E501
		:type app_soft_version: str
		:param app_package_source: The app_package_source of this AppContextAppInfo.  # noqa: E501
		:type app_package_source: str
		:param user_app_instance_info: The user_app_instance_info of this AppContextAppInfo.  # noqa: E501
		:type user_app_instance_info: List[AppContextAppInfoUserAppInstanceInfo]
		"""
		self.swagger_types = {
			'app_d_id': str,
			'app_d_version': str,
			'app_description': str,
			'app_name': str,
			'app_provider': str,
			'app_soft_version': str,
			'app_package_source': str,
			'user_app_instance_info': List[AppContextAppInfoUserAppInstanceInfo]
		}

		self.attribute_map = {
			'app_d_id': 'appDId',
			'app_d_version': 'appDVersion',
			'app_description': 'appDescription',
			'app_name': 'appName',
			'app_provider': 'appProvider',
			'app_soft_version': 'appSoftVersion',
			'app_package_source': 'appPackageSource',
			'user_app_instance_info': 'userAppInstanceInfo'
		}
		self._app_d_id = app_d_id
		self._app_d_version = app_d_version
		self._app_description = app_description
		self._app_name = app_name
		self._app_provider = app_provider
		self._app_soft_version = app_soft_version
		self._app_package_source = app_package_source
		self._user_app_instance_info = user_app_instance_info

	@classmethod
	def from_dict(cls, dikt) -> 'AppContextAppInfo':
		"""Returns the dict as a model

		:param dikt: A dict.
		:type: dict
		:return: The AppContext_appInfo of this AppContextAppInfo.  # noqa: E501
		:rtype: AppContextAppInfo
		"""
		return util.deserialize_model(dikt, cls)

	@property
	def app_d_id(self) -> str:
		"""Gets the app_d_id of this AppContextAppInfo.

		Identifier of this MEC application descriptor. This attribute shall be globally unique. It is equivalent to the appDId defined in clause 6.2.1.2 of ETSI GS MEC 0102 [1]. It shall be present if the application is one in the ApplicationList.  # noqa: E501

		:return: The app_d_id of this AppContextAppInfo.
		:rtype: str
		"""
		return self._app_d_id

	@app_d_id.setter
	def app_d_id(self, app_d_id: str):
		"""Sets the app_d_id of this AppContextAppInfo.

		Identifier of this MEC application descriptor. This attribute shall be globally unique. It is equivalent to the appDId defined in clause 6.2.1.2 of ETSI GS MEC 0102 [1]. It shall be present if the application is one in the ApplicationList.  # noqa: E501

		:param app_d_id: The app_d_id of this AppContextAppInfo.
		:type app_d_id: str
		"""

		self._app_d_id = app_d_id

	@property
	def app_d_version(self) -> str:
		"""Gets the app_d_version of this AppContextAppInfo.

		Identifies the version of the application descriptor. It is equivalent to the appDVersion defined in clause 6.2.1.2 of ETSI GS MEC 0102 [1].  # noqa: E501

		:return: The app_d_version of this AppContextAppInfo.
		:rtype: str
		"""
		return self._app_d_version

	@app_d_version.setter
	def app_d_version(self, app_d_version: str):
		"""Sets the app_d_version of this AppContextAppInfo.

		Identifies the version of the application descriptor. It is equivalent to the appDVersion defined in clause 6.2.1.2 of ETSI GS MEC 0102 [1].  # noqa: E501

		:param app_d_version: The app_d_version of this AppContextAppInfo.
		:type app_d_version: str
		"""
		if app_d_version is None:
			raise ValueError("Invalid value for `app_d_version`, must not be `None`")  # noqa: E501

		self._app_d_version = app_d_version

	@property
	def app_description(self) -> str:
		"""Gets the app_description of this AppContextAppInfo.

		Human readable description of the MEC application. The length of the value shall not exceed 128 characters.  # noqa: E501

		:return: The app_description of this AppContextAppInfo.
		:rtype: str
		"""
		return self._app_description

	@app_description.setter
	def app_description(self, app_description: str):
		"""Sets the app_description of this AppContextAppInfo.

		Human readable description of the MEC application. The length of the value shall not exceed 128 characters.  # noqa: E501

		:param app_description: The app_description of this AppContextAppInfo.
		:type app_description: str
		"""

		self._app_description = app_description

	@property
	def app_name(self) -> str:
		"""Gets the app_name of this AppContextAppInfo.

		Name of the MEC application. The length of the value shall not exceed 32 characters.  # noqa: E501

		:return: The app_name of this AppContextAppInfo.
		:rtype: str
		"""
		return self._app_name

	@app_name.setter
	def app_name(self, app_name: str):
		"""Sets the app_name of this AppContextAppInfo.

		Name of the MEC application. The length of the value shall not exceed 32 characters.  # noqa: E501

		:param app_name: The app_name of this AppContextAppInfo.
		:type app_name: str
		"""
		if app_name is None:
			raise ValueError("Invalid value for `app_name`, must not be `None`")  # noqa: E501

		self._app_name = app_name

	@property
	def app_provider(self) -> str:
		"""Gets the app_provider of this AppContextAppInfo.

		Provider of the MEC application. The length of the value shall not exceed 32 characters.  # noqa: E501

		:return: The app_provider of this AppContextAppInfo.
		:rtype: str
		"""
		return self._app_provider

	@app_provider.setter
	def app_provider(self, app_provider: str):
		"""Sets the app_provider of this AppContextAppInfo.

		Provider of the MEC application. The length of the value shall not exceed 32 characters.  # noqa: E501

		:param app_provider: The app_provider of this AppContextAppInfo.
		:type app_provider: str
		"""
		if app_provider is None:
			raise ValueError("Invalid value for `app_provider`, must not be `None`")  # noqa: E501

		self._app_provider = app_provider

	@property
	def app_soft_version(self) -> str:
		"""Gets the app_soft_version of this AppContextAppInfo.

		Software version of the MEC application. The length of the value shall not exceed 32 characters.  # noqa: E501

		:return: The app_soft_version of this AppContextAppInfo.
		:rtype: str
		"""
		return self._app_soft_version

	@app_soft_version.setter
	def app_soft_version(self, app_soft_version: str):
		"""Sets the app_soft_version of this AppContextAppInfo.

		Software version of the MEC application. The length of the value shall not exceed 32 characters.  # noqa: E501

		:param app_soft_version: The app_soft_version of this AppContextAppInfo.
		:type app_soft_version: str
		"""

		self._app_soft_version = app_soft_version

	@property
	def app_package_source(self) -> str:
		"""Gets the app_package_source of this AppContextAppInfo.

		URI of the application package. Included in the request if the application is not one in the ApplicationList. appPackageSource enables on-boarding of the application package into the MEC system. The application package shall comply with the definitions in clause 6.2.1.2 of ETSI GS MEC 0102 [1].  # noqa: E501

		:return: The app_package_source of this AppContextAppInfo.
		:rtype: str
		"""
		return self._app_package_source

	@app_package_source.setter
	def app_package_source(self, app_package_source: str):
		"""Sets the app_package_source of this AppContextAppInfo.

		URI of the application package. Included in the request if the application is not one in the ApplicationList. appPackageSource enables on-boarding of the application package into the MEC system. The application package shall comply with the definitions in clause 6.2.1.2 of ETSI GS MEC 0102 [1].  # noqa: E501

		:param app_package_source: The app_package_source of this AppContextAppInfo.
		:type app_package_source: str
		"""

		self._app_package_source = app_package_source

	@property
	def user_app_instance_info(self) -> List[AppContextAppInfoUserAppInstanceInfo]:
		"""Gets the user_app_instance_info of this AppContextAppInfo.

		List of user application instance information.  # noqa: E501

		:return: The user_app_instance_info of this AppContextAppInfo.
		:rtype: List[AppContextAppInfoUserAppInstanceInfo]
		"""
		return self._user_app_instance_info

	@user_app_instance_info.setter
	def user_app_instance_info(self, user_app_instance_info: List[AppContextAppInfoUserAppInstanceInfo]):
		"""Sets the user_app_instance_info of this AppContextAppInfo.

		List of user application instance information.  # noqa: E501

		:param user_app_instance_info: The user_app_instance_info of this AppContextAppInfo.
		:type user_app_instance_info: List[AppContextAppInfoUserAppInstanceInfo]
		"""
		if user_app_instance_info is None:
			raise ValueError("Invalid value for `user_app_instance_info`, must not be `None`")  # noqa: E501

		self._user_app_instance_info = user_app_instance_info
