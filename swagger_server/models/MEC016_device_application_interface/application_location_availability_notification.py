# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401 # pylint: disable=unused-import

from typing import List, Dict  # noqa: F401 # pylint: disable=unused-import

from swagger_server.models.base_model_ import Model
from swagger_server.models.MEC016_device_application_interface.application_location_availability_app_info_available_locations import \
	ApplicationLocationAvailabilityAppInfoAvailableLocations  # noqa: F401 # pylint: disable=unused-import,E501
from swagger_server import util


class ApplicationLocationAvailabilityNotification(Model):
	"""NOTE: This class is auto generated by the swagger code generator program.

	Do not edit the class manually.
	"""

	def __init__(self, available_locations: List[ApplicationLocationAvailabilityAppInfoAvailableLocations] = None,
	             context_id: str = None, notification_type: str = None):  # noqa: E501
		"""ApplicationLocationAvailabilityNotification - a model defined in Swagger

		:param available_locations: The available_locations of this ApplicationLocationAvailabilityNotification.  # noqa: E501
		:type available_locations: List[ApplicationLocationAvailabilityAppInfoAvailableLocations]
		:param context_id: The context_id of this ApplicationLocationAvailabilityNotification.  # noqa: E501
		:type context_id: str
		:param notification_type: The notification_type of this ApplicationLocationAvailabilityNotification.  # noqa: E501
		:type notification_type: str
		"""
		self.swagger_types = {
			'available_locations': List[ApplicationLocationAvailabilityAppInfoAvailableLocations],
			'context_id': str,
			'notification_type': str
		}

		self.attribute_map = {
			'available_locations': 'availableLocations',
			'context_id': 'contextId',
			'notification_type': 'notificationType'
		}
		self._available_locations = available_locations
		self._context_id = context_id
		self._notification_type = notification_type

	@classmethod
	def from_dict(cls, dikt) -> 'ApplicationLocationAvailabilityNotification':
		"""Returns the dict as a model

		:param dikt: A dict.
		:type: dict
		:return: The ApplicationLocationAvailabilityNotification of this ApplicationLocationAvailabilityNotification.  # noqa: E501
		:rtype: ApplicationLocationAvailabilityNotification
		"""
		return util.deserialize_model(dikt, cls)

	@property
	def available_locations(self) -> List[ApplicationLocationAvailabilityAppInfoAvailableLocations]:
		"""Gets the available_locations of this ApplicationLocationAvailabilityNotification.

		Locations available to the MEC application.  # noqa: E501

		:return: The available_locations of this ApplicationLocationAvailabilityNotification.
		:rtype: List[ApplicationLocationAvailabilityAppInfoAvailableLocations]
		"""
		return self._available_locations

	@available_locations.setter
	def available_locations(self, available_locations: List[ApplicationLocationAvailabilityAppInfoAvailableLocations]):
		"""Sets the available_locations of this ApplicationLocationAvailabilityNotification.

		Locations available to the MEC application.  # noqa: E501

		:param available_locations: The available_locations of this ApplicationLocationAvailabilityNotification.
		:type available_locations: List[ApplicationLocationAvailabilityAppInfoAvailableLocations]
		"""
		if available_locations is None:
			raise ValueError("Invalid value for `available_locations`, must not be `None`")  # noqa: E501

		self._available_locations = available_locations

	@property
	def context_id(self) -> str:
		"""Gets the context_id of this ApplicationLocationAvailabilityNotification.

		Uniquely identifies the application context in the MEC system.  # noqa: E501

		:return: The context_id of this ApplicationLocationAvailabilityNotification.
		:rtype: str
		"""
		return self._context_id

	@context_id.setter
	def context_id(self, context_id: str):
		"""Sets the context_id of this ApplicationLocationAvailabilityNotification.

		Uniquely identifies the application context in the MEC system.  # noqa: E501

		:param context_id: The context_id of this ApplicationLocationAvailabilityNotification.
		:type context_id: str
		"""

		self._context_id = context_id

	@property
	def notification_type(self) -> str:
		"""Gets the notification_type of this ApplicationLocationAvailabilityNotification.

		Shall be set to \"ApplicationLocationAvailabilityNotification\".  # noqa: E501

		:return: The notification_type of this ApplicationLocationAvailabilityNotification.
		:rtype: str
		"""
		return self._notification_type

	@notification_type.setter
	def notification_type(self, notification_type: str):
		"""Sets the notification_type of this ApplicationLocationAvailabilityNotification.

		Shall be set to \"ApplicationLocationAvailabilityNotification\".  # noqa: E501

		:param notification_type: The notification_type of this ApplicationLocationAvailabilityNotification.
		:type notification_type: str
		"""
		if notification_type is None:
			raise ValueError("Invalid value for `notification_type`, must not be `None`")  # noqa: E501

		self._notification_type = notification_type
