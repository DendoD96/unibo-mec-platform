# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401 # pylint: disable=unused-import

from typing import List, Dict  # noqa: F401 # pylint: disable=unused-import

from swagger_server.models.base_model_ import Model
from swagger_server import util


class AddressChangeNotification(Model):
	"""NOTE: This class is auto generated by the swagger code generator program.

	Do not edit the class manually.
	"""

	def __init__(self, app_instance_id: str = None, context_id: str = None, notification_type: str = None,
	             reference_uri: str = None):  # noqa: E501
		"""AddressChangeNotification - a model defined in Swagger

		:param app_instance_id: The app_instance_id of this AddressChangeNotification.  # noqa: E501
		:type app_instance_id: str
		:param context_id: The context_id of this AddressChangeNotification.  # noqa: E501
		:type context_id: str
		:param notification_type: The notification_type of this AddressChangeNotification.  # noqa: E501
		:type notification_type: str
		:param reference_uri: The reference_uri of this AddressChangeNotification.  # noqa: E501
		:type reference_uri: str
		"""
		self.swagger_types = {
			'app_instance_id': str,
			'context_id': str,
			'notification_type': str,
			'reference_uri': str
		}

		self.attribute_map = {
			'app_instance_id': 'appInstanceId',
			'context_id': 'contextId',
			'notification_type': 'notificationType',
			'reference_uri': 'referenceURI'
		}
		self._app_instance_id = app_instance_id
		self._context_id = context_id
		self._notification_type = notification_type
		self._reference_uri = reference_uri

	@classmethod
	def from_dict(cls, dikt) -> 'AddressChangeNotification':
		"""Returns the dict as a model

		:param dikt: A dict.
		:type: dict
		:return: The AddressChangeNotification of this AddressChangeNotification.  # noqa: E501
		:rtype: AddressChangeNotification
		"""
		return util.deserialize_model(dikt, cls)

	@property
	def app_instance_id(self) -> str:
		"""Gets the app_instance_id of this AddressChangeNotification.

		Identifier of the user application instance.  # noqa: E501

		:return: The app_instance_id of this AddressChangeNotification.
		:rtype: str
		"""
		return self._app_instance_id

	@app_instance_id.setter
	def app_instance_id(self, app_instance_id: str):
		"""Sets the app_instance_id of this AddressChangeNotification.

		Identifier of the user application instance.  # noqa: E501

		:param app_instance_id: The app_instance_id of this AddressChangeNotification.
		:type app_instance_id: str
		"""
		if app_instance_id is None:
			raise ValueError("Invalid value for `app_instance_id`, must not be `None`")  # noqa: E501

		self._app_instance_id = app_instance_id

	@property
	def context_id(self) -> str:
		"""Gets the context_id of this AddressChangeNotification.

		Uniquely identifies the application context in the MEC system.  # noqa: E501

		:return: The context_id of this AddressChangeNotification.
		:rtype: str
		"""
		return self._context_id

	@context_id.setter
	def context_id(self, context_id: str):
		"""Sets the context_id of this AddressChangeNotification.

		Uniquely identifies the application context in the MEC system.  # noqa: E501

		:param context_id: The context_id of this AddressChangeNotification.
		:type context_id: str
		"""
		if context_id is None:
			raise ValueError("Invalid value for `context_id`, must not be `None`")  # noqa: E501

		self._context_id = context_id

	@property
	def notification_type(self) -> str:
		"""Gets the notification_type of this AddressChangeNotification.

		Shall be set to \"AddressChangeNotification\".  # noqa: E501

		:return: The notification_type of this AddressChangeNotification.
		:rtype: str
		"""
		return self._notification_type

	@notification_type.setter
	def notification_type(self, notification_type: str):
		"""Sets the notification_type of this AddressChangeNotification.

		Shall be set to \"AddressChangeNotification\".  # noqa: E501

		:param notification_type: The notification_type of this AddressChangeNotification.
		:type notification_type: str
		"""
		if notification_type is None:
			raise ValueError("Invalid value for `notification_type`, must not be `None`")  # noqa: E501

		self._notification_type = notification_type

	@property
	def reference_uri(self) -> str:
		"""Gets the reference_uri of this AddressChangeNotification.

		Address of the user application. Used as the reference URI for the application. Assigned by the MEC system.  # noqa: E501

		:return: The reference_uri of this AddressChangeNotification.
		:rtype: str
		"""
		return self._reference_uri

	@reference_uri.setter
	def reference_uri(self, reference_uri: str):
		"""Sets the reference_uri of this AddressChangeNotification.

		Address of the user application. Used as the reference URI for the application. Assigned by the MEC system.  # noqa: E501

		:param reference_uri: The reference_uri of this AddressChangeNotification.
		:type reference_uri: str
		"""
		if reference_uri is None:
			raise ValueError("Invalid value for `reference_uri`, must not be `None`")  # noqa: E501

		self._reference_uri = reference_uri
