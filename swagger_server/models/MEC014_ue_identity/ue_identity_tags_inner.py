# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401 # pylint: disable=unused-import

from typing import List, Dict  # noqa: F401 # pylint: disable=unused-import

from swagger_server.models.base_model_ import Model
from swagger_server.models.MEC014_ue_identity.state import State  # noqa: F401 # pylint: disable=unused-import,E501
from swagger_server.models.MEC014_ue_identity.ue_identity_tag import \
	UeIdentityTag  # noqa: F401 # pylint: disable=unused-import,E501
from swagger_server import util


class UeIdentityTagsInner(Model):
	"""NOTE: This class is auto generated by the swagger code generator program.

	Do not edit the class manually.
	"""

	def __init__(self, ue_identity_tag: UeIdentityTag = None, state: State = None):  # noqa: E501
		"""UeIdentityTagsInner - a model defined in Swagger

		:param ue_identity_tag: The ue_identity_tag of this UeIdentityTagsInner.  # noqa: E501
		:type ue_identity_tag: UeIdentityTag
		:param state: The state of this UeIdentityTagsInner.  # noqa: E501
		:type state: State
		"""
		self.swagger_types = {
			'ue_identity_tag': UeIdentityTag,
			'state': State
		}

		self.attribute_map = {
			'ue_identity_tag': 'ueIdentityTag',
			'state': 'state'
		}
		self._ue_identity_tag = ue_identity_tag
		self._state = state

	@classmethod
	def from_dict(cls, dikt) -> 'UeIdentityTagsInner':
		"""Returns the dict as a model

		:param dikt: A dict.
		:type: dict
		:return: The UeIdentityTags_inner of this UeIdentityTagsInner.  # noqa: E501
		:rtype: UeIdentityTagsInner
		"""
		return util.deserialize_model(dikt, cls)

	@property
	def ue_identity_tag(self) -> UeIdentityTag:
		"""Gets the ue_identity_tag of this UeIdentityTagsInner.


		:return: The ue_identity_tag of this UeIdentityTagsInner.
		:rtype: UeIdentityTag
		"""
		return self._ue_identity_tag

	@ue_identity_tag.setter
	def ue_identity_tag(self, ue_identity_tag: UeIdentityTag):
		"""Sets the ue_identity_tag of this UeIdentityTagsInner.


		:param ue_identity_tag: The ue_identity_tag of this UeIdentityTagsInner.
		:type ue_identity_tag: UeIdentityTag
		"""
		if ue_identity_tag is None:
			raise ValueError("Invalid value for `ue_identity_tag`, must not be `None`")  # noqa: E501

		self._ue_identity_tag = ue_identity_tag

	@property
	def state(self) -> State:
		"""Gets the state of this UeIdentityTagsInner.


		:return: The state of this UeIdentityTagsInner.
		:rtype: State
		"""
		return self._state

	@state.setter
	def state(self, state: State):
		"""Sets the state of this UeIdentityTagsInner.


		:param state: The state of this UeIdentityTagsInner.
		:type state: State
		"""
		if state is None:
			raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

		self._state = state
