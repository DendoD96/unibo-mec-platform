# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.MEC012_radio_network_information.nr_cell_id import NrCellId  # noqa: F401,E501
from swagger_server.models.MEC012_radio_network_information.plmn import Plmn  # noqa: F401,E501
from swagger_server import util


class NRcgi(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, nrcell_id: NrCellId=None, plmn: Plmn=None):  # noqa: E501
        """NRcgi - a model defined in Swagger

        :param nrcell_id: The nrcell_id of this NRcgi.  # noqa: E501
        :type nrcell_id: NrCellId
        :param plmn: The plmn of this NRcgi.  # noqa: E501
        :type plmn: Plmn
        """
        self.swagger_types = {
            'nrcell_id': NrCellId,
            'plmn': Plmn
        }

        self.attribute_map = {
            'nrcell_id': 'nrcellId',
            'plmn': 'plmn'
        }
        self._nrcell_id = nrcell_id
        self._plmn = plmn

    @classmethod
    def from_dict(cls, dikt) -> 'NRcgi':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NRcgi of this NRcgi.  # noqa: E501
        :rtype: NRcgi
        """
        return util.deserialize_model(dikt, cls)

    @property
    def nrcell_id(self) -> NrCellId:
        """Gets the nrcell_id of this NRcgi.


        :return: The nrcell_id of this NRcgi.
        :rtype: NrCellId
        """
        return self._nrcell_id

    @nrcell_id.setter
    def nrcell_id(self, nrcell_id: NrCellId):
        """Sets the nrcell_id of this NRcgi.


        :param nrcell_id: The nrcell_id of this NRcgi.
        :type nrcell_id: NrCellId
        """
        if nrcell_id is None:
            raise ValueError("Invalid value for `nrcell_id`, must not be `None`")  # noqa: E501

        self._nrcell_id = nrcell_id

    @property
    def plmn(self) -> Plmn:
        """Gets the plmn of this NRcgi.


        :return: The plmn of this NRcgi.
        :rtype: Plmn
        """
        return self._plmn

    @plmn.setter
    def plmn(self, plmn: Plmn):
        """Sets the plmn of this NRcgi.


        :param plmn: The plmn of this NRcgi.
        :type plmn: Plmn
        """
        if plmn is None:
            raise ValueError("Invalid value for `plmn`, must not be `None`")  # noqa: E501

        self._plmn = plmn
