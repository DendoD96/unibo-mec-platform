# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401 # pylint: disable=unused-import

from typing import List, Dict  # noqa: F401 # pylint: disable=unused-import

from swagger_server.models.base_model_ import Model
from swagger_server import util


class AssociateId(Model):
	"""NOTE: This class is auto generated by the swagger code generator program.

	Do not edit the class manually.
	"""

	def __init__(self, type: int = None, value: str = None):  # noqa: E501 # pylint: disable=redefined-builtin
		"""AssociateId - a model defined in Swagger

		:param type: The type of this AssociateId.  # noqa: E501
		:type type: int
		:param value: The value of this AssociateId.  # noqa: E501
		:type value: str
		"""
		self.swagger_types = {
			'type': int,
			'value': str
		}

		self.attribute_map = {
			'type': 'type',
			'value': 'value'
		}
		self._type = type
		self._value = value

	@classmethod
	def from_dict(cls, dikt) -> 'AssociateId':
		"""Returns the dict as a model

		:param dikt: A dict.
		:type: dict
		:return: The AssociateId of this AssociateId.  # noqa: E501
		:rtype: AssociateId
		"""
		return util.deserialize_model(dikt, cls)

	@property
	def type(self) -> int:
		"""Gets the type of this AssociateId.

		Numeric value (0-255) corresponding to specified type of identifier as following: <p>0 = reserved. <p>1 = UE_IPv4_ADDRESS. <p>2 = UE_IPV6_ADDRESS. <p>3 = NATED_IP_ADDRESS. <p>4 = GTP_TEID.  # noqa: E501

		:return: The type of this AssociateId.
		:rtype: int
		"""
		return self._type

	@type.setter
	def type(self, type: int):  # pylint: disable=redefined-builtin
		"""Sets the type of this AssociateId.

		Numeric value (0-255) corresponding to specified type of identifier as following: <p>0 = reserved. <p>1 = UE_IPv4_ADDRESS. <p>2 = UE_IPV6_ADDRESS. <p>3 = NATED_IP_ADDRESS. <p>4 = GTP_TEID.  # noqa: E501

		:param type: The type of this AssociateId.
		:type type: int
		"""
		allowed_values = ["0", "1", "2", "3", "4"]  # noqa: E501
		if type not in allowed_values:
			raise ValueError(
				"Invalid value for `type` ({0}), must be one of {1}"
					.format(type, allowed_values)
			)

		self._type = type

	@property
	def value(self) -> str:
		"""Gets the value of this AssociateId.

		Value for the identifier.  # noqa: E501

		:return: The value of this AssociateId.
		:rtype: str
		"""
		return self._value

	@value.setter
	def value(self, value: str):
		"""Sets the value of this AssociateId.

		Value for the identifier.  # noqa: E501

		:param value: The value of this AssociateId.
		:type value: str
		"""

		self._value = value
