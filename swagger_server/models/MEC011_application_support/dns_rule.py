# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.MEC011_application_support.dns_rule_domain_name import DnsRuleDomainName  # noqa: F401,E501
from swagger_server.models.MEC011_application_support.dns_rule_id import DnsRuleId  # noqa: F401,E501
from swagger_server.models.MEC011_application_support.dns_rule_ip_address import DnsRuleIpAddress  # noqa: F401,E501
from swagger_server.models.MEC011_application_support.dns_rule_ip_address_type import DnsRuleIpAddressType  # noqa: F401,E501
from swagger_server.models.MEC011_application_support.dns_rule_state import DnsRuleState  # noqa: F401,E501
from swagger_server.models.MEC011_application_support.dns_rule_ttl import DnsRuleTtl  # noqa: F401,E501
from swagger_server import util


class DnsRule(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, dns_rule_id: DnsRuleId=None, domain_name: DnsRuleDomainName=None, ip_address_type: DnsRuleIpAddressType=None, ip_address: DnsRuleIpAddress=None, ttl: DnsRuleTtl=None, state: DnsRuleState=None):  # noqa: E501
        """DnsRule - a model defined in Swagger

        :param dns_rule_id: The dns_rule_id of this DnsRule.  # noqa: E501
        :type dns_rule_id: DnsRuleId
        :param domain_name: The domain_name of this DnsRule.  # noqa: E501
        :type domain_name: DnsRuleDomainName
        :param ip_address_type: The ip_address_type of this DnsRule.  # noqa: E501
        :type ip_address_type: DnsRuleIpAddressType
        :param ip_address: The ip_address of this DnsRule.  # noqa: E501
        :type ip_address: DnsRuleIpAddress
        :param ttl: The ttl of this DnsRule.  # noqa: E501
        :type ttl: DnsRuleTtl
        :param state: The state of this DnsRule.  # noqa: E501
        :type state: DnsRuleState
        """
        self.swagger_types = {
            'dns_rule_id': DnsRuleId,
            'domain_name': DnsRuleDomainName,
            'ip_address_type': DnsRuleIpAddressType,
            'ip_address': DnsRuleIpAddress,
            'ttl': DnsRuleTtl,
            'state': DnsRuleState
        }

        self.attribute_map = {
            'dns_rule_id': 'dnsRuleId',
            'domain_name': 'domainName',
            'ip_address_type': 'ipAddressType',
            'ip_address': 'ipAddress',
            'ttl': 'ttl',
            'state': 'state'
        }
        self._dns_rule_id = dns_rule_id
        self._domain_name = domain_name
        self._ip_address_type = ip_address_type
        self._ip_address = ip_address
        self._ttl = ttl
        self._state = state

    @classmethod
    def from_dict(cls, dikt) -> 'DnsRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DnsRule of this DnsRule.  # noqa: E501
        :rtype: DnsRule
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dns_rule_id(self) -> DnsRuleId:
        """Gets the dns_rule_id of this DnsRule.


        :return: The dns_rule_id of this DnsRule.
        :rtype: DnsRuleId
        """
        return self._dns_rule_id

    @dns_rule_id.setter
    def dns_rule_id(self, dns_rule_id: DnsRuleId):
        """Sets the dns_rule_id of this DnsRule.


        :param dns_rule_id: The dns_rule_id of this DnsRule.
        :type dns_rule_id: DnsRuleId
        """
        if dns_rule_id is None:
            raise ValueError("Invalid value for `dns_rule_id`, must not be `None`")  # noqa: E501

        self._dns_rule_id = dns_rule_id

    @property
    def domain_name(self) -> DnsRuleDomainName:
        """Gets the domain_name of this DnsRule.


        :return: The domain_name of this DnsRule.
        :rtype: DnsRuleDomainName
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name: DnsRuleDomainName):
        """Sets the domain_name of this DnsRule.


        :param domain_name: The domain_name of this DnsRule.
        :type domain_name: DnsRuleDomainName
        """
        if domain_name is None:
            raise ValueError("Invalid value for `domain_name`, must not be `None`")  # noqa: E501

        self._domain_name = domain_name

    @property
    def ip_address_type(self) -> DnsRuleIpAddressType:
        """Gets the ip_address_type of this DnsRule.


        :return: The ip_address_type of this DnsRule.
        :rtype: DnsRuleIpAddressType
        """
        return self._ip_address_type

    @ip_address_type.setter
    def ip_address_type(self, ip_address_type: DnsRuleIpAddressType):
        """Sets the ip_address_type of this DnsRule.


        :param ip_address_type: The ip_address_type of this DnsRule.
        :type ip_address_type: DnsRuleIpAddressType
        """
        if ip_address_type is None:
            raise ValueError("Invalid value for `ip_address_type`, must not be `None`")  # noqa: E501

        self._ip_address_type = ip_address_type

    @property
    def ip_address(self) -> DnsRuleIpAddress:
        """Gets the ip_address of this DnsRule.


        :return: The ip_address of this DnsRule.
        :rtype: DnsRuleIpAddress
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address: DnsRuleIpAddress):
        """Sets the ip_address of this DnsRule.


        :param ip_address: The ip_address of this DnsRule.
        :type ip_address: DnsRuleIpAddress
        """
        if ip_address is None:
            raise ValueError("Invalid value for `ip_address`, must not be `None`")  # noqa: E501

        self._ip_address = ip_address

    @property
    def ttl(self) -> DnsRuleTtl:
        """Gets the ttl of this DnsRule.


        :return: The ttl of this DnsRule.
        :rtype: DnsRuleTtl
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl: DnsRuleTtl):
        """Sets the ttl of this DnsRule.


        :param ttl: The ttl of this DnsRule.
        :type ttl: DnsRuleTtl
        """

        self._ttl = ttl

    @property
    def state(self) -> DnsRuleState:
        """Gets the state of this DnsRule.


        :return: The state of this DnsRule.
        :rtype: DnsRuleState
        """
        return self._state

    @state.setter
    def state(self, state: DnsRuleState):
        """Sets the state of this DnsRule.


        :param state: The state of this DnsRule.
        :type state: DnsRuleState
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state
