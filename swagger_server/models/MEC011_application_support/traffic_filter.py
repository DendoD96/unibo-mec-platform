# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401 # pylint: disable=unused-import

from typing import List, Dict  # noqa: F401 # pylint: disable=unused-import

from swagger_server.models.base_model_ import Model
from swagger_server.models.MEC011_application_support.traffic_filter_address import \
	TrafficFilterAddress  # noqa: F401 # pylint: disable=unused-import,E501
from swagger_server.models.MEC011_application_support.traffic_filter_dscp import \
	TrafficFilterDSCP  # noqa: F401 # pylint: disable=unused-import,E501
from swagger_server.models.MEC011_application_support.traffic_filter_port import \
	TrafficFilterPort  # noqa: F401 # pylint: disable=unused-import,E501
from swagger_server.models.MEC011_application_support.traffic_filter_protocol import \
	TrafficFilterProtocol  # noqa: F401 # pylint: disable=unused-import,E501
from swagger_server.models.MEC011_application_support.traffic_filter_qci import \
	TrafficFilterQCI  # noqa: F401 # pylint: disable=unused-import,E501
from swagger_server.models.MEC011_application_support.traffic_filter_tc import \
	TrafficFilterTC  # noqa: F401 # pylint: disable=unused-import,E501
from swagger_server.models.MEC011_application_support.traffic_filter_token import \
	TrafficFilterToken  # noqa: F401 # pylint: disable=unused-import,E501
from swagger_server.models.MEC011_application_support.traffic_filter_tunnel_address import \
	TrafficFilterTunnelAddress  # noqa: F401 # pylint: disable=unused-import,E501
from swagger_server.models.MEC011_application_support.traffic_filter_tunnel_port import \
	TrafficFilterTunnelPort  # noqa: F401 # pylint: disable=unused-import,E501
from swagger_server import util


class TrafficFilter(Model):
	"""NOTE: This class is auto generated by the swagger code generator program.

	Do not edit the class manually.
	"""

	def __init__(self, src_address: List[TrafficFilterAddress] = None, dst_address: List[TrafficFilterAddress] = None,
	             src_port: List[TrafficFilterPort] = None, dst_port: List[TrafficFilterPort] = None,
	             protocol: List[TrafficFilterProtocol] = None, token: List[TrafficFilterToken] = None,
	             src_tunnel_address: List[TrafficFilterTunnelAddress] = None,
	             tgt_tunnel_address: List[TrafficFilterTunnelAddress] = None,
	             src_tunnel_port: List[TrafficFilterTunnelPort] = None,
	             dst_tunnel_port: List[TrafficFilterTunnelPort] = None, q_ci: TrafficFilterQCI = None,
	             d_scp: TrafficFilterDSCP = None, t_c: TrafficFilterTC = None):  # noqa: E501
		"""TrafficFilter - a model defined in Swagger

		:param src_address: The src_address of this TrafficFilter.  # noqa: E501
		:type src_address: List[TrafficFilterAddress]
		:param dst_address: The dst_address of this TrafficFilter.  # noqa: E501
		:type dst_address: List[TrafficFilterAddress]
		:param src_port: The src_port of this TrafficFilter.  # noqa: E501
		:type src_port: List[TrafficFilterPort]
		:param dst_port: The dst_port of this TrafficFilter.  # noqa: E501
		:type dst_port: List[TrafficFilterPort]
		:param protocol: The protocol of this TrafficFilter.  # noqa: E501
		:type protocol: List[TrafficFilterProtocol]
		:param token: The token of this TrafficFilter.  # noqa: E501
		:type token: List[TrafficFilterToken]
		:param src_tunnel_address: The src_tunnel_address of this TrafficFilter.  # noqa: E501
		:type src_tunnel_address: List[TrafficFilterTunnelAddress]
		:param tgt_tunnel_address: The tgt_tunnel_address of this TrafficFilter.  # noqa: E501
		:type tgt_tunnel_address: List[TrafficFilterTunnelAddress]
		:param src_tunnel_port: The src_tunnel_port of this TrafficFilter.  # noqa: E501
		:type src_tunnel_port: List[TrafficFilterTunnelPort]
		:param dst_tunnel_port: The dst_tunnel_port of this TrafficFilter.  # noqa: E501
		:type dst_tunnel_port: List[TrafficFilterTunnelPort]
		:param q_ci: The q_ci of this TrafficFilter.  # noqa: E501
		:type q_ci: TrafficFilterQCI
		:param d_scp: The d_scp of this TrafficFilter.  # noqa: E501
		:type d_scp: TrafficFilterDSCP
		:param t_c: The t_c of this TrafficFilter.  # noqa: E501
		:type t_c: TrafficFilterTC
		"""
		self.swagger_types = {
			'src_address': List[TrafficFilterAddress],
			'dst_address': List[TrafficFilterAddress],
			'src_port': List[TrafficFilterPort],
			'dst_port': List[TrafficFilterPort],
			'protocol': List[TrafficFilterProtocol],
			'token': List[TrafficFilterToken],
			'src_tunnel_address': List[TrafficFilterTunnelAddress],
			'tgt_tunnel_address': List[TrafficFilterTunnelAddress],
			'src_tunnel_port': List[TrafficFilterTunnelPort],
			'dst_tunnel_port': List[TrafficFilterTunnelPort],
			'q_ci': TrafficFilterQCI,
			'd_scp': TrafficFilterDSCP,
			't_c': TrafficFilterTC
		}

		self.attribute_map = {
			'src_address': 'srcAddress',
			'dst_address': 'dstAddress',
			'src_port': 'srcPort',
			'dst_port': 'dstPort',
			'protocol': 'protocol',
			'token': 'token',
			'src_tunnel_address': 'srcTunnelAddress',
			'tgt_tunnel_address': 'tgtTunnelAddress',
			'src_tunnel_port': 'srcTunnelPort',
			'dst_tunnel_port': 'dstTunnelPort',
			'q_ci': 'qCI',
			'd_scp': 'dSCP',
			't_c': 'tC'
		}
		self._src_address = src_address
		self._dst_address = dst_address
		self._src_port = src_port
		self._dst_port = dst_port
		self._protocol = protocol
		self._token = token
		self._src_tunnel_address = src_tunnel_address
		self._tgt_tunnel_address = tgt_tunnel_address
		self._src_tunnel_port = src_tunnel_port
		self._dst_tunnel_port = dst_tunnel_port
		self._q_ci = q_ci
		self._d_scp = d_scp
		self._t_c = t_c

	@classmethod
	def from_dict(cls, dikt) -> 'TrafficFilter':
		"""Returns the dict as a model

		:param dikt: A dict.
		:type: dict
		:return: The TrafficFilter of this TrafficFilter.  # noqa: E501
		:rtype: TrafficFilter
		"""
		return util.deserialize_model(dikt, cls)

	@property
	def src_address(self) -> List[TrafficFilterAddress]:
		"""Gets the src_address of this TrafficFilter.

		An IP address or a range of IP address. For IPv4, the IP address could be an IP address plus mask, or an individual IP address, or a range of IP addresses. For IPv6, the IP address could be an IP prefix, or a range of IP prefixes.  # noqa: E501

		:return: The src_address of this TrafficFilter.
		:rtype: List[TrafficFilterAddress]
		"""
		return self._src_address

	@src_address.setter
	def src_address(self, src_address: List[TrafficFilterAddress]):
		"""Sets the src_address of this TrafficFilter.

		An IP address or a range of IP address. For IPv4, the IP address could be an IP address plus mask, or an individual IP address, or a range of IP addresses. For IPv6, the IP address could be an IP prefix, or a range of IP prefixes.  # noqa: E501

		:param src_address: The src_address of this TrafficFilter.
		:type src_address: List[TrafficFilterAddress]
		"""

		self._src_address = src_address

	@property
	def dst_address(self) -> List[TrafficFilterAddress]:
		"""Gets the dst_address of this TrafficFilter.

		An IP address or a range of IP address. For IPv4, the IP address could be an IP address plus mask, or an individual IP address, or a range of IP addresses. For IPv6, the IP address could be an IP prefix, or a range of IP prefixes.  # noqa: E501

		:return: The dst_address of this TrafficFilter.
		:rtype: List[TrafficFilterAddress]
		"""
		return self._dst_address

	@dst_address.setter
	def dst_address(self, dst_address: List[TrafficFilterAddress]):
		"""Sets the dst_address of this TrafficFilter.

		An IP address or a range of IP address. For IPv4, the IP address could be an IP address plus mask, or an individual IP address, or a range of IP addresses. For IPv6, the IP address could be an IP prefix, or a range of IP prefixes.  # noqa: E501

		:param dst_address: The dst_address of this TrafficFilter.
		:type dst_address: List[TrafficFilterAddress]
		"""

		self._dst_address = dst_address

	@property
	def src_port(self) -> List[TrafficFilterPort]:
		"""Gets the src_port of this TrafficFilter.

		A port or a range of ports  # noqa: E501

		:return: The src_port of this TrafficFilter.
		:rtype: List[TrafficFilterPort]
		"""
		return self._src_port

	@src_port.setter
	def src_port(self, src_port: List[TrafficFilterPort]):
		"""Sets the src_port of this TrafficFilter.

		A port or a range of ports  # noqa: E501

		:param src_port: The src_port of this TrafficFilter.
		:type src_port: List[TrafficFilterPort]
		"""

		self._src_port = src_port

	@property
	def dst_port(self) -> List[TrafficFilterPort]:
		"""Gets the dst_port of this TrafficFilter.

		A port or a range of ports  # noqa: E501

		:return: The dst_port of this TrafficFilter.
		:rtype: List[TrafficFilterPort]
		"""
		return self._dst_port

	@dst_port.setter
	def dst_port(self, dst_port: List[TrafficFilterPort]):
		"""Sets the dst_port of this TrafficFilter.

		A port or a range of ports  # noqa: E501

		:param dst_port: The dst_port of this TrafficFilter.
		:type dst_port: List[TrafficFilterPort]
		"""

		self._dst_port = dst_port

	@property
	def protocol(self) -> List[TrafficFilterProtocol]:
		"""Gets the protocol of this TrafficFilter.

		Specify the protocol of the traffic filter  # noqa: E501

		:return: The protocol of this TrafficFilter.
		:rtype: List[TrafficFilterProtocol]
		"""
		return self._protocol

	@protocol.setter
	def protocol(self, protocol: List[TrafficFilterProtocol]):
		"""Sets the protocol of this TrafficFilter.

		Specify the protocol of the traffic filter  # noqa: E501

		:param protocol: The protocol of this TrafficFilter.
		:type protocol: List[TrafficFilterProtocol]
		"""

		self._protocol = protocol

	@property
	def token(self) -> List[TrafficFilterToken]:
		"""Gets the token of this TrafficFilter.

		Used for token based traffic rule  # noqa: E501

		:return: The token of this TrafficFilter.
		:rtype: List[TrafficFilterToken]
		"""
		return self._token

	@token.setter
	def token(self, token: List[TrafficFilterToken]):
		"""Sets the token of this TrafficFilter.

		Used for token based traffic rule  # noqa: E501

		:param token: The token of this TrafficFilter.
		:type token: List[TrafficFilterToken]
		"""

		self._token = token

	@property
	def src_tunnel_address(self) -> List[TrafficFilterTunnelAddress]:
		"""Gets the src_tunnel_address of this TrafficFilter.

		Used for GTP tunnel based traffic rule  # noqa: E501

		:return: The src_tunnel_address of this TrafficFilter.
		:rtype: List[TrafficFilterTunnelAddress]
		"""
		return self._src_tunnel_address

	@src_tunnel_address.setter
	def src_tunnel_address(self, src_tunnel_address: List[TrafficFilterTunnelAddress]):
		"""Sets the src_tunnel_address of this TrafficFilter.

		Used for GTP tunnel based traffic rule  # noqa: E501

		:param src_tunnel_address: The src_tunnel_address of this TrafficFilter.
		:type src_tunnel_address: List[TrafficFilterTunnelAddress]
		"""

		self._src_tunnel_address = src_tunnel_address

	@property
	def tgt_tunnel_address(self) -> List[TrafficFilterTunnelAddress]:
		"""Gets the tgt_tunnel_address of this TrafficFilter.

		Used for GTP tunnel based traffic rule  # noqa: E501

		:return: The tgt_tunnel_address of this TrafficFilter.
		:rtype: List[TrafficFilterTunnelAddress]
		"""
		return self._tgt_tunnel_address

	@tgt_tunnel_address.setter
	def tgt_tunnel_address(self, tgt_tunnel_address: List[TrafficFilterTunnelAddress]):
		"""Sets the tgt_tunnel_address of this TrafficFilter.

		Used for GTP tunnel based traffic rule  # noqa: E501

		:param tgt_tunnel_address: The tgt_tunnel_address of this TrafficFilter.
		:type tgt_tunnel_address: List[TrafficFilterTunnelAddress]
		"""

		self._tgt_tunnel_address = tgt_tunnel_address

	@property
	def src_tunnel_port(self) -> List[TrafficFilterTunnelPort]:
		"""Gets the src_tunnel_port of this TrafficFilter.

		Used for GTP tunnel based traffic rule  # noqa: E501

		:return: The src_tunnel_port of this TrafficFilter.
		:rtype: List[TrafficFilterTunnelPort]
		"""
		return self._src_tunnel_port

	@src_tunnel_port.setter
	def src_tunnel_port(self, src_tunnel_port: List[TrafficFilterTunnelPort]):
		"""Sets the src_tunnel_port of this TrafficFilter.

		Used for GTP tunnel based traffic rule  # noqa: E501

		:param src_tunnel_port: The src_tunnel_port of this TrafficFilter.
		:type src_tunnel_port: List[TrafficFilterTunnelPort]
		"""

		self._src_tunnel_port = src_tunnel_port

	@property
	def dst_tunnel_port(self) -> List[TrafficFilterTunnelPort]:
		"""Gets the dst_tunnel_port of this TrafficFilter.

		Used for GTP tunnel based traffic rule  # noqa: E501

		:return: The dst_tunnel_port of this TrafficFilter.
		:rtype: List[TrafficFilterTunnelPort]
		"""
		return self._dst_tunnel_port

	@dst_tunnel_port.setter
	def dst_tunnel_port(self, dst_tunnel_port: List[TrafficFilterTunnelPort]):
		"""Sets the dst_tunnel_port of this TrafficFilter.

		Used for GTP tunnel based traffic rule  # noqa: E501

		:param dst_tunnel_port: The dst_tunnel_port of this TrafficFilter.
		:type dst_tunnel_port: List[TrafficFilterTunnelPort]
		"""

		self._dst_tunnel_port = dst_tunnel_port

	@property
	def q_ci(self) -> TrafficFilterQCI:
		"""Gets the q_ci of this TrafficFilter.


		:return: The q_ci of this TrafficFilter.
		:rtype: TrafficFilterQCI
		"""
		return self._q_ci

	@q_ci.setter
	def q_ci(self, q_ci: TrafficFilterQCI):
		"""Sets the q_ci of this TrafficFilter.


		:param q_ci: The q_ci of this TrafficFilter.
		:type q_ci: TrafficFilterQCI
		"""

		self._q_ci = q_ci

	@property
	def d_scp(self) -> TrafficFilterDSCP:
		"""Gets the d_scp of this TrafficFilter.


		:return: The d_scp of this TrafficFilter.
		:rtype: TrafficFilterDSCP
		"""
		return self._d_scp

	@d_scp.setter
	def d_scp(self, d_scp: TrafficFilterDSCP):
		"""Sets the d_scp of this TrafficFilter.


		:param d_scp: The d_scp of this TrafficFilter.
		:type d_scp: TrafficFilterDSCP
		"""

		self._d_scp = d_scp

	@property
	def t_c(self) -> TrafficFilterTC:
		"""Gets the t_c of this TrafficFilter.


		:return: The t_c of this TrafficFilter.
		:rtype: TrafficFilterTC
		"""
		return self._t_c

	@t_c.setter
	def t_c(self, t_c: TrafficFilterTC):
		"""Sets the t_c of this TrafficFilter.


		:param t_c: The t_c of this TrafficFilter.
		:type t_c: TrafficFilterTC
		"""

		self._t_c = t_c
