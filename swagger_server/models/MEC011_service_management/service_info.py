# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401 # pylint: disable=unused-import

from typing import List, Dict  # noqa: F401 # pylint: disable=unused-import

from swagger_server.models.base_model_ import Model
from swagger_server.models.MEC011_service_management.category_ref import \
	CategoryRef  # noqa: F401 # pylint: disable=unused-import,E501
from swagger_server.models.MEC011_service_management.locality_type import \
	LocalityType  # noqa: F401 # pylint: disable=unused-import,E501
from swagger_server.models.MEC011_service_management.serializer_type import \
	SerializerType  # noqa: F401 # pylint: disable=unused-import,E501
from swagger_server.models.MEC011_service_management.service_info_consumed_local_only import \
	ServiceInfoConsumedLocalOnly  # noqa: F401 # pylint: disable=unused-import,E501
from swagger_server.models.MEC011_service_management.service_info_is_local import \
	ServiceInfoIsLocal  # noqa: F401 # pylint: disable=unused-import,E501
from swagger_server.models.MEC011_service_management.service_info_ser_instance_id import \
	ServiceInfoSerInstanceId  # noqa: F401 # pylint: disable=unused-import,E501
from swagger_server.models.MEC011_service_management.service_info_ser_name import \
	ServiceInfoSerName  # noqa: F401 # pylint: disable=unused-import,E501
from swagger_server.models.MEC011_service_management.service_info_version import \
	ServiceInfoVersion  # noqa: F401 # pylint: disable=unused-import,E501
from swagger_server.models.MEC011_service_management.service_state import \
	ServiceState  # noqa: F401 # pylint: disable=unused-import,E501
from swagger_server.models.MEC011_service_management.transport_info import \
	TransportInfo  # noqa: F401 # pylint: disable=unused-import,E501
from swagger_server import util


class ServiceInfo(Model):
	"""NOTE: This class is auto generated by the swagger code generator program.

	Do not edit the class manually.
	"""

	def __init__(self, ser_instance_id: ServiceInfoSerInstanceId = None, ser_name: ServiceInfoSerName = None,
	             ser_category: CategoryRef = None, version: ServiceInfoVersion = None, state: ServiceState = None,
	             transport_info: TransportInfo = None, serializer: SerializerType = None,
	             scope_of_locality: LocalityType = None, consumed_local_only: ServiceInfoConsumedLocalOnly = None,
	             is_local: ServiceInfoIsLocal = None):  # noqa: E501
		"""ServiceInfo - a model defined in Swagger

		:param ser_instance_id: The ser_instance_id of this ServiceInfo.  # noqa: E501
		:type ser_instance_id: ServiceInfoSerInstanceId
		:param ser_name: The ser_name of this ServiceInfo.  # noqa: E501
		:type ser_name: ServiceInfoSerName
		:param ser_category: The ser_category of this ServiceInfo.  # noqa: E501
		:type ser_category: CategoryRef
		:param version: The version of this ServiceInfo.  # noqa: E501
		:type version: ServiceInfoVersion
		:param state: The state of this ServiceInfo.  # noqa: E501
		:type state: ServiceState
		:param transport_info: The transport_info of this ServiceInfo.  # noqa: E501
		:type transport_info: TransportInfo
		:param serializer: The serializer of this ServiceInfo.  # noqa: E501
		:type serializer: SerializerType
		:param scope_of_locality: The scope_of_locality of this ServiceInfo.  # noqa: E501
		:type scope_of_locality: LocalityType
		:param consumed_local_only: The consumed_local_only of this ServiceInfo.  # noqa: E501
		:type consumed_local_only: ServiceInfoConsumedLocalOnly
		:param is_local: The is_local of this ServiceInfo.  # noqa: E501
		:type is_local: ServiceInfoIsLocal
		"""
		self.swagger_types = {
			'ser_instance_id': ServiceInfoSerInstanceId,
			'ser_name': ServiceInfoSerName,
			'ser_category': CategoryRef,
			'version': ServiceInfoVersion,
			'state': ServiceState,
			'transport_info': TransportInfo,
			'serializer': SerializerType,
			'scope_of_locality': LocalityType,
			'consumed_local_only': ServiceInfoConsumedLocalOnly,
			'is_local': ServiceInfoIsLocal
		}

		self.attribute_map = {
			'ser_instance_id': 'serInstanceId',
			'ser_name': 'serName',
			'ser_category': 'serCategory',
			'version': 'version',
			'state': 'state',
			'transport_info': 'transportInfo',
			'serializer': 'serializer',
			'scope_of_locality': 'scopeOfLocality',
			'consumed_local_only': 'consumedLocalOnly',
			'is_local': 'isLocal'
		}
		self._ser_instance_id = ser_instance_id
		self._ser_name = ser_name
		self._ser_category = ser_category
		self._version = version
		self._state = state
		self._transport_info = transport_info
		self._serializer = serializer
		self._scope_of_locality = scope_of_locality
		self._consumed_local_only = consumed_local_only
		self._is_local = is_local

	@classmethod
	def from_dict(cls, dikt) -> 'ServiceInfo':
		"""Returns the dict as a model

		:param dikt: A dict.
		:type: dict
		:return: The ServiceInfo of this ServiceInfo.  # noqa: E501
		:rtype: ServiceInfo
		"""
		return util.deserialize_model(dikt, cls)

	@property
	def ser_instance_id(self) -> ServiceInfoSerInstanceId:
		"""Gets the ser_instance_id of this ServiceInfo.


		:return: The ser_instance_id of this ServiceInfo.
		:rtype: ServiceInfoSerInstanceId
		"""
		return self._ser_instance_id

	@ser_instance_id.setter
	def ser_instance_id(self, ser_instance_id: ServiceInfoSerInstanceId):
		"""Sets the ser_instance_id of this ServiceInfo.


		:param ser_instance_id: The ser_instance_id of this ServiceInfo.
		:type ser_instance_id: ServiceInfoSerInstanceId
		"""

		self._ser_instance_id = ser_instance_id

	@property
	def ser_name(self) -> ServiceInfoSerName:
		"""Gets the ser_name of this ServiceInfo.


		:return: The ser_name of this ServiceInfo.
		:rtype: ServiceInfoSerName
		"""
		return self._ser_name

	@ser_name.setter
	def ser_name(self, ser_name: ServiceInfoSerName):
		"""Sets the ser_name of this ServiceInfo.


		:param ser_name: The ser_name of this ServiceInfo.
		:type ser_name: ServiceInfoSerName
		"""
		if ser_name is None:
			raise ValueError("Invalid value for `ser_name`, must not be `None`")  # noqa: E501

		self._ser_name = ser_name

	@property
	def ser_category(self) -> CategoryRef:
		"""Gets the ser_category of this ServiceInfo.


		:return: The ser_category of this ServiceInfo.
		:rtype: CategoryRef
		"""
		return self._ser_category

	@ser_category.setter
	def ser_category(self, ser_category: CategoryRef):
		"""Sets the ser_category of this ServiceInfo.


		:param ser_category: The ser_category of this ServiceInfo.
		:type ser_category: CategoryRef
		"""

		self._ser_category = ser_category

	@property
	def version(self) -> ServiceInfoVersion:
		"""Gets the version of this ServiceInfo.


		:return: The version of this ServiceInfo.
		:rtype: ServiceInfoVersion
		"""
		return self._version

	@version.setter
	def version(self, version: ServiceInfoVersion):
		"""Sets the version of this ServiceInfo.


		:param version: The version of this ServiceInfo.
		:type version: ServiceInfoVersion
		"""
		if version is None:
			raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

		self._version = version

	@property
	def state(self) -> ServiceState:
		"""Gets the state of this ServiceInfo.


		:return: The state of this ServiceInfo.
		:rtype: ServiceState
		"""
		return self._state

	@state.setter
	def state(self, state: ServiceState):
		"""Sets the state of this ServiceInfo.


		:param state: The state of this ServiceInfo.
		:type state: ServiceState
		"""
		if state is None:
			raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

		self._state = state

	@property
	def transport_info(self) -> TransportInfo:
		"""Gets the transport_info of this ServiceInfo.


		:return: The transport_info of this ServiceInfo.
		:rtype: TransportInfo
		"""
		return self._transport_info

	@transport_info.setter
	def transport_info(self, transport_info: TransportInfo):
		"""Sets the transport_info of this ServiceInfo.


		:param transport_info: The transport_info of this ServiceInfo.
		:type transport_info: TransportInfo
		"""
		if transport_info is None:
			raise ValueError("Invalid value for `transport_info`, must not be `None`")  # noqa: E501

		self._transport_info = transport_info

	@property
	def serializer(self) -> SerializerType:
		"""Gets the serializer of this ServiceInfo.


		:return: The serializer of this ServiceInfo.
		:rtype: SerializerType
		"""
		return self._serializer

	@serializer.setter
	def serializer(self, serializer: SerializerType):
		"""Sets the serializer of this ServiceInfo.


		:param serializer: The serializer of this ServiceInfo.
		:type serializer: SerializerType
		"""
		if serializer is None:
			raise ValueError("Invalid value for `serializer`, must not be `None`")  # noqa: E501

		self._serializer = serializer

	@property
	def scope_of_locality(self) -> LocalityType:
		"""Gets the scope_of_locality of this ServiceInfo.


		:return: The scope_of_locality of this ServiceInfo.
		:rtype: LocalityType
		"""
		return self._scope_of_locality

	@scope_of_locality.setter
	def scope_of_locality(self, scope_of_locality: LocalityType):
		"""Sets the scope_of_locality of this ServiceInfo.


		:param scope_of_locality: The scope_of_locality of this ServiceInfo.
		:type scope_of_locality: LocalityType
		"""

		self._scope_of_locality = scope_of_locality

	@property
	def consumed_local_only(self) -> ServiceInfoConsumedLocalOnly:
		"""Gets the consumed_local_only of this ServiceInfo.


		:return: The consumed_local_only of this ServiceInfo.
		:rtype: ServiceInfoConsumedLocalOnly
		"""
		return self._consumed_local_only

	@consumed_local_only.setter
	def consumed_local_only(self, consumed_local_only: ServiceInfoConsumedLocalOnly):
		"""Sets the consumed_local_only of this ServiceInfo.


		:param consumed_local_only: The consumed_local_only of this ServiceInfo.
		:type consumed_local_only: ServiceInfoConsumedLocalOnly
		"""

		self._consumed_local_only = consumed_local_only

	@property
	def is_local(self) -> ServiceInfoIsLocal:
		"""Gets the is_local of this ServiceInfo.


		:return: The is_local of this ServiceInfo.
		:rtype: ServiceInfoIsLocal
		"""
		return self._is_local

	@is_local.setter
	def is_local(self, is_local: ServiceInfoIsLocal):
		"""Sets the is_local of this ServiceInfo.


		:param is_local: The is_local of this ServiceInfo.
		:type is_local: ServiceInfoIsLocal
		"""

		self._is_local = is_local
