# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401 # pylint: disable=unused-import

from typing import List, Dict  # noqa: F401 # pylint: disable=unused-import

from swagger_server.models.base_model_ import Model
from swagger_server.models.MEC013_location.link import Link  # noqa: F401 # pylint: disable=unused-import,E501
from swagger_server.models.MEC013_location.service_error import \
	ServiceError  # noqa: F401 # pylint: disable=unused-import,E501
from swagger_server import util


class SubscriptionCancellationNotification(Model):
	"""NOTE: This class is auto generated by the swagger code generator program.

	Do not edit the class manually.
	"""

	def __init__(self, address: str = None, callback_data: str = None, link: List[Link] = None,
	             reason: ServiceError = None):  # noqa: E501
		"""SubscriptionCancellationNotification - a model defined in Swagger

		:param address: The address of this SubscriptionCancellationNotification.  # noqa: E501
		:type address: str
		:param callback_data: The callback_data of this SubscriptionCancellationNotification.  # noqa: E501
		:type callback_data: str
		:param link: The link of this SubscriptionCancellationNotification.  # noqa: E501
		:type link: List[Link]
		:param reason: The reason of this SubscriptionCancellationNotification.  # noqa: E501
		:type reason: ServiceError
		"""
		self.swagger_types = {
			'address': str,
			'callback_data': str,
			'link': List[Link],
			'reason': ServiceError
		}

		self.attribute_map = {
			'address': 'address',
			'callback_data': 'callbackData',
			'link': 'link',
			'reason': 'reason'
		}
		self._address = address
		self._callback_data = callback_data
		self._link = link
		self._reason = reason

	@classmethod
	def from_dict(cls, dikt) -> 'SubscriptionCancellationNotification':
		"""Returns the dict as a model

		:param dikt: A dict.
		:type: dict
		:return: The SubscriptionCancellationNotification of this SubscriptionCancellationNotification.  # noqa: E501
		:rtype: SubscriptionCancellationNotification
		"""
		return util.deserialize_model(dikt, cls)

	@property
	def address(self) -> str:
		"""Gets the address of this SubscriptionCancellationNotification.

		Address of terminal if the error applies to an individual terminal.  # noqa: E501

		:return: The address of this SubscriptionCancellationNotification.
		:rtype: str
		"""
		return self._address

	@address.setter
	def address(self, address: str):
		"""Sets the address of this SubscriptionCancellationNotification.

		Address of terminal if the error applies to an individual terminal.  # noqa: E501

		:param address: The address of this SubscriptionCancellationNotification.
		:type address: str
		"""

		self._address = address

	@property
	def callback_data(self) -> str:
		"""Gets the callback_data of this SubscriptionCancellationNotification.

		CallbackData if passed by the application in the receiptRequest element during the associated subscription operation  # noqa: E501

		:return: The callback_data of this SubscriptionCancellationNotification.
		:rtype: str
		"""
		return self._callback_data

	@callback_data.setter
	def callback_data(self, callback_data: str):
		"""Sets the callback_data of this SubscriptionCancellationNotification.

		CallbackData if passed by the application in the receiptRequest element during the associated subscription operation  # noqa: E501

		:param callback_data: The callback_data of this SubscriptionCancellationNotification.
		:type callback_data: str
		"""

		self._callback_data = callback_data

	@property
	def link(self) -> List[Link]:
		"""Gets the link of this SubscriptionCancellationNotification.

		Link to other resources that are in relationship with the resource.  # noqa: E501

		:return: The link of this SubscriptionCancellationNotification.
		:rtype: List[Link]
		"""
		return self._link

	@link.setter
	def link(self, link: List[Link]):
		"""Sets the link of this SubscriptionCancellationNotification.

		Link to other resources that are in relationship with the resource.  # noqa: E501

		:param link: The link of this SubscriptionCancellationNotification.
		:type link: List[Link]
		"""

		self._link = link

	@property
	def reason(self) -> ServiceError:
		"""Gets the reason of this SubscriptionCancellationNotification.


		:return: The reason of this SubscriptionCancellationNotification.
		:rtype: ServiceError
		"""
		return self._reason

	@reason.setter
	def reason(self, reason: ServiceError):
		"""Sets the reason of this SubscriptionCancellationNotification.


		:param reason: The reason of this SubscriptionCancellationNotification.
		:type reason: ServiceError
		"""

		self._reason = reason
