# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401 # pylint: disable=unused-import

from typing import List, Dict  # noqa: F401 # pylint: disable=unused-import

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ServiceError(Model):
	"""NOTE: This class is auto generated by the swagger code generator program.

	Do not edit the class manually.
	"""

	def __init__(self, message_id: str = None, text: str = None, variables: List[str] = None):  # noqa: E501
		"""ServiceError - a model defined in Swagger

		:param message_id: The message_id of this ServiceError.  # noqa: E501
		:type message_id: str
		:param text: The text of this ServiceError.  # noqa: E501
		:type text: str
		:param variables: The variables of this ServiceError.  # noqa: E501
		:type variables: List[str]
		"""
		self.swagger_types = {
			'message_id': str,
			'text': str,
			'variables': List[str]
		}

		self.attribute_map = {
			'message_id': 'messageId',
			'text': 'text',
			'variables': 'variables'
		}
		self._message_id = message_id
		self._text = text
		self._variables = variables

	@classmethod
	def from_dict(cls, dikt) -> 'ServiceError':
		"""Returns the dict as a model

		:param dikt: A dict.
		:type: dict
		:return: The ServiceError of this ServiceError.  # noqa: E501
		:rtype: ServiceError
		"""
		return util.deserialize_model(dikt, cls)

	@property
	def message_id(self) -> str:
		"""Gets the message_id of this ServiceError.

		Message identifier, either with prefix SVC or with prefix POL  # noqa: E501

		:return: The message_id of this ServiceError.
		:rtype: str
		"""
		return self._message_id

	@message_id.setter
	def message_id(self, message_id: str):
		"""Sets the message_id of this ServiceError.

		Message identifier, either with prefix SVC or with prefix POL  # noqa: E501

		:param message_id: The message_id of this ServiceError.
		:type message_id: str
		"""
		if message_id is None:
			raise ValueError("Invalid value for `message_id`, must not be `None`")  # noqa: E501

		self._message_id = message_id

	@property
	def text(self) -> str:
		"""Gets the text of this ServiceError.

		Message text, with replacement variables marked with %n, where n is an index into the list of <variables> elements, starting at 1  # noqa: E501

		:return: The text of this ServiceError.
		:rtype: str
		"""
		return self._text

	@text.setter
	def text(self, text: str):
		"""Sets the text of this ServiceError.

		Message text, with replacement variables marked with %n, where n is an index into the list of <variables> elements, starting at 1  # noqa: E501

		:param text: The text of this ServiceError.
		:type text: str
		"""
		if text is None:
			raise ValueError("Invalid value for `text`, must not be `None`")  # noqa: E501

		self._text = text

	@property
	def variables(self) -> List[str]:
		"""Gets the variables of this ServiceError.

		Variables to substitute into text string  # noqa: E501

		:return: The variables of this ServiceError.
		:rtype: List[str]
		"""
		return self._variables

	@variables.setter
	def variables(self, variables: List[str]):
		"""Sets the variables of this ServiceError.

		Variables to substitute into text string  # noqa: E501

		:param variables: The variables of this ServiceError.
		:type variables: List[str]
		"""

		self._variables = variables
