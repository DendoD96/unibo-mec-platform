# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401 # pylint: disable=unused-import

from typing import List, Dict  # noqa: F401 # pylint: disable=unused-import

from swagger_server.models.base_model_ import Model
from swagger_server.models.MEC013_location.link import Link  # noqa: F401 # pylint: disable=unused-import,E501
from swagger_server.models.MEC013_location.time_stamp import \
	TimeStamp  # noqa: F401 # pylint: disable=unused-import,E501
from swagger_server.models.MEC013_location.user_event_type import \
	UserEventType  # noqa: F401 # pylint: disable=unused-import,E501
from swagger_server import util


class ZonalPresenceNotification(Model):
	"""NOTE: This class is auto generated by the swagger code generator program.

	Do not edit the class manually.
	"""

	def __init__(self, address: str = None, callback_data: str = None, current_access_point_id: str = None,
	             interest_realm: str = None, link: List[Link] = None, previous_access_point_id: str = None,
	             timestamp: TimeStamp = None, user_event_type: UserEventType = None, zone_id: str = None):  # noqa: E501
		"""ZonalPresenceNotification - a model defined in Swagger

		:param address: The address of this ZonalPresenceNotification.  # noqa: E501
		:type address: str
		:param callback_data: The callback_data of this ZonalPresenceNotification.  # noqa: E501
		:type callback_data: str
		:param current_access_point_id: The current_access_point_id of this ZonalPresenceNotification.  # noqa: E501
		:type current_access_point_id: str
		:param interest_realm: The interest_realm of this ZonalPresenceNotification.  # noqa: E501
		:type interest_realm: str
		:param link: The link of this ZonalPresenceNotification.  # noqa: E501
		:type link: List[Link]
		:param previous_access_point_id: The previous_access_point_id of this ZonalPresenceNotification.  # noqa: E501
		:type previous_access_point_id: str
		:param timestamp: The timestamp of this ZonalPresenceNotification.  # noqa: E501
		:type timestamp: TimeStamp
		:param user_event_type: The user_event_type of this ZonalPresenceNotification.  # noqa: E501
		:type user_event_type: UserEventType
		:param zone_id: The zone_id of this ZonalPresenceNotification.  # noqa: E501
		:type zone_id: str
		"""
		self.swagger_types = {
			'address': str,
			'callback_data': str,
			'current_access_point_id': str,
			'interest_realm': str,
			'link': List[Link],
			'previous_access_point_id': str,
			'timestamp': TimeStamp,
			'user_event_type': UserEventType,
			'zone_id': str
		}

		self.attribute_map = {
			'address': 'address',
			'callback_data': 'callbackData',
			'current_access_point_id': 'currentAccessPointId',
			'interest_realm': 'interestRealm',
			'link': 'link',
			'previous_access_point_id': 'previousAccessPointId',
			'timestamp': 'timestamp',
			'user_event_type': 'userEventType',
			'zone_id': 'zoneId'
		}
		self._address = address
		self._callback_data = callback_data
		self._current_access_point_id = current_access_point_id
		self._interest_realm = interest_realm
		self._link = link
		self._previous_access_point_id = previous_access_point_id
		self._timestamp = timestamp
		self._user_event_type = user_event_type
		self._zone_id = zone_id

	@classmethod
	def from_dict(cls, dikt) -> 'ZonalPresenceNotification':
		"""Returns the dict as a model

		:param dikt: A dict.
		:type: dict
		:return: The ZonalPresenceNotification of this ZonalPresenceNotification.  # noqa: E501
		:rtype: ZonalPresenceNotification
		"""
		return util.deserialize_model(dikt, cls)

	@property
	def address(self) -> str:
		"""Gets the address of this ZonalPresenceNotification.

		Address of user (e.g. \"sip\" URI, \"tel\" URI, \"acr\" URI) to monitor  # noqa: E501

		:return: The address of this ZonalPresenceNotification.
		:rtype: str
		"""
		return self._address

	@address.setter
	def address(self, address: str):
		"""Sets the address of this ZonalPresenceNotification.

		Address of user (e.g. \"sip\" URI, \"tel\" URI, \"acr\" URI) to monitor  # noqa: E501

		:param address: The address of this ZonalPresenceNotification.
		:type address: str
		"""
		if address is None:
			raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

		self._address = address

	@property
	def callback_data(self) -> str:
		"""Gets the callback_data of this ZonalPresenceNotification.

		CallBackData if passed by the application during the associated ZonalTrafficSubscription and UserTrackingSubscription operation. See [REST_NetAPI_Common].  # noqa: E501

		:return: The callback_data of this ZonalPresenceNotification.
		:rtype: str
		"""
		return self._callback_data

	@callback_data.setter
	def callback_data(self, callback_data: str):
		"""Sets the callback_data of this ZonalPresenceNotification.

		CallBackData if passed by the application during the associated ZonalTrafficSubscription and UserTrackingSubscription operation. See [REST_NetAPI_Common].  # noqa: E501

		:param callback_data: The callback_data of this ZonalPresenceNotification.
		:type callback_data: str
		"""

		self._callback_data = callback_data

	@property
	def current_access_point_id(self) -> str:
		"""Gets the current_access_point_id of this ZonalPresenceNotification.

		Identifier of access point.  # noqa: E501

		:return: The current_access_point_id of this ZonalPresenceNotification.
		:rtype: str
		"""
		return self._current_access_point_id

	@current_access_point_id.setter
	def current_access_point_id(self, current_access_point_id: str):
		"""Sets the current_access_point_id of this ZonalPresenceNotification.

		Identifier of access point.  # noqa: E501

		:param current_access_point_id: The current_access_point_id of this ZonalPresenceNotification.
		:type current_access_point_id: str
		"""
		if current_access_point_id is None:
			raise ValueError("Invalid value for `current_access_point_id`, must not be `None`")  # noqa: E501

		self._current_access_point_id = current_access_point_id

	@property
	def interest_realm(self) -> str:
		"""Gets the interest_realm of this ZonalPresenceNotification.

		Interest realm of access point (e.g. geographical area, a type of industry etc.).  # noqa: E501

		:return: The interest_realm of this ZonalPresenceNotification.
		:rtype: str
		"""
		return self._interest_realm

	@interest_realm.setter
	def interest_realm(self, interest_realm: str):
		"""Sets the interest_realm of this ZonalPresenceNotification.

		Interest realm of access point (e.g. geographical area, a type of industry etc.).  # noqa: E501

		:param interest_realm: The interest_realm of this ZonalPresenceNotification.
		:type interest_realm: str
		"""

		self._interest_realm = interest_realm

	@property
	def link(self) -> List[Link]:
		"""Gets the link of this ZonalPresenceNotification.

		Link to other resources that are in relationship with this notification. The server SHOULD include a link to the related subscription. No other links are required or suggested by this specification  # noqa: E501

		:return: The link of this ZonalPresenceNotification.
		:rtype: List[Link]
		"""
		return self._link

	@link.setter
	def link(self, link: List[Link]):
		"""Sets the link of this ZonalPresenceNotification.

		Link to other resources that are in relationship with this notification. The server SHOULD include a link to the related subscription. No other links are required or suggested by this specification  # noqa: E501

		:param link: The link of this ZonalPresenceNotification.
		:type link: List[Link]
		"""

		self._link = link

	@property
	def previous_access_point_id(self) -> str:
		"""Gets the previous_access_point_id of this ZonalPresenceNotification.

		Identifier of access point.  # noqa: E501

		:return: The previous_access_point_id of this ZonalPresenceNotification.
		:rtype: str
		"""
		return self._previous_access_point_id

	@previous_access_point_id.setter
	def previous_access_point_id(self, previous_access_point_id: str):
		"""Sets the previous_access_point_id of this ZonalPresenceNotification.

		Identifier of access point.  # noqa: E501

		:param previous_access_point_id: The previous_access_point_id of this ZonalPresenceNotification.
		:type previous_access_point_id: str
		"""

		self._previous_access_point_id = previous_access_point_id

	@property
	def timestamp(self) -> TimeStamp:
		"""Gets the timestamp of this ZonalPresenceNotification.


		:return: The timestamp of this ZonalPresenceNotification.
		:rtype: TimeStamp
		"""
		return self._timestamp

	@timestamp.setter
	def timestamp(self, timestamp: TimeStamp):
		"""Sets the timestamp of this ZonalPresenceNotification.


		:param timestamp: The timestamp of this ZonalPresenceNotification.
		:type timestamp: TimeStamp
		"""
		if timestamp is None:
			raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

		self._timestamp = timestamp

	@property
	def user_event_type(self) -> UserEventType:
		"""Gets the user_event_type of this ZonalPresenceNotification.


		:return: The user_event_type of this ZonalPresenceNotification.
		:rtype: UserEventType
		"""
		return self._user_event_type

	@user_event_type.setter
	def user_event_type(self, user_event_type: UserEventType):
		"""Sets the user_event_type of this ZonalPresenceNotification.


		:param user_event_type: The user_event_type of this ZonalPresenceNotification.
		:type user_event_type: UserEventType
		"""
		if user_event_type is None:
			raise ValueError("Invalid value for `user_event_type`, must not be `None`")  # noqa: E501

		self._user_event_type = user_event_type

	@property
	def zone_id(self) -> str:
		"""Gets the zone_id of this ZonalPresenceNotification.

		Identifier of zone  # noqa: E501

		:return: The zone_id of this ZonalPresenceNotification.
		:rtype: str
		"""
		return self._zone_id

	@zone_id.setter
	def zone_id(self, zone_id: str):
		"""Sets the zone_id of this ZonalPresenceNotification.

		Identifier of zone  # noqa: E501

		:param zone_id: The zone_id of this ZonalPresenceNotification.
		:type zone_id: str
		"""
		if zone_id is None:
			raise ValueError("Invalid value for `zone_id`, must not be `None`")  # noqa: E501

		self._zone_id = zone_id
