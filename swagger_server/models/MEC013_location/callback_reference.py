# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401 # pylint: disable=unused-import

from typing import List, Dict  # noqa: F401 # pylint: disable=unused-import

from swagger_server.models.base_model_ import Model
from swagger_server.models.MEC013_location.notification_format import \
	NotificationFormat  # noqa: F401 # pylint: disable=unused-import,E501
from swagger_server import util


class CallbackReference(Model):
	"""NOTE: This class is auto generated by the swagger code generator program.

	Do not edit the class manually.
	"""

	def __init__(self, callback_data: str = None, notification_format: NotificationFormat = None,
	             notify_url: str = None):  # noqa: E501
		"""CallbackReference - a model defined in Swagger

		:param callback_data: The callback_data of this CallbackReference.  # noqa: E501
		:type callback_data: str
		:param notification_format: The notification_format of this CallbackReference.  # noqa: E501
		:type notification_format: NotificationFormat
		:param notify_url: The notify_url of this CallbackReference.  # noqa: E501
		:type notify_url: str
		"""
		self.swagger_types = {
			'callback_data': str,
			'notification_format': NotificationFormat,
			'notify_url': str
		}

		self.attribute_map = {
			'callback_data': 'callbackData',
			'notification_format': 'notificationFormat',
			'notify_url': 'notifyURL'
		}
		self._callback_data = callback_data
		self._notification_format = notification_format
		self._notify_url = notify_url

	@classmethod
	def from_dict(cls, dikt) -> 'CallbackReference':
		"""Returns the dict as a model

		:param dikt: A dict.
		:type: dict
		:return: The CallbackReference of this CallbackReference.  # noqa: E501
		:rtype: CallbackReference
		"""
		return util.deserialize_model(dikt, cls)

	@property
	def callback_data(self) -> str:
		"""Gets the callback_data of this CallbackReference.

		Data the application can register with the server when subscribing to notifications, and that are passed back unchanged in each of the related notifications. These data can be used by the application in the processing of the notification, e.g. for correlation purposes.  # noqa: E501

		:return: The callback_data of this CallbackReference.
		:rtype: str
		"""
		return self._callback_data

	@callback_data.setter
	def callback_data(self, callback_data: str):
		"""Sets the callback_data of this CallbackReference.

		Data the application can register with the server when subscribing to notifications, and that are passed back unchanged in each of the related notifications. These data can be used by the application in the processing of the notification, e.g. for correlation purposes.  # noqa: E501

		:param callback_data: The callback_data of this CallbackReference.
		:type callback_data: str
		"""

		self._callback_data = callback_data

	@property
	def notification_format(self) -> NotificationFormat:
		"""Gets the notification_format of this CallbackReference.


		:return: The notification_format of this CallbackReference.
		:rtype: NotificationFormat
		"""
		return self._notification_format

	@notification_format.setter
	def notification_format(self, notification_format: NotificationFormat):
		"""Sets the notification_format of this CallbackReference.


		:param notification_format: The notification_format of this CallbackReference.
		:type notification_format: NotificationFormat
		"""

		self._notification_format = notification_format

	@property
	def notify_url(self) -> str:
		"""Gets the notify_url of this CallbackReference.

		Notify Callback URL  # noqa: E501

		:return: The notify_url of this CallbackReference.
		:rtype: str
		"""
		return self._notify_url

	@notify_url.setter
	def notify_url(self, notify_url: str):
		"""Sets the notify_url of this CallbackReference.

		Notify Callback URL  # noqa: E501

		:param notify_url: The notify_url of this CallbackReference.
		:type notify_url: str
		"""
		if notify_url is None:
			raise ValueError("Invalid value for `notify_url`, must not be `None`")  # noqa: E501

		self._notify_url = notify_url
