# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.MEC013_location.location_info_velocity import LocationInfoVelocity  # noqa: F401,E501
from swagger_server.models.MEC013_location.time_stamp import TimeStamp  # noqa: F401,E501
from swagger_server import util


class LocationInfo(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, accuracy: int=None, accuracy_altitude: int=None, accuracy_semi_minor: int=None, altitude: float=None, confidence: int=None, included_angle: int=None, inner_radius: int=None, latitude: List[float]=None, longitude: List[float]=None, offset_angle: int=None, orientation_major_axis: int=None, shape: int=None, timestamp: TimeStamp=None, uncertainty_radius: int=None, velocity: LocationInfoVelocity=None):  # noqa: E501
        """LocationInfo - a model defined in Swagger

        :param accuracy: The accuracy of this LocationInfo.  # noqa: E501
        :type accuracy: int
        :param accuracy_altitude: The accuracy_altitude of this LocationInfo.  # noqa: E501
        :type accuracy_altitude: int
        :param accuracy_semi_minor: The accuracy_semi_minor of this LocationInfo.  # noqa: E501
        :type accuracy_semi_minor: int
        :param altitude: The altitude of this LocationInfo.  # noqa: E501
        :type altitude: float
        :param confidence: The confidence of this LocationInfo.  # noqa: E501
        :type confidence: int
        :param included_angle: The included_angle of this LocationInfo.  # noqa: E501
        :type included_angle: int
        :param inner_radius: The inner_radius of this LocationInfo.  # noqa: E501
        :type inner_radius: int
        :param latitude: The latitude of this LocationInfo.  # noqa: E501
        :type latitude: List[float]
        :param longitude: The longitude of this LocationInfo.  # noqa: E501
        :type longitude: List[float]
        :param offset_angle: The offset_angle of this LocationInfo.  # noqa: E501
        :type offset_angle: int
        :param orientation_major_axis: The orientation_major_axis of this LocationInfo.  # noqa: E501
        :type orientation_major_axis: int
        :param shape: The shape of this LocationInfo.  # noqa: E501
        :type shape: int
        :param timestamp: The timestamp of this LocationInfo.  # noqa: E501
        :type timestamp: TimeStamp
        :param uncertainty_radius: The uncertainty_radius of this LocationInfo.  # noqa: E501
        :type uncertainty_radius: int
        :param velocity: The velocity of this LocationInfo.  # noqa: E501
        :type velocity: LocationInfoVelocity
        """
        self.swagger_types = {
            'accuracy': int,
            'accuracy_altitude': int,
            'accuracy_semi_minor': int,
            'altitude': float,
            'confidence': int,
            'included_angle': int,
            'inner_radius': int,
            'latitude': List[float],
            'longitude': List[float],
            'offset_angle': int,
            'orientation_major_axis': int,
            'shape': int,
            'timestamp': TimeStamp,
            'uncertainty_radius': int,
            'velocity': LocationInfoVelocity
        }

        self.attribute_map = {
            'accuracy': 'accuracy',
            'accuracy_altitude': 'accuracyAltitude',
            'accuracy_semi_minor': 'accuracySemiMinor',
            'altitude': 'altitude',
            'confidence': 'confidence',
            'included_angle': 'includedAngle',
            'inner_radius': 'innerRadius',
            'latitude': 'latitude',
            'longitude': 'longitude',
            'offset_angle': 'offsetAngle',
            'orientation_major_axis': 'orientationMajorAxis',
            'shape': 'shape',
            'timestamp': 'timestamp',
            'uncertainty_radius': 'uncertaintyRadius',
            'velocity': 'velocity'
        }
        self._accuracy = accuracy
        self._accuracy_altitude = accuracy_altitude
        self._accuracy_semi_minor = accuracy_semi_minor
        self._altitude = altitude
        self._confidence = confidence
        self._included_angle = included_angle
        self._inner_radius = inner_radius
        self._latitude = latitude
        self._longitude = longitude
        self._offset_angle = offset_angle
        self._orientation_major_axis = orientation_major_axis
        self._shape = shape
        self._timestamp = timestamp
        self._uncertainty_radius = uncertainty_radius
        self._velocity = velocity

    @classmethod
    def from_dict(cls, dikt) -> 'LocationInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The LocationInfo of this LocationInfo.  # noqa: E501
        :rtype: LocationInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accuracy(self) -> int:
        """Gets the accuracy of this LocationInfo.

        Horizontal accuracy / (semi-major) uncertainty of location provided in meters, as defined in [14]. Present only if \"shape\" equals 4, 5 or 6  # noqa: E501

        :return: The accuracy of this LocationInfo.
        :rtype: int
        """
        return self._accuracy

    @accuracy.setter
    def accuracy(self, accuracy: int):
        """Sets the accuracy of this LocationInfo.

        Horizontal accuracy / (semi-major) uncertainty of location provided in meters, as defined in [14]. Present only if \"shape\" equals 4, 5 or 6  # noqa: E501

        :param accuracy: The accuracy of this LocationInfo.
        :type accuracy: int
        """

        self._accuracy = accuracy

    @property
    def accuracy_altitude(self) -> int:
        """Gets the accuracy_altitude of this LocationInfo.

        Altitude accuracy / uncertainty of location provided in meters, as defined in [14]. Present only if \"shape\" equals 3 or 4  # noqa: E501

        :return: The accuracy_altitude of this LocationInfo.
        :rtype: int
        """
        return self._accuracy_altitude

    @accuracy_altitude.setter
    def accuracy_altitude(self, accuracy_altitude: int):
        """Sets the accuracy_altitude of this LocationInfo.

        Altitude accuracy / uncertainty of location provided in meters, as defined in [14]. Present only if \"shape\" equals 3 or 4  # noqa: E501

        :param accuracy_altitude: The accuracy_altitude of this LocationInfo.
        :type accuracy_altitude: int
        """

        self._accuracy_altitude = accuracy_altitude

    @property
    def accuracy_semi_minor(self) -> int:
        """Gets the accuracy_semi_minor of this LocationInfo.

        Horizontal accuracy / (semi-major) uncertainty of location provided in meters, as defined in [14]. Present only if \"shape\" equals 4, 5 or 6  # noqa: E501

        :return: The accuracy_semi_minor of this LocationInfo.
        :rtype: int
        """
        return self._accuracy_semi_minor

    @accuracy_semi_minor.setter
    def accuracy_semi_minor(self, accuracy_semi_minor: int):
        """Sets the accuracy_semi_minor of this LocationInfo.

        Horizontal accuracy / (semi-major) uncertainty of location provided in meters, as defined in [14]. Present only if \"shape\" equals 4, 5 or 6  # noqa: E501

        :param accuracy_semi_minor: The accuracy_semi_minor of this LocationInfo.
        :type accuracy_semi_minor: int
        """

        self._accuracy_semi_minor = accuracy_semi_minor

    @property
    def altitude(self) -> float:
        """Gets the altitude of this LocationInfo.

        Location altitude relative to the WGS84 ellipsoid surface.  # noqa: E501

        :return: The altitude of this LocationInfo.
        :rtype: float
        """
        return self._altitude

    @altitude.setter
    def altitude(self, altitude: float):
        """Sets the altitude of this LocationInfo.

        Location altitude relative to the WGS84 ellipsoid surface.  # noqa: E501

        :param altitude: The altitude of this LocationInfo.
        :type altitude: float
        """

        self._altitude = altitude

    @property
    def confidence(self) -> int:
        """Gets the confidence of this LocationInfo.

        Confidence by which the position of a target entity is known to be within the shape description, expressed as a percentage and defined in [14]. Present only if \"shape\" equals 1, 4 or 6  # noqa: E501

        :return: The confidence of this LocationInfo.
        :rtype: int
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence: int):
        """Sets the confidence of this LocationInfo.

        Confidence by which the position of a target entity is known to be within the shape description, expressed as a percentage and defined in [14]. Present only if \"shape\" equals 1, 4 or 6  # noqa: E501

        :param confidence: The confidence of this LocationInfo.
        :type confidence: int
        """

        self._confidence = confidence

    @property
    def included_angle(self) -> int:
        """Gets the included_angle of this LocationInfo.

        Present only if \"shape\" equals 6  # noqa: E501

        :return: The included_angle of this LocationInfo.
        :rtype: int
        """
        return self._included_angle

    @included_angle.setter
    def included_angle(self, included_angle: int):
        """Sets the included_angle of this LocationInfo.

        Present only if \"shape\" equals 6  # noqa: E501

        :param included_angle: The included_angle of this LocationInfo.
        :type included_angle: int
        """

        self._included_angle = included_angle

    @property
    def inner_radius(self) -> int:
        """Gets the inner_radius of this LocationInfo.

        Present only if \"shape\" equals 6  # noqa: E501

        :return: The inner_radius of this LocationInfo.
        :rtype: int
        """
        return self._inner_radius

    @inner_radius.setter
    def inner_radius(self, inner_radius: int):
        """Sets the inner_radius of this LocationInfo.

        Present only if \"shape\" equals 6  # noqa: E501

        :param inner_radius: The inner_radius of this LocationInfo.
        :type inner_radius: int
        """

        self._inner_radius = inner_radius

    @property
    def latitude(self) -> List[float]:
        """Gets the latitude of this LocationInfo.

        Location latitude, expressed in the range -90° to +90°. Cardinality greater than one only if \"shape\" equals 7.  # noqa: E501

        :return: The latitude of this LocationInfo.
        :rtype: List[float]
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude: List[float]):
        """Sets the latitude of this LocationInfo.

        Location latitude, expressed in the range -90° to +90°. Cardinality greater than one only if \"shape\" equals 7.  # noqa: E501

        :param latitude: The latitude of this LocationInfo.
        :type latitude: List[float]
        """
        if latitude is None:
            raise ValueError("Invalid value for `latitude`, must not be `None`")  # noqa: E501

        self._latitude = latitude

    @property
    def longitude(self) -> List[float]:
        """Gets the longitude of this LocationInfo.

        Location longitude, expressed in the range -180° to +180°. Cardinality greater than one only if \"shape\" equals 7.  # noqa: E501

        :return: The longitude of this LocationInfo.
        :rtype: List[float]
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude: List[float]):
        """Sets the longitude of this LocationInfo.

        Location longitude, expressed in the range -180° to +180°. Cardinality greater than one only if \"shape\" equals 7.  # noqa: E501

        :param longitude: The longitude of this LocationInfo.
        :type longitude: List[float]
        """
        if longitude is None:
            raise ValueError("Invalid value for `longitude`, must not be `None`")  # noqa: E501

        self._longitude = longitude

    @property
    def offset_angle(self) -> int:
        """Gets the offset_angle of this LocationInfo.

        Present only if \"shape\" equals 6  # noqa: E501

        :return: The offset_angle of this LocationInfo.
        :rtype: int
        """
        return self._offset_angle

    @offset_angle.setter
    def offset_angle(self, offset_angle: int):
        """Sets the offset_angle of this LocationInfo.

        Present only if \"shape\" equals 6  # noqa: E501

        :param offset_angle: The offset_angle of this LocationInfo.
        :type offset_angle: int
        """

        self._offset_angle = offset_angle

    @property
    def orientation_major_axis(self) -> int:
        """Gets the orientation_major_axis of this LocationInfo.

        Angle of orientation of the major axis, expressed in the range 0° to 180°, as defined in [14]. Present only if \"shape\" equals 4 or 6  # noqa: E501

        :return: The orientation_major_axis of this LocationInfo.
        :rtype: int
        """
        return self._orientation_major_axis

    @orientation_major_axis.setter
    def orientation_major_axis(self, orientation_major_axis: int):
        """Sets the orientation_major_axis of this LocationInfo.

        Angle of orientation of the major axis, expressed in the range 0° to 180°, as defined in [14]. Present only if \"shape\" equals 4 or 6  # noqa: E501

        :param orientation_major_axis: The orientation_major_axis of this LocationInfo.
        :type orientation_major_axis: int
        """

        self._orientation_major_axis = orientation_major_axis

    @property
    def shape(self) -> int:
        """Gets the shape of this LocationInfo.

        Shape information, as detailed in [14], associated with the reported location coordinate: <p>1 = ELLIPSOID_ARC <p>2 = ELLIPSOID_POINT <p>3 = ELLIPSOID_POINT_ALTITUDE <p>4 = ELLIPSOID_POINT_ALTITUDE_UNCERT_ELLIPSOID <p>5 = ELLIPSOID_POINT_UNCERT_CIRCLE <p>6 = ELLIPSOID_POINT_UNCERT_ELLIPSE <p>7 = POLYGON  # noqa: E501

        :return: The shape of this LocationInfo.
        :rtype: int
        """
        return self._shape

    @shape.setter
    def shape(self, shape: int):
        """Sets the shape of this LocationInfo.

        Shape information, as detailed in [14], associated with the reported location coordinate: <p>1 = ELLIPSOID_ARC <p>2 = ELLIPSOID_POINT <p>3 = ELLIPSOID_POINT_ALTITUDE <p>4 = ELLIPSOID_POINT_ALTITUDE_UNCERT_ELLIPSOID <p>5 = ELLIPSOID_POINT_UNCERT_CIRCLE <p>6 = ELLIPSOID_POINT_UNCERT_ELLIPSE <p>7 = POLYGON  # noqa: E501

        :param shape: The shape of this LocationInfo.
        :type shape: int
        """
        if shape is None:
            raise ValueError("Invalid value for `shape`, must not be `None`")  # noqa: E501

        self._shape = shape

    @property
    def timestamp(self) -> TimeStamp:
        """Gets the timestamp of this LocationInfo.


        :return: The timestamp of this LocationInfo.
        :rtype: TimeStamp
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp: TimeStamp):
        """Sets the timestamp of this LocationInfo.


        :param timestamp: The timestamp of this LocationInfo.
        :type timestamp: TimeStamp
        """

        self._timestamp = timestamp

    @property
    def uncertainty_radius(self) -> int:
        """Gets the uncertainty_radius of this LocationInfo.

        Present only if \"shape\" equals 6  # noqa: E501

        :return: The uncertainty_radius of this LocationInfo.
        :rtype: int
        """
        return self._uncertainty_radius

    @uncertainty_radius.setter
    def uncertainty_radius(self, uncertainty_radius: int):
        """Sets the uncertainty_radius of this LocationInfo.

        Present only if \"shape\" equals 6  # noqa: E501

        :param uncertainty_radius: The uncertainty_radius of this LocationInfo.
        :type uncertainty_radius: int
        """

        self._uncertainty_radius = uncertainty_radius

    @property
    def velocity(self) -> LocationInfoVelocity:
        """Gets the velocity of this LocationInfo.


        :return: The velocity of this LocationInfo.
        :rtype: LocationInfoVelocity
        """
        return self._velocity

    @velocity.setter
    def velocity(self, velocity: LocationInfoVelocity):
        """Sets the velocity of this LocationInfo.


        :param velocity: The velocity of this LocationInfo.
        :type velocity: LocationInfoVelocity
        """

        self._velocity = velocity
