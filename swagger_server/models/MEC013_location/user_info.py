# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401 # pylint: disable=unused-import

from typing import List, Dict  # noqa: F401 # pylint: disable=unused-import

from swagger_server.models.base_model_ import Model
from swagger_server.models.MEC013_location.location_info import \
	LocationInfo  # noqa: F401 # pylint: disable=unused-import,E501
from swagger_server.models.MEC013_location.time_stamp import \
	TimeStamp  # noqa: F401 # pylint: disable=unused-import,E501
from swagger_server import util


class UserInfo(Model):
	"""NOTE: This class is auto generated by the swagger code generator program.

	Do not edit the class manually.
	"""

	def __init__(self, access_point_id: str = None, address: str = None, ancillary_info: str = None,
	             context_location_info: str = None, location_info: LocationInfo = None, resource_url: str = None,
	             timestamp: TimeStamp = None, zone_id: str = None):  # noqa: E501
		"""UserInfo - a model defined in Swagger

		:param access_point_id: The access_point_id of this UserInfo.  # noqa: E501
		:type access_point_id: str
		:param address: The address of this UserInfo.  # noqa: E501
		:type address: str
		:param ancillary_info: The ancillary_info of this UserInfo.  # noqa: E501
		:type ancillary_info: str
		:param context_location_info: The context_location_info of this UserInfo.  # noqa: E501
		:type context_location_info: str
		:param location_info: The location_info of this UserInfo.  # noqa: E501
		:type location_info: LocationInfo
		:param resource_url: The resource_url of this UserInfo.  # noqa: E501
		:type resource_url: str
		:param timestamp: The timestamp of this UserInfo.  # noqa: E501
		:type timestamp: TimeStamp
		:param zone_id: The zone_id of this UserInfo.  # noqa: E501
		:type zone_id: str
		"""
		self.swagger_types = {
			'access_point_id': str,
			'address': str,
			'ancillary_info': str,
			'context_location_info': str,
			'location_info': LocationInfo,
			'resource_url': str,
			'timestamp': TimeStamp,
			'zone_id': str
		}

		self.attribute_map = {
			'access_point_id': 'accessPointId',
			'address': 'address',
			'ancillary_info': 'ancillaryInfo',
			'context_location_info': 'contextLocationInfo',
			'location_info': 'locationInfo',
			'resource_url': 'resourceURL',
			'timestamp': 'timestamp',
			'zone_id': 'zoneId'
		}
		self._access_point_id = access_point_id
		self._address = address
		self._ancillary_info = ancillary_info
		self._context_location_info = context_location_info
		self._location_info = location_info
		self._resource_url = resource_url
		self._timestamp = timestamp
		self._zone_id = zone_id

	@classmethod
	def from_dict(cls, dikt) -> 'UserInfo':
		"""Returns the dict as a model

		:param dikt: A dict.
		:type: dict
		:return: The UserInfo of this UserInfo.  # noqa: E501
		:rtype: UserInfo
		"""
		return util.deserialize_model(dikt, cls)

	@property
	def access_point_id(self) -> str:
		"""Gets the access_point_id of this UserInfo.

		The identity of the access point the user is currently on, see note 1.  # noqa: E501

		:return: The access_point_id of this UserInfo.
		:rtype: str
		"""
		return self._access_point_id

	@access_point_id.setter
	def access_point_id(self, access_point_id: str):
		"""Sets the access_point_id of this UserInfo.

		The identity of the access point the user is currently on, see note 1.  # noqa: E501

		:param access_point_id: The access_point_id of this UserInfo.
		:type access_point_id: str
		"""
		if access_point_id is None:
			raise ValueError("Invalid value for `access_point_id`, must not be `None`")  # noqa: E501

		self._access_point_id = access_point_id

	@property
	def address(self) -> str:
		"""Gets the address of this UserInfo.

		Address of user (e.g. 'sip' URI, 'tel' URI, 'acr' URI) currently on the access point, see note 1.  # noqa: E501

		:return: The address of this UserInfo.
		:rtype: str
		"""
		return self._address

	@address.setter
	def address(self, address: str):
		"""Sets the address of this UserInfo.

		Address of user (e.g. 'sip' URI, 'tel' URI, 'acr' URI) currently on the access point, see note 1.  # noqa: E501

		:param address: The address of this UserInfo.
		:type address: str
		"""
		if address is None:
			raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

		self._address = address

	@property
	def ancillary_info(self) -> str:
		"""Gets the ancillary_info of this UserInfo.

		Reserved for future use.  # noqa: E501

		:return: The ancillary_info of this UserInfo.
		:rtype: str
		"""
		return self._ancillary_info

	@ancillary_info.setter
	def ancillary_info(self, ancillary_info: str):
		"""Sets the ancillary_info of this UserInfo.

		Reserved for future use.  # noqa: E501

		:param ancillary_info: The ancillary_info of this UserInfo.
		:type ancillary_info: str
		"""

		self._ancillary_info = ancillary_info

	@property
	def context_location_info(self) -> str:
		"""Gets the context_location_info of this UserInfo.

		Contextual information of a user location (e.g. aisle, floor, room number, etc.).  # noqa: E501

		:return: The context_location_info of this UserInfo.
		:rtype: str
		"""
		return self._context_location_info

	@context_location_info.setter
	def context_location_info(self, context_location_info: str):
		"""Sets the context_location_info of this UserInfo.

		Contextual information of a user location (e.g. aisle, floor, room number, etc.).  # noqa: E501

		:param context_location_info: The context_location_info of this UserInfo.
		:type context_location_info: str
		"""

		self._context_location_info = context_location_info

	@property
	def location_info(self) -> LocationInfo:
		"""Gets the location_info of this UserInfo.


		:return: The location_info of this UserInfo.
		:rtype: LocationInfo
		"""
		return self._location_info

	@location_info.setter
	def location_info(self, location_info: LocationInfo):
		"""Sets the location_info of this UserInfo.


		:param location_info: The location_info of this UserInfo.
		:type location_info: LocationInfo
		"""

		self._location_info = location_info

	@property
	def resource_url(self) -> str:
		"""Gets the resource_url of this UserInfo.

		Self-referring URL, see note 1.  # noqa: E501

		:return: The resource_url of this UserInfo.
		:rtype: str
		"""
		return self._resource_url

	@resource_url.setter
	def resource_url(self, resource_url: str):
		"""Sets the resource_url of this UserInfo.

		Self-referring URL, see note 1.  # noqa: E501

		:param resource_url: The resource_url of this UserInfo.
		:type resource_url: str
		"""
		if resource_url is None:
			raise ValueError("Invalid value for `resource_url`, must not be `None`")  # noqa: E501

		self._resource_url = resource_url

	@property
	def timestamp(self) -> TimeStamp:
		"""Gets the timestamp of this UserInfo.


		:return: The timestamp of this UserInfo.
		:rtype: TimeStamp
		"""
		return self._timestamp

	@timestamp.setter
	def timestamp(self, timestamp: TimeStamp):
		"""Sets the timestamp of this UserInfo.


		:param timestamp: The timestamp of this UserInfo.
		:type timestamp: TimeStamp
		"""
		if timestamp is None:
			raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

		self._timestamp = timestamp

	@property
	def zone_id(self) -> str:
		"""Gets the zone_id of this UserInfo.

		The identity of the zone the user is currently within, see note 1.  # noqa: E501

		:return: The zone_id of this UserInfo.
		:rtype: str
		"""
		return self._zone_id

	@zone_id.setter
	def zone_id(self, zone_id: str):
		"""Sets the zone_id of this UserInfo.

		The identity of the zone the user is currently within, see note 1.  # noqa: E501

		:param zone_id: The zone_id of this UserInfo.
		:type zone_id: str
		"""
		if zone_id is None:
			raise ValueError("Invalid value for `zone_id`, must not be `None`")  # noqa: E501

		self._zone_id = zone_id
