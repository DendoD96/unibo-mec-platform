# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class HtCapabilities(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, ampdu_parameters: int=None, asel_cap: int=None, ht_capability_info: int=None, ht_extended_cap: int=None, supported_mcs_set: int=None, tx_beam_form_cap: int=None):  # noqa: E501
        """HtCapabilities - a model defined in Swagger

        :param ampdu_parameters: The ampdu_parameters of this HtCapabilities.  # noqa: E501
        :type ampdu_parameters: int
        :param asel_cap: The asel_cap of this HtCapabilities.  # noqa: E501
        :type asel_cap: int
        :param ht_capability_info: The ht_capability_info of this HtCapabilities.  # noqa: E501
        :type ht_capability_info: int
        :param ht_extended_cap: The ht_extended_cap of this HtCapabilities.  # noqa: E501
        :type ht_extended_cap: int
        :param supported_mcs_set: The supported_mcs_set of this HtCapabilities.  # noqa: E501
        :type supported_mcs_set: int
        :param tx_beam_form_cap: The tx_beam_form_cap of this HtCapabilities.  # noqa: E501
        :type tx_beam_form_cap: int
        """
        self.swagger_types = {
            'ampdu_parameters': int,
            'asel_cap': int,
            'ht_capability_info': int,
            'ht_extended_cap': int,
            'supported_mcs_set': int,
            'tx_beam_form_cap': int
        }

        self.attribute_map = {
            'ampdu_parameters': 'ampduParameters',
            'asel_cap': 'aselCap',
            'ht_capability_info': 'htCapabilityInfo',
            'ht_extended_cap': 'htExtendedCap',
            'supported_mcs_set': 'supportedMcsSet',
            'tx_beam_form_cap': 'txBeamFormCap'
        }
        self._ampdu_parameters = ampdu_parameters
        self._asel_cap = asel_cap
        self._ht_capability_info = ht_capability_info
        self._ht_extended_cap = ht_extended_cap
        self._supported_mcs_set = supported_mcs_set
        self._tx_beam_form_cap = tx_beam_form_cap

    @classmethod
    def from_dict(cls, dikt) -> 'HtCapabilities':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The HtCapabilities of this HtCapabilities.  # noqa: E501
        :rtype: HtCapabilities
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ampdu_parameters(self) -> int:
        """Gets the ampdu_parameters of this HtCapabilities.

        A-MPDU parameters as defined in IEEE 802.11-2016 [8].  # noqa: E501

        :return: The ampdu_parameters of this HtCapabilities.
        :rtype: int
        """
        return self._ampdu_parameters

    @ampdu_parameters.setter
    def ampdu_parameters(self, ampdu_parameters: int):
        """Sets the ampdu_parameters of this HtCapabilities.

        A-MPDU parameters as defined in IEEE 802.11-2016 [8].  # noqa: E501

        :param ampdu_parameters: The ampdu_parameters of this HtCapabilities.
        :type ampdu_parameters: int
        """
        if ampdu_parameters is None:
            raise ValueError("Invalid value for `ampdu_parameters`, must not be `None`")  # noqa: E501

        self._ampdu_parameters = ampdu_parameters

    @property
    def asel_cap(self) -> int:
        """Gets the asel_cap of this HtCapabilities.

        ASEL capabilities as defined in IEEE 802.11-2016 [8].  # noqa: E501

        :return: The asel_cap of this HtCapabilities.
        :rtype: int
        """
        return self._asel_cap

    @asel_cap.setter
    def asel_cap(self, asel_cap: int):
        """Sets the asel_cap of this HtCapabilities.

        ASEL capabilities as defined in IEEE 802.11-2016 [8].  # noqa: E501

        :param asel_cap: The asel_cap of this HtCapabilities.
        :type asel_cap: int
        """
        if asel_cap is None:
            raise ValueError("Invalid value for `asel_cap`, must not be `None`")  # noqa: E501

        self._asel_cap = asel_cap

    @property
    def ht_capability_info(self) -> int:
        """Gets the ht_capability_info of this HtCapabilities.

        HT Capability Information as defined in IEEE 802.11-2016 [8].  # noqa: E501

        :return: The ht_capability_info of this HtCapabilities.
        :rtype: int
        """
        return self._ht_capability_info

    @ht_capability_info.setter
    def ht_capability_info(self, ht_capability_info: int):
        """Sets the ht_capability_info of this HtCapabilities.

        HT Capability Information as defined in IEEE 802.11-2016 [8].  # noqa: E501

        :param ht_capability_info: The ht_capability_info of this HtCapabilities.
        :type ht_capability_info: int
        """
        if ht_capability_info is None:
            raise ValueError("Invalid value for `ht_capability_info`, must not be `None`")  # noqa: E501

        self._ht_capability_info = ht_capability_info

    @property
    def ht_extended_cap(self) -> int:
        """Gets the ht_extended_cap of this HtCapabilities.

        Extended HT Capabilities as defined in IEEE 802.11-2016 [8].  # noqa: E501

        :return: The ht_extended_cap of this HtCapabilities.
        :rtype: int
        """
        return self._ht_extended_cap

    @ht_extended_cap.setter
    def ht_extended_cap(self, ht_extended_cap: int):
        """Sets the ht_extended_cap of this HtCapabilities.

        Extended HT Capabilities as defined in IEEE 802.11-2016 [8].  # noqa: E501

        :param ht_extended_cap: The ht_extended_cap of this HtCapabilities.
        :type ht_extended_cap: int
        """
        if ht_extended_cap is None:
            raise ValueError("Invalid value for `ht_extended_cap`, must not be `None`")  # noqa: E501

        self._ht_extended_cap = ht_extended_cap

    @property
    def supported_mcs_set(self) -> int:
        """Gets the supported_mcs_set of this HtCapabilities.

        Supported MCS set as defined in IEEE 802.11-2016 [8].  # noqa: E501

        :return: The supported_mcs_set of this HtCapabilities.
        :rtype: int
        """
        return self._supported_mcs_set

    @supported_mcs_set.setter
    def supported_mcs_set(self, supported_mcs_set: int):
        """Sets the supported_mcs_set of this HtCapabilities.

        Supported MCS set as defined in IEEE 802.11-2016 [8].  # noqa: E501

        :param supported_mcs_set: The supported_mcs_set of this HtCapabilities.
        :type supported_mcs_set: int
        """
        if supported_mcs_set is None:
            raise ValueError("Invalid value for `supported_mcs_set`, must not be `None`")  # noqa: E501

        self._supported_mcs_set = supported_mcs_set

    @property
    def tx_beam_form_cap(self) -> int:
        """Gets the tx_beam_form_cap of this HtCapabilities.

        Transmit Beamforming Capabilities as defined in IEEE 802.11-2016 [8].  # noqa: E501

        :return: The tx_beam_form_cap of this HtCapabilities.
        :rtype: int
        """
        return self._tx_beam_form_cap

    @tx_beam_form_cap.setter
    def tx_beam_form_cap(self, tx_beam_form_cap: int):
        """Sets the tx_beam_form_cap of this HtCapabilities.

        Transmit Beamforming Capabilities as defined in IEEE 802.11-2016 [8].  # noqa: E501

        :param tx_beam_form_cap: The tx_beam_form_cap of this HtCapabilities.
        :type tx_beam_form_cap: int
        """
        if tx_beam_form_cap is None:
            raise ValueError("Invalid value for `tx_beam_form_cap`, must not be `None`")  # noqa: E501

        self._tx_beam_form_cap = tx_beam_form_cap
