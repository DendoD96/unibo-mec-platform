# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.MEC028_wlan_access_information.assoc_sta_subscription_links import AssocStaSubscriptionLinks  # noqa: F401,E501
from swagger_server.models.MEC028_wlan_access_information.sta_data_rate_subscription_notification_event import StaDataRateSubscriptionNotificationEvent  # noqa: F401,E501
from swagger_server.models.MEC028_wlan_access_information.sta_identity import StaIdentity  # noqa: F401,E501
from swagger_server.models.MEC028_wlan_access_information.time_stamp import TimeStamp  # noqa: F401,E501
from swagger_server.models.MEC028_wlan_access_information.websock_notif_config import WebsockNotifConfig  # noqa: F401,E501
from swagger_server import util


class StaDataRateSubscription(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, links: AssocStaSubscriptionLinks=None, callback_reference: str=None, expiry_deadline: TimeStamp=None, notification_event: StaDataRateSubscriptionNotificationEvent=None, notification_period: int=None, request_test_notification: bool=None, sta_id: List[StaIdentity]=None, subscription_type: str=None, websock_notif_config: WebsockNotifConfig=None):  # noqa: E501
        """StaDataRateSubscription - a model defined in Swagger

        :param links: The links of this StaDataRateSubscription.  # noqa: E501
        :type links: AssocStaSubscriptionLinks
        :param callback_reference: The callback_reference of this StaDataRateSubscription.  # noqa: E501
        :type callback_reference: str
        :param expiry_deadline: The expiry_deadline of this StaDataRateSubscription.  # noqa: E501
        :type expiry_deadline: TimeStamp
        :param notification_event: The notification_event of this StaDataRateSubscription.  # noqa: E501
        :type notification_event: StaDataRateSubscriptionNotificationEvent
        :param notification_period: The notification_period of this StaDataRateSubscription.  # noqa: E501
        :type notification_period: int
        :param request_test_notification: The request_test_notification of this StaDataRateSubscription.  # noqa: E501
        :type request_test_notification: bool
        :param sta_id: The sta_id of this StaDataRateSubscription.  # noqa: E501
        :type sta_id: List[StaIdentity]
        :param subscription_type: The subscription_type of this StaDataRateSubscription.  # noqa: E501
        :type subscription_type: str
        :param websock_notif_config: The websock_notif_config of this StaDataRateSubscription.  # noqa: E501
        :type websock_notif_config: WebsockNotifConfig
        """
        self.swagger_types = {
            'links': AssocStaSubscriptionLinks,
            'callback_reference': str,
            'expiry_deadline': TimeStamp,
            'notification_event': StaDataRateSubscriptionNotificationEvent,
            'notification_period': int,
            'request_test_notification': bool,
            'sta_id': List[StaIdentity],
            'subscription_type': str,
            'websock_notif_config': WebsockNotifConfig
        }

        self.attribute_map = {
            'links': '_links',
            'callback_reference': 'callbackReference',
            'expiry_deadline': 'expiryDeadline',
            'notification_event': 'notificationEvent',
            'notification_period': 'notificationPeriod',
            'request_test_notification': 'requestTestNotification',
            'sta_id': 'staId',
            'subscription_type': 'subscriptionType',
            'websock_notif_config': 'websockNotifConfig'
        }
        self._links = links
        self._callback_reference = callback_reference
        self._expiry_deadline = expiry_deadline
        self._notification_event = notification_event
        self._notification_period = notification_period
        self._request_test_notification = request_test_notification
        self._sta_id = sta_id
        self._subscription_type = subscription_type
        self._websock_notif_config = websock_notif_config

    @classmethod
    def from_dict(cls, dikt) -> 'StaDataRateSubscription':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The StaDataRateSubscription of this StaDataRateSubscription.  # noqa: E501
        :rtype: StaDataRateSubscription
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self) -> AssocStaSubscriptionLinks:
        """Gets the links of this StaDataRateSubscription.


        :return: The links of this StaDataRateSubscription.
        :rtype: AssocStaSubscriptionLinks
        """
        return self._links

    @links.setter
    def links(self, links: AssocStaSubscriptionLinks):
        """Sets the links of this StaDataRateSubscription.


        :param links: The links of this StaDataRateSubscription.
        :type links: AssocStaSubscriptionLinks
        """

        self._links = links

    @property
    def callback_reference(self) -> str:
        """Gets the callback_reference of this StaDataRateSubscription.


        :return: The callback_reference of this StaDataRateSubscription.
        :rtype: str
        """
        return self._callback_reference

    @callback_reference.setter
    def callback_reference(self, callback_reference: str):
        """Sets the callback_reference of this StaDataRateSubscription.


        :param callback_reference: The callback_reference of this StaDataRateSubscription.
        :type callback_reference: str
        """

        self._callback_reference = callback_reference

    @property
    def expiry_deadline(self) -> TimeStamp:
        """Gets the expiry_deadline of this StaDataRateSubscription.


        :return: The expiry_deadline of this StaDataRateSubscription.
        :rtype: TimeStamp
        """
        return self._expiry_deadline

    @expiry_deadline.setter
    def expiry_deadline(self, expiry_deadline: TimeStamp):
        """Sets the expiry_deadline of this StaDataRateSubscription.


        :param expiry_deadline: The expiry_deadline of this StaDataRateSubscription.
        :type expiry_deadline: TimeStamp
        """

        self._expiry_deadline = expiry_deadline

    @property
    def notification_event(self) -> StaDataRateSubscriptionNotificationEvent:
        """Gets the notification_event of this StaDataRateSubscription.


        :return: The notification_event of this StaDataRateSubscription.
        :rtype: StaDataRateSubscriptionNotificationEvent
        """
        return self._notification_event

    @notification_event.setter
    def notification_event(self, notification_event: StaDataRateSubscriptionNotificationEvent):
        """Sets the notification_event of this StaDataRateSubscription.


        :param notification_event: The notification_event of this StaDataRateSubscription.
        :type notification_event: StaDataRateSubscriptionNotificationEvent
        """

        self._notification_event = notification_event

    @property
    def notification_period(self) -> int:
        """Gets the notification_period of this StaDataRateSubscription.

        Set for periodic notification reporting. Value indicates the notification period in seconds.  # noqa: E501

        :return: The notification_period of this StaDataRateSubscription.
        :rtype: int
        """
        return self._notification_period

    @notification_period.setter
    def notification_period(self, notification_period: int):
        """Sets the notification_period of this StaDataRateSubscription.

        Set for periodic notification reporting. Value indicates the notification period in seconds.  # noqa: E501

        :param notification_period: The notification_period of this StaDataRateSubscription.
        :type notification_period: int
        """

        self._notification_period = notification_period

    @property
    def request_test_notification(self) -> bool:
        """Gets the request_test_notification of this StaDataRateSubscription.

        Set to TRUE by the service consumer to request a test notification on the callbackReference URI to determine if it is reachable by the WAIS for notifications.  # noqa: E501

        :return: The request_test_notification of this StaDataRateSubscription.
        :rtype: bool
        """
        return self._request_test_notification

    @request_test_notification.setter
    def request_test_notification(self, request_test_notification: bool):
        """Sets the request_test_notification of this StaDataRateSubscription.

        Set to TRUE by the service consumer to request a test notification on the callbackReference URI to determine if it is reachable by the WAIS for notifications.  # noqa: E501

        :param request_test_notification: The request_test_notification of this StaDataRateSubscription.
        :type request_test_notification: bool
        """

        self._request_test_notification = request_test_notification

    @property
    def sta_id(self) -> List[StaIdentity]:
        """Gets the sta_id of this StaDataRateSubscription.

        Identifier(s) to uniquely specify the target client station(s) for the subscription.  # noqa: E501

        :return: The sta_id of this StaDataRateSubscription.
        :rtype: List[StaIdentity]
        """
        return self._sta_id

    @sta_id.setter
    def sta_id(self, sta_id: List[StaIdentity]):
        """Sets the sta_id of this StaDataRateSubscription.

        Identifier(s) to uniquely specify the target client station(s) for the subscription.  # noqa: E501

        :param sta_id: The sta_id of this StaDataRateSubscription.
        :type sta_id: List[StaIdentity]
        """
        if sta_id is None:
            raise ValueError("Invalid value for `sta_id`, must not be `None`")  # noqa: E501

        self._sta_id = sta_id

    @property
    def subscription_type(self) -> str:
        """Gets the subscription_type of this StaDataRateSubscription.

        Shall be set to \"StaDataRateSubscription\".  # noqa: E501

        :return: The subscription_type of this StaDataRateSubscription.
        :rtype: str
        """
        return self._subscription_type

    @subscription_type.setter
    def subscription_type(self, subscription_type: str):
        """Sets the subscription_type of this StaDataRateSubscription.

        Shall be set to \"StaDataRateSubscription\".  # noqa: E501

        :param subscription_type: The subscription_type of this StaDataRateSubscription.
        :type subscription_type: str
        """
        if subscription_type is None:
            raise ValueError("Invalid value for `subscription_type`, must not be `None`")  # noqa: E501

        self._subscription_type = subscription_type

    @property
    def websock_notif_config(self) -> WebsockNotifConfig:
        """Gets the websock_notif_config of this StaDataRateSubscription.


        :return: The websock_notif_config of this StaDataRateSubscription.
        :rtype: WebsockNotifConfig
        """
        return self._websock_notif_config

    @websock_notif_config.setter
    def websock_notif_config(self, websock_notif_config: WebsockNotifConfig):
        """Sets the websock_notif_config of this StaDataRateSubscription.


        :param websock_notif_config: The websock_notif_config of this StaDataRateSubscription.
        :type websock_notif_config: WebsockNotifConfig
        """

        self._websock_notif_config = websock_notif_config
