# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class OBssLoad(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, allocated_traffic_self_mean: int=None, allocated_traffic_self_std_dev: int=None, allocated_traffic_share_mean: int=None, allocated_traffic_share_std_dev: int=None, overlap: int=None):  # noqa: E501
        """OBssLoad - a model defined in Swagger

        :param allocated_traffic_self_mean: The allocated_traffic_self_mean of this OBssLoad.  # noqa: E501
        :type allocated_traffic_self_mean: int
        :param allocated_traffic_self_std_dev: The allocated_traffic_self_std_dev of this OBssLoad.  # noqa: E501
        :type allocated_traffic_self_std_dev: int
        :param allocated_traffic_share_mean: The allocated_traffic_share_mean of this OBssLoad.  # noqa: E501
        :type allocated_traffic_share_mean: int
        :param allocated_traffic_share_std_dev: The allocated_traffic_share_std_dev of this OBssLoad.  # noqa: E501
        :type allocated_traffic_share_std_dev: int
        :param overlap: The overlap of this OBssLoad.  # noqa: E501
        :type overlap: int
        """
        self.swagger_types = {
            'allocated_traffic_self_mean': int,
            'allocated_traffic_self_std_dev': int,
            'allocated_traffic_share_mean': int,
            'allocated_traffic_share_std_dev': int,
            'overlap': int
        }

        self.attribute_map = {
            'allocated_traffic_self_mean': 'allocatedTrafficSelfMean',
            'allocated_traffic_self_std_dev': 'allocatedTrafficSelfStdDev',
            'allocated_traffic_share_mean': 'allocatedTrafficShareMean',
            'allocated_traffic_share_std_dev': 'allocatedTrafficShareStdDev',
            'overlap': 'overlap'
        }
        self._allocated_traffic_self_mean = allocated_traffic_self_mean
        self._allocated_traffic_self_std_dev = allocated_traffic_self_std_dev
        self._allocated_traffic_share_mean = allocated_traffic_share_mean
        self._allocated_traffic_share_std_dev = allocated_traffic_share_std_dev
        self._overlap = overlap

    @classmethod
    def from_dict(cls, dikt) -> 'OBssLoad':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The OBssLoad of this OBssLoad.  # noqa: E501
        :rtype: OBssLoad
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allocated_traffic_self_mean(self) -> int:
        """Gets the allocated_traffic_self_mean of this OBssLoad.

        Mean of allocated traffic from this AP (BSS) in units of 32 µs per second.  # noqa: E501

        :return: The allocated_traffic_self_mean of this OBssLoad.
        :rtype: int
        """
        return self._allocated_traffic_self_mean

    @allocated_traffic_self_mean.setter
    def allocated_traffic_self_mean(self, allocated_traffic_self_mean: int):
        """Sets the allocated_traffic_self_mean of this OBssLoad.

        Mean of allocated traffic from this AP (BSS) in units of 32 µs per second.  # noqa: E501

        :param allocated_traffic_self_mean: The allocated_traffic_self_mean of this OBssLoad.
        :type allocated_traffic_self_mean: int
        """
        if allocated_traffic_self_mean is None:
            raise ValueError("Invalid value for `allocated_traffic_self_mean`, must not be `None`")  # noqa: E501

        self._allocated_traffic_self_mean = allocated_traffic_self_mean

    @property
    def allocated_traffic_self_std_dev(self) -> int:
        """Gets the allocated_traffic_self_std_dev of this OBssLoad.

        Standard deviation from the mean of allocation traffic from this BSS in units of 32 µs per second.  # noqa: E501

        :return: The allocated_traffic_self_std_dev of this OBssLoad.
        :rtype: int
        """
        return self._allocated_traffic_self_std_dev

    @allocated_traffic_self_std_dev.setter
    def allocated_traffic_self_std_dev(self, allocated_traffic_self_std_dev: int):
        """Sets the allocated_traffic_self_std_dev of this OBssLoad.

        Standard deviation from the mean of allocation traffic from this BSS in units of 32 µs per second.  # noqa: E501

        :param allocated_traffic_self_std_dev: The allocated_traffic_self_std_dev of this OBssLoad.
        :type allocated_traffic_self_std_dev: int
        """

        self._allocated_traffic_self_std_dev = allocated_traffic_self_std_dev

    @property
    def allocated_traffic_share_mean(self) -> int:
        """Gets the allocated_traffic_share_mean of this OBssLoad.

        Mean of the sum of allocated traffic from other APs on the overlapping channel in unit of 32 µs per second.  # noqa: E501

        :return: The allocated_traffic_share_mean of this OBssLoad.
        :rtype: int
        """
        return self._allocated_traffic_share_mean

    @allocated_traffic_share_mean.setter
    def allocated_traffic_share_mean(self, allocated_traffic_share_mean: int):
        """Sets the allocated_traffic_share_mean of this OBssLoad.

        Mean of the sum of allocated traffic from other APs on the overlapping channel in unit of 32 µs per second.  # noqa: E501

        :param allocated_traffic_share_mean: The allocated_traffic_share_mean of this OBssLoad.
        :type allocated_traffic_share_mean: int
        """
        if allocated_traffic_share_mean is None:
            raise ValueError("Invalid value for `allocated_traffic_share_mean`, must not be `None`")  # noqa: E501

        self._allocated_traffic_share_mean = allocated_traffic_share_mean

    @property
    def allocated_traffic_share_std_dev(self) -> int:
        """Gets the allocated_traffic_share_std_dev of this OBssLoad.

        Standard deviation from the mean of the sum of allocated traffic from other APs on the overlapping channel in unit of 32 µs per second.  # noqa: E501

        :return: The allocated_traffic_share_std_dev of this OBssLoad.
        :rtype: int
        """
        return self._allocated_traffic_share_std_dev

    @allocated_traffic_share_std_dev.setter
    def allocated_traffic_share_std_dev(self, allocated_traffic_share_std_dev: int):
        """Sets the allocated_traffic_share_std_dev of this OBssLoad.

        Standard deviation from the mean of the sum of allocated traffic from other APs on the overlapping channel in unit of 32 µs per second.  # noqa: E501

        :param allocated_traffic_share_std_dev: The allocated_traffic_share_std_dev of this OBssLoad.
        :type allocated_traffic_share_std_dev: int
        """

        self._allocated_traffic_share_std_dev = allocated_traffic_share_std_dev

    @property
    def overlap(self) -> int:
        """Gets the overlap of this OBssLoad.

        Indicates the number of other APs that are sharing the same channel as the reporting AP.  # noqa: E501

        :return: The overlap of this OBssLoad.
        :rtype: int
        """
        return self._overlap

    @overlap.setter
    def overlap(self, overlap: int):
        """Sets the overlap of this OBssLoad.

        Indicates the number of other APs that are sharing the same channel as the reporting AP.  # noqa: E501

        :param overlap: The overlap of this OBssLoad.
        :type overlap: int
        """

        self._overlap = overlap
