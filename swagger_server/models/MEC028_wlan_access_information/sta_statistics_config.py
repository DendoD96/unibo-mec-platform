# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.MEC028_wlan_access_information.sta_counter_trigger_condition import STACounterTriggerCondition  # noqa: F401,E501
from swagger_server import util


class StaStatisticsConfig(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, group_identity: int=None, measurement_count: int=None, trigger_condition: STACounterTriggerCondition=None, trigger_timeout: int=None, triggered_report: bool=None):  # noqa: E501
        """StaStatisticsConfig - a model defined in Swagger

        :param group_identity: The group_identity of this StaStatisticsConfig.  # noqa: E501
        :type group_identity: int
        :param measurement_count: The measurement_count of this StaStatisticsConfig.  # noqa: E501
        :type measurement_count: int
        :param trigger_condition: The trigger_condition of this StaStatisticsConfig.  # noqa: E501
        :type trigger_condition: STACounterTriggerCondition
        :param trigger_timeout: The trigger_timeout of this StaStatisticsConfig.  # noqa: E501
        :type trigger_timeout: int
        :param triggered_report: The triggered_report of this StaStatisticsConfig.  # noqa: E501
        :type triggered_report: bool
        """
        self.swagger_types = {
            'group_identity': int,
            'measurement_count': int,
            'trigger_condition': STACounterTriggerCondition,
            'trigger_timeout': int,
            'triggered_report': bool
        }

        self.attribute_map = {
            'group_identity': 'groupIdentity',
            'measurement_count': 'measurementCount',
            'trigger_condition': 'triggerCondition',
            'trigger_timeout': 'triggerTimeout',
            'triggered_report': 'triggeredReport'
        }
        self._group_identity = group_identity
        self._measurement_count = measurement_count
        self._trigger_condition = trigger_condition
        self._trigger_timeout = trigger_timeout
        self._triggered_report = triggered_report

    @classmethod
    def from_dict(cls, dikt) -> 'StaStatisticsConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The StaStatisticsConfig of this StaStatisticsConfig.  # noqa: E501
        :rtype: StaStatisticsConfig
        """
        return util.deserialize_model(dikt, cls)

    @property
    def group_identity(self) -> int:
        """Gets the group_identity of this StaStatisticsConfig.

        As per Table 9-92 of IEEE 802.11-2016 [8].  # noqa: E501

        :return: The group_identity of this StaStatisticsConfig.
        :rtype: int
        """
        return self._group_identity

    @group_identity.setter
    def group_identity(self, group_identity: int):
        """Sets the group_identity of this StaStatisticsConfig.

        As per Table 9-92 of IEEE 802.11-2016 [8].  # noqa: E501

        :param group_identity: The group_identity of this StaStatisticsConfig.
        :type group_identity: int
        """
        if group_identity is None:
            raise ValueError("Invalid value for `group_identity`, must not be `None`")  # noqa: E501

        self._group_identity = group_identity

    @property
    def measurement_count(self) -> int:
        """Gets the measurement_count of this StaStatisticsConfig.

        Valid if triggeredReport = true. Specifies the number of MAC service data units or protocol data units to determine if the trigger conditions are met.  # noqa: E501

        :return: The measurement_count of this StaStatisticsConfig.
        :rtype: int
        """
        return self._measurement_count

    @measurement_count.setter
    def measurement_count(self, measurement_count: int):
        """Sets the measurement_count of this StaStatisticsConfig.

        Valid if triggeredReport = true. Specifies the number of MAC service data units or protocol data units to determine if the trigger conditions are met.  # noqa: E501

        :param measurement_count: The measurement_count of this StaStatisticsConfig.
        :type measurement_count: int
        """

        self._measurement_count = measurement_count

    @property
    def trigger_condition(self) -> STACounterTriggerCondition:
        """Gets the trigger_condition of this StaStatisticsConfig.


        :return: The trigger_condition of this StaStatisticsConfig.
        :rtype: STACounterTriggerCondition
        """
        return self._trigger_condition

    @trigger_condition.setter
    def trigger_condition(self, trigger_condition: STACounterTriggerCondition):
        """Sets the trigger_condition of this StaStatisticsConfig.


        :param trigger_condition: The trigger_condition of this StaStatisticsConfig.
        :type trigger_condition: STACounterTriggerCondition
        """

        self._trigger_condition = trigger_condition

    @property
    def trigger_timeout(self) -> int:
        """Gets the trigger_timeout of this StaStatisticsConfig.

        Valid if triggeredReport = true. The Trigger Timeout field contains a value in units of 100 time-units of 1 024 µs during which a measuring STA does not generate further triggered STA Statistics Reports after a trigger condition has been met.  # noqa: E501

        :return: The trigger_timeout of this StaStatisticsConfig.
        :rtype: int
        """
        return self._trigger_timeout

    @trigger_timeout.setter
    def trigger_timeout(self, trigger_timeout: int):
        """Sets the trigger_timeout of this StaStatisticsConfig.

        Valid if triggeredReport = true. The Trigger Timeout field contains a value in units of 100 time-units of 1 024 µs during which a measuring STA does not generate further triggered STA Statistics Reports after a trigger condition has been met.  # noqa: E501

        :param trigger_timeout: The trigger_timeout of this StaStatisticsConfig.
        :type trigger_timeout: int
        """

        self._trigger_timeout = trigger_timeout

    @property
    def triggered_report(self) -> bool:
        """Gets the triggered_report of this StaStatisticsConfig.

        True = triggered reporting, otherwise duration.  # noqa: E501

        :return: The triggered_report of this StaStatisticsConfig.
        :rtype: bool
        """
        return self._triggered_report

    @triggered_report.setter
    def triggered_report(self, triggered_report: bool):
        """Sets the triggered_report of this StaStatisticsConfig.

        True = triggered reporting, otherwise duration.  # noqa: E501

        :param triggered_report: The triggered_report of this StaStatisticsConfig.
        :type triggered_report: bool
        """
        if triggered_report is None:
            raise ValueError("Invalid value for `triggered_report`, must not be `None`")  # noqa: E501

        self._triggered_report = triggered_report
