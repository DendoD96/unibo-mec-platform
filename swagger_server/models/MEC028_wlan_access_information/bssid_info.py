# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.MEC028_wlan_access_information.bss_capabilities import BssCapabilities  # noqa: F401,E501
from swagger_server import util


class BssidInfo(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, ap_reachability: int=None, capabilities: BssCapabilities=None, ftm: bool=None, high_throughput: bool=None, mobility_domain: bool=None, security: bool=None, very_high_throughput: bool=None):  # noqa: E501
        """BssidInfo - a model defined in Swagger

        :param ap_reachability: The ap_reachability of this BssidInfo.  # noqa: E501
        :type ap_reachability: int
        :param capabilities: The capabilities of this BssidInfo.  # noqa: E501
        :type capabilities: BssCapabilities
        :param ftm: The ftm of this BssidInfo.  # noqa: E501
        :type ftm: bool
        :param high_throughput: The high_throughput of this BssidInfo.  # noqa: E501
        :type high_throughput: bool
        :param mobility_domain: The mobility_domain of this BssidInfo.  # noqa: E501
        :type mobility_domain: bool
        :param security: The security of this BssidInfo.  # noqa: E501
        :type security: bool
        :param very_high_throughput: The very_high_throughput of this BssidInfo.  # noqa: E501
        :type very_high_throughput: bool
        """
        self.swagger_types = {
            'ap_reachability': int,
            'capabilities': BssCapabilities,
            'ftm': bool,
            'high_throughput': bool,
            'mobility_domain': bool,
            'security': bool,
            'very_high_throughput': bool
        }

        self.attribute_map = {
            'ap_reachability': 'apReachability',
            'capabilities': 'capabilities',
            'ftm': 'ftm',
            'high_throughput': 'highThroughput',
            'mobility_domain': 'mobilityDomain',
            'security': 'security',
            'very_high_throughput': 'veryHighThroughput'
        }
        self._ap_reachability = ap_reachability
        self._capabilities = capabilities
        self._ftm = ftm
        self._high_throughput = high_throughput
        self._mobility_domain = mobility_domain
        self._security = security
        self._very_high_throughput = very_high_throughput

    @classmethod
    def from_dict(cls, dikt) -> 'BssidInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BssidInfo of this BssidInfo.  # noqa: E501
        :rtype: BssidInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ap_reachability(self) -> int:
        """Gets the ap_reachability of this BssidInfo.

        The apReachability field indicates whether the AP identified by this BSSID is reachable by the STA that requested the neighbor report. Valid values: 0 = reserved 1 = not reachable 2 = unknown 3 = reachable.  # noqa: E501

        :return: The ap_reachability of this BssidInfo.
        :rtype: int
        """
        return self._ap_reachability

    @ap_reachability.setter
    def ap_reachability(self, ap_reachability: int):
        """Sets the ap_reachability of this BssidInfo.

        The apReachability field indicates whether the AP identified by this BSSID is reachable by the STA that requested the neighbor report. Valid values: 0 = reserved 1 = not reachable 2 = unknown 3 = reachable.  # noqa: E501

        :param ap_reachability: The ap_reachability of this BssidInfo.
        :type ap_reachability: int
        """
        if ap_reachability is None:
            raise ValueError("Invalid value for `ap_reachability`, must not be `None`")  # noqa: E501

        self._ap_reachability = ap_reachability

    @property
    def capabilities(self) -> BssCapabilities:
        """Gets the capabilities of this BssidInfo.


        :return: The capabilities of this BssidInfo.
        :rtype: BssCapabilities
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities: BssCapabilities):
        """Sets the capabilities of this BssidInfo.


        :param capabilities: The capabilities of this BssidInfo.
        :type capabilities: BssCapabilities
        """
        if capabilities is None:
            raise ValueError("Invalid value for `capabilities`, must not be `None`")  # noqa: E501

        self._capabilities = capabilities

    @property
    def ftm(self) -> bool:
        """Gets the ftm of this BssidInfo.

        True indicates the AP represented by this BSSID is an AP that has set the Fine Timing Measurement Responder field of the Extended Capabilities element to 1.  False indicates either that the reporting AP has dot11FineTimingMsmtRespActivated equal to false, or the reported AP has not set the Fine Timing Measurement Responder field of the Extended Capabilities element to 1 or that the Fine Timing Measurement Responder field of the reported AP is not available to the reporting AP at this time.  # noqa: E501

        :return: The ftm of this BssidInfo.
        :rtype: bool
        """
        return self._ftm

    @ftm.setter
    def ftm(self, ftm: bool):
        """Sets the ftm of this BssidInfo.

        True indicates the AP represented by this BSSID is an AP that has set the Fine Timing Measurement Responder field of the Extended Capabilities element to 1.  False indicates either that the reporting AP has dot11FineTimingMsmtRespActivated equal to false, or the reported AP has not set the Fine Timing Measurement Responder field of the Extended Capabilities element to 1 or that the Fine Timing Measurement Responder field of the reported AP is not available to the reporting AP at this time.  # noqa: E501

        :param ftm: The ftm of this BssidInfo.
        :type ftm: bool
        """
        if ftm is None:
            raise ValueError("Invalid value for `ftm`, must not be `None`")  # noqa: E501

        self._ftm = ftm

    @property
    def high_throughput(self) -> bool:
        """Gets the high_throughput of this BssidInfo.

        True indicates that the AP represented by this BSSID is an HT AP including the HT Capabilities element in its Beacons, and that the contents of that HT Capabilities element are identical to the HT Capabilities element advertised by the AP sending the report.  # noqa: E501

        :return: The high_throughput of this BssidInfo.
        :rtype: bool
        """
        return self._high_throughput

    @high_throughput.setter
    def high_throughput(self, high_throughput: bool):
        """Sets the high_throughput of this BssidInfo.

        True indicates that the AP represented by this BSSID is an HT AP including the HT Capabilities element in its Beacons, and that the contents of that HT Capabilities element are identical to the HT Capabilities element advertised by the AP sending the report.  # noqa: E501

        :param high_throughput: The high_throughput of this BssidInfo.
        :type high_throughput: bool
        """
        if high_throughput is None:
            raise ValueError("Invalid value for `high_throughput`, must not be `None`")  # noqa: E501

        self._high_throughput = high_throughput

    @property
    def mobility_domain(self) -> bool:
        """Gets the mobility_domain of this BssidInfo.

        True indicates the AP represented by this BSSID is including an MDE in its Beacon frames and that the contents of that MDE are identical to the MDE advertised by the AP sending the report.  # noqa: E501

        :return: The mobility_domain of this BssidInfo.
        :rtype: bool
        """
        return self._mobility_domain

    @mobility_domain.setter
    def mobility_domain(self, mobility_domain: bool):
        """Sets the mobility_domain of this BssidInfo.

        True indicates the AP represented by this BSSID is including an MDE in its Beacon frames and that the contents of that MDE are identical to the MDE advertised by the AP sending the report.  # noqa: E501

        :param mobility_domain: The mobility_domain of this BssidInfo.
        :type mobility_domain: bool
        """
        if mobility_domain is None:
            raise ValueError("Invalid value for `mobility_domain`, must not be `None`")  # noqa: E501

        self._mobility_domain = mobility_domain

    @property
    def security(self) -> bool:
        """Gets the security of this BssidInfo.

        True indicates the AP identified by this BSSID supports the same security provisioning as used by the STA in its current association.  False indicates either that the AP does not support the same security provisioning or that the security information is not available at this time.  # noqa: E501

        :return: The security of this BssidInfo.
        :rtype: bool
        """
        return self._security

    @security.setter
    def security(self, security: bool):
        """Sets the security of this BssidInfo.

        True indicates the AP identified by this BSSID supports the same security provisioning as used by the STA in its current association.  False indicates either that the AP does not support the same security provisioning or that the security information is not available at this time.  # noqa: E501

        :param security: The security of this BssidInfo.
        :type security: bool
        """
        if security is None:
            raise ValueError("Invalid value for `security`, must not be `None`")  # noqa: E501

        self._security = security

    @property
    def very_high_throughput(self) -> bool:
        """Gets the very_high_throughput of this BssidInfo.

        True indicates that the AP represented by this BSSID is a VHT AP and that the VHT Capabilities element, if included as a subelement in the report, is identical in content to the VHT Capabilities element included in the AP's Beacon.  # noqa: E501

        :return: The very_high_throughput of this BssidInfo.
        :rtype: bool
        """
        return self._very_high_throughput

    @very_high_throughput.setter
    def very_high_throughput(self, very_high_throughput: bool):
        """Sets the very_high_throughput of this BssidInfo.

        True indicates that the AP represented by this BSSID is a VHT AP and that the VHT Capabilities element, if included as a subelement in the report, is identical in content to the VHT Capabilities element included in the AP's Beacon.  # noqa: E501

        :param very_high_throughput: The very_high_throughput of this BssidInfo.
        :type very_high_throughput: bool
        """
        if very_high_throughput is None:
            raise ValueError("Invalid value for `very_high_throughput`, must not be `None`")  # noqa: E501

        self._very_high_throughput = very_high_throughput
