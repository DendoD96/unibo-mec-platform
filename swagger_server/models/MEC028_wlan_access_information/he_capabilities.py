# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401 # pylint: disable=unused-import

from typing import List, Dict  # noqa: F401 # pylint: disable=unused-import

from swagger_server.models.base_model_ import Model
from swagger_server import util


class HeCapabilities(Model):
	"""NOTE: This class is auto generated by the swagger code generator program.

	Do not edit the class manually.
	"""

	def __init__(self, he_mac_cap_info: int = None, he_phy_capinfo: int = None,
	             supported_he_mcs_nss_set: int = None):  # noqa: E501
		"""HeCapabilities - a model defined in Swagger

		:param he_mac_cap_info: The he_mac_cap_info of this HeCapabilities.  # noqa: E501
		:type he_mac_cap_info: int
		:param he_phy_capinfo: The he_phy_capinfo of this HeCapabilities.  # noqa: E501
		:type he_phy_capinfo: int
		:param supported_he_mcs_nss_set: The supported_he_mcs_nss_set of this HeCapabilities.  # noqa: E501
		:type supported_he_mcs_nss_set: int
		"""
		self.swagger_types = {
			'he_mac_cap_info': int,
			'he_phy_capinfo': int,
			'supported_he_mcs_nss_set': int
		}

		self.attribute_map = {
			'he_mac_cap_info': 'heMacCapInfo',
			'he_phy_capinfo': 'hePhyCapinfo',
			'supported_he_mcs_nss_set': 'supportedHeMcsNssSet'
		}
		self._he_mac_cap_info = he_mac_cap_info
		self._he_phy_capinfo = he_phy_capinfo
		self._supported_he_mcs_nss_set = supported_he_mcs_nss_set

	@classmethod
	def from_dict(cls, dikt) -> 'HeCapabilities':
		"""Returns the dict as a model

		:param dikt: A dict.
		:type: dict
		:return: The HeCapabilities of this HeCapabilities.  # noqa: E501
		:rtype: HeCapabilities
		"""
		return util.deserialize_model(dikt, cls)

	@property
	def he_mac_cap_info(self) -> int:
		"""Gets the he_mac_cap_info of this HeCapabilities.

		MAC capabilities of an Access Point.  # noqa: E501

		:return: The he_mac_cap_info of this HeCapabilities.
		:rtype: int
		"""
		return self._he_mac_cap_info

	@he_mac_cap_info.setter
	def he_mac_cap_info(self, he_mac_cap_info: int):
		"""Sets the he_mac_cap_info of this HeCapabilities.

		MAC capabilities of an Access Point.  # noqa: E501

		:param he_mac_cap_info: The he_mac_cap_info of this HeCapabilities.
		:type he_mac_cap_info: int
		"""
		if he_mac_cap_info is None:
			raise ValueError("Invalid value for `he_mac_cap_info`, must not be `None`")  # noqa: E501

		self._he_mac_cap_info = he_mac_cap_info

	@property
	def he_phy_capinfo(self) -> int:
		"""Gets the he_phy_capinfo of this HeCapabilities.

		PHY capabilities of an Access Point.  # noqa: E501

		:return: The he_phy_capinfo of this HeCapabilities.
		:rtype: int
		"""
		return self._he_phy_capinfo

	@he_phy_capinfo.setter
	def he_phy_capinfo(self, he_phy_capinfo: int):
		"""Sets the he_phy_capinfo of this HeCapabilities.

		PHY capabilities of an Access Point.  # noqa: E501

		:param he_phy_capinfo: The he_phy_capinfo of this HeCapabilities.
		:type he_phy_capinfo: int
		"""
		if he_phy_capinfo is None:
			raise ValueError("Invalid value for `he_phy_capinfo`, must not be `None`")  # noqa: E501

		self._he_phy_capinfo = he_phy_capinfo

	@property
	def supported_he_mcs_nss_set(self) -> int:
		"""Gets the supported_he_mcs_nss_set of this HeCapabilities.

		Supported MCS and NSS Set.  # noqa: E501

		:return: The supported_he_mcs_nss_set of this HeCapabilities.
		:rtype: int
		"""
		return self._supported_he_mcs_nss_set

	@supported_he_mcs_nss_set.setter
	def supported_he_mcs_nss_set(self, supported_he_mcs_nss_set: int):
		"""Sets the supported_he_mcs_nss_set of this HeCapabilities.

		Supported MCS and NSS Set.  # noqa: E501

		:param supported_he_mcs_nss_set: The supported_he_mcs_nss_set of this HeCapabilities.
		:type supported_he_mcs_nss_set: int
		"""
		if supported_he_mcs_nss_set is None:
			raise ValueError("Invalid value for `supported_he_mcs_nss_set`, must not be `None`")  # noqa: E501

		self._supported_he_mcs_nss_set = supported_he_mcs_nss_set
