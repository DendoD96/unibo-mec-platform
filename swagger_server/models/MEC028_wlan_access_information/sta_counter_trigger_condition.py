# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401 # pylint: disable=unused-import

from typing import List, Dict  # noqa: F401 # pylint: disable=unused-import

from swagger_server.models.base_model_ import Model
from swagger_server import util


class STACounterTriggerCondition(Model):
	"""NOTE: This class is auto generated by the swagger code generator program.

	Do not edit the class manually.
	"""

	def __init__(self, ack_failure_count_threshold: int = None, failed_count_threshold: int = None,
	             fcs_error_count_threshold: int = None, frame_duplicate_count_threshold: int = None,
	             multiple_retry_count_threshold: int = None, retry_count_threshold: int = None,
	             rts_failure_count_threshold: int = None):  # noqa: E501
		"""STACounterTriggerCondition - a model defined in Swagger

		:param ack_failure_count_threshold: The ack_failure_count_threshold of this STACounterTriggerCondition.  # noqa: E501
		:type ack_failure_count_threshold: int
		:param failed_count_threshold: The failed_count_threshold of this STACounterTriggerCondition.  # noqa: E501
		:type failed_count_threshold: int
		:param fcs_error_count_threshold: The fcs_error_count_threshold of this STACounterTriggerCondition.  # noqa: E501
		:type fcs_error_count_threshold: int
		:param frame_duplicate_count_threshold: The frame_duplicate_count_threshold of this STACounterTriggerCondition.  # noqa: E501
		:type frame_duplicate_count_threshold: int
		:param multiple_retry_count_threshold: The multiple_retry_count_threshold of this STACounterTriggerCondition.  # noqa: E501
		:type multiple_retry_count_threshold: int
		:param retry_count_threshold: The retry_count_threshold of this STACounterTriggerCondition.  # noqa: E501
		:type retry_count_threshold: int
		:param rts_failure_count_threshold: The rts_failure_count_threshold of this STACounterTriggerCondition.  # noqa: E501
		:type rts_failure_count_threshold: int
		"""
		self.swagger_types = {
			'ack_failure_count_threshold': int,
			'failed_count_threshold': int,
			'fcs_error_count_threshold': int,
			'frame_duplicate_count_threshold': int,
			'multiple_retry_count_threshold': int,
			'retry_count_threshold': int,
			'rts_failure_count_threshold': int
		}

		self.attribute_map = {
			'ack_failure_count_threshold': 'ackFailureCountThreshold',
			'failed_count_threshold': 'failedCountThreshold',
			'fcs_error_count_threshold': 'fcsErrorCountThreshold',
			'frame_duplicate_count_threshold': 'frameDuplicateCountThreshold',
			'multiple_retry_count_threshold': 'multipleRetryCountThreshold',
			'retry_count_threshold': 'retryCountThreshold',
			'rts_failure_count_threshold': 'rtsFailureCountThreshold'
		}
		self._ack_failure_count_threshold = ack_failure_count_threshold
		self._failed_count_threshold = failed_count_threshold
		self._fcs_error_count_threshold = fcs_error_count_threshold
		self._frame_duplicate_count_threshold = frame_duplicate_count_threshold
		self._multiple_retry_count_threshold = multiple_retry_count_threshold
		self._retry_count_threshold = retry_count_threshold
		self._rts_failure_count_threshold = rts_failure_count_threshold

	@classmethod
	def from_dict(cls, dikt) -> 'STACounterTriggerCondition':
		"""Returns the dict as a model

		:param dikt: A dict.
		:type: dict
		:return: The STACounterTriggerCondition of this STACounterTriggerCondition.  # noqa: E501
		:rtype: STACounterTriggerCondition
		"""
		return util.deserialize_model(dikt, cls)

	@property
	def ack_failure_count_threshold(self) -> int:
		"""Gets the ack_failure_count_threshold of this STACounterTriggerCondition.

		Configure and set threshold for dot11AckFailureCount trigger  # noqa: E501

		:return: The ack_failure_count_threshold of this STACounterTriggerCondition.
		:rtype: int
		"""
		return self._ack_failure_count_threshold

	@ack_failure_count_threshold.setter
	def ack_failure_count_threshold(self, ack_failure_count_threshold: int):
		"""Sets the ack_failure_count_threshold of this STACounterTriggerCondition.

		Configure and set threshold for dot11AckFailureCount trigger  # noqa: E501

		:param ack_failure_count_threshold: The ack_failure_count_threshold of this STACounterTriggerCondition.
		:type ack_failure_count_threshold: int
		"""

		self._ack_failure_count_threshold = ack_failure_count_threshold

	@property
	def failed_count_threshold(self) -> int:
		"""Gets the failed_count_threshold of this STACounterTriggerCondition.

		Configure and set threshold for dot11FailedCount trigger  # noqa: E501

		:return: The failed_count_threshold of this STACounterTriggerCondition.
		:rtype: int
		"""
		return self._failed_count_threshold

	@failed_count_threshold.setter
	def failed_count_threshold(self, failed_count_threshold: int):
		"""Sets the failed_count_threshold of this STACounterTriggerCondition.

		Configure and set threshold for dot11FailedCount trigger  # noqa: E501

		:param failed_count_threshold: The failed_count_threshold of this STACounterTriggerCondition.
		:type failed_count_threshold: int
		"""

		self._failed_count_threshold = failed_count_threshold

	@property
	def fcs_error_count_threshold(self) -> int:
		"""Gets the fcs_error_count_threshold of this STACounterTriggerCondition.

		Configure and set threshold for dot11FCSErrorCount trigger  # noqa: E501

		:return: The fcs_error_count_threshold of this STACounterTriggerCondition.
		:rtype: int
		"""
		return self._fcs_error_count_threshold

	@fcs_error_count_threshold.setter
	def fcs_error_count_threshold(self, fcs_error_count_threshold: int):
		"""Sets the fcs_error_count_threshold of this STACounterTriggerCondition.

		Configure and set threshold for dot11FCSErrorCount trigger  # noqa: E501

		:param fcs_error_count_threshold: The fcs_error_count_threshold of this STACounterTriggerCondition.
		:type fcs_error_count_threshold: int
		"""

		self._fcs_error_count_threshold = fcs_error_count_threshold

	@property
	def frame_duplicate_count_threshold(self) -> int:
		"""Gets the frame_duplicate_count_threshold of this STACounterTriggerCondition.

		Configure and set threshold for dot11FrameDuplicateCount trigger  # noqa: E501

		:return: The frame_duplicate_count_threshold of this STACounterTriggerCondition.
		:rtype: int
		"""
		return self._frame_duplicate_count_threshold

	@frame_duplicate_count_threshold.setter
	def frame_duplicate_count_threshold(self, frame_duplicate_count_threshold: int):
		"""Sets the frame_duplicate_count_threshold of this STACounterTriggerCondition.

		Configure and set threshold for dot11FrameDuplicateCount trigger  # noqa: E501

		:param frame_duplicate_count_threshold: The frame_duplicate_count_threshold of this STACounterTriggerCondition.
		:type frame_duplicate_count_threshold: int
		"""

		self._frame_duplicate_count_threshold = frame_duplicate_count_threshold

	@property
	def multiple_retry_count_threshold(self) -> int:
		"""Gets the multiple_retry_count_threshold of this STACounterTriggerCondition.

		Configure and set threshold for dot11MultipleRetryCount trigger  # noqa: E501

		:return: The multiple_retry_count_threshold of this STACounterTriggerCondition.
		:rtype: int
		"""
		return self._multiple_retry_count_threshold

	@multiple_retry_count_threshold.setter
	def multiple_retry_count_threshold(self, multiple_retry_count_threshold: int):
		"""Sets the multiple_retry_count_threshold of this STACounterTriggerCondition.

		Configure and set threshold for dot11MultipleRetryCount trigger  # noqa: E501

		:param multiple_retry_count_threshold: The multiple_retry_count_threshold of this STACounterTriggerCondition.
		:type multiple_retry_count_threshold: int
		"""

		self._multiple_retry_count_threshold = multiple_retry_count_threshold

	@property
	def retry_count_threshold(self) -> int:
		"""Gets the retry_count_threshold of this STACounterTriggerCondition.

		Configure and set threshold for dot11RetryCount trigger  # noqa: E501

		:return: The retry_count_threshold of this STACounterTriggerCondition.
		:rtype: int
		"""
		return self._retry_count_threshold

	@retry_count_threshold.setter
	def retry_count_threshold(self, retry_count_threshold: int):
		"""Sets the retry_count_threshold of this STACounterTriggerCondition.

		Configure and set threshold for dot11RetryCount trigger  # noqa: E501

		:param retry_count_threshold: The retry_count_threshold of this STACounterTriggerCondition.
		:type retry_count_threshold: int
		"""

		self._retry_count_threshold = retry_count_threshold

	@property
	def rts_failure_count_threshold(self) -> int:
		"""Gets the rts_failure_count_threshold of this STACounterTriggerCondition.

		Configure and set threshold for dot11RTSFailureCount trigger  # noqa: E501

		:return: The rts_failure_count_threshold of this STACounterTriggerCondition.
		:rtype: int
		"""
		return self._rts_failure_count_threshold

	@rts_failure_count_threshold.setter
	def rts_failure_count_threshold(self, rts_failure_count_threshold: int):
		"""Sets the rts_failure_count_threshold of this STACounterTriggerCondition.

		Configure and set threshold for dot11RTSFailureCount trigger  # noqa: E501

		:param rts_failure_count_threshold: The rts_failure_count_threshold of this STACounterTriggerCondition.
		:type rts_failure_count_threshold: int
		"""

		self._rts_failure_count_threshold = rts_failure_count_threshold
