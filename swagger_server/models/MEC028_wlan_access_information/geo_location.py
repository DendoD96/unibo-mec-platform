# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401 # pylint: disable=unused-import

from typing import List, Dict  # noqa: F401 # pylint: disable=unused-import

from swagger_server.models.base_model_ import Model
from swagger_server import util


class GeoLocation(Model):
	"""NOTE: This class is auto generated by the swagger code generator program.

	Do not edit the class manually.
	"""

	def __init__(self, altitude: int = None, altitude_type: int = None, altitude_uncertainty: int = None,
	             datum: int = None, lat: int = None, lat_uncertainty: int = None, long: int = None,
	             long_uncertainty: int = None):  # noqa: E501
		"""GeoLocation - a model defined in Swagger

		:param altitude: The altitude of this GeoLocation.  # noqa: E501
		:type altitude: int
		:param altitude_type: The altitude_type of this GeoLocation.  # noqa: E501
		:type altitude_type: int
		:param altitude_uncertainty: The altitude_uncertainty of this GeoLocation.  # noqa: E501
		:type altitude_uncertainty: int
		:param datum: The datum of this GeoLocation.  # noqa: E501
		:type datum: int
		:param lat: The lat of this GeoLocation.  # noqa: E501
		:type lat: int
		:param lat_uncertainty: The lat_uncertainty of this GeoLocation.  # noqa: E501
		:type lat_uncertainty: int
		:param long: The long of this GeoLocation.  # noqa: E501
		:type long: int
		:param long_uncertainty: The long_uncertainty of this GeoLocation.  # noqa: E501
		:type long_uncertainty: int
		"""
		self.swagger_types = {
			'altitude': int,
			'altitude_type': int,
			'altitude_uncertainty': int,
			'datum': int,
			'lat': int,
			'lat_uncertainty': int,
			'long': int,
			'long_uncertainty': int
		}

		self.attribute_map = {
			'altitude': 'altitude',
			'altitude_type': 'altitudeType',
			'altitude_uncertainty': 'altitudeUncertainty',
			'datum': 'datum',
			'lat': 'lat',
			'lat_uncertainty': 'latUncertainty',
			'long': 'long',
			'long_uncertainty': 'longUncertainty'
		}
		self._altitude = altitude
		self._altitude_type = altitude_type
		self._altitude_uncertainty = altitude_uncertainty
		self._datum = datum
		self._lat = lat
		self._lat_uncertainty = lat_uncertainty
		self._long = long
		self._long_uncertainty = long_uncertainty

	@classmethod
	def from_dict(cls, dikt) -> 'GeoLocation':
		"""Returns the dict as a model

		:param dikt: A dict.
		:type: dict
		:return: The GeoLocation of this GeoLocation.  # noqa: E501
		:rtype: GeoLocation
		"""
		return util.deserialize_model(dikt, cls)

	@property
	def altitude(self) -> int:
		"""Gets the altitude of this GeoLocation.

		The altitude value of location as defined in IETF RFC 6225 [6]  # noqa: E501

		:return: The altitude of this GeoLocation.
		:rtype: int
		"""
		return self._altitude

	@altitude.setter
	def altitude(self, altitude: int):
		"""Sets the altitude of this GeoLocation.

		The altitude value of location as defined in IETF RFC 6225 [6]  # noqa: E501

		:param altitude: The altitude of this GeoLocation.
		:type altitude: int
		"""

		self._altitude = altitude

	@property
	def altitude_type(self) -> int:
		"""Gets the altitude_type of this GeoLocation.

		The type description for altitude information e.g. floors or meters as defined in IETF RFC 6225 [6]  # noqa: E501

		:return: The altitude_type of this GeoLocation.
		:rtype: int
		"""
		return self._altitude_type

	@altitude_type.setter
	def altitude_type(self, altitude_type: int):
		"""Sets the altitude_type of this GeoLocation.

		The type description for altitude information e.g. floors or meters as defined in IETF RFC 6225 [6]  # noqa: E501

		:param altitude_type: The altitude_type of this GeoLocation.
		:type altitude_type: int
		"""

		self._altitude_type = altitude_type

	@property
	def altitude_uncertainty(self) -> int:
		"""Gets the altitude_uncertainty of this GeoLocation.

		The uncertainty for altitude information as defined in IETF RFC 6225 [6]  # noqa: E501

		:return: The altitude_uncertainty of this GeoLocation.
		:rtype: int
		"""
		return self._altitude_uncertainty

	@altitude_uncertainty.setter
	def altitude_uncertainty(self, altitude_uncertainty: int):
		"""Sets the altitude_uncertainty of this GeoLocation.

		The uncertainty for altitude information as defined in IETF RFC 6225 [6]  # noqa: E501

		:param altitude_uncertainty: The altitude_uncertainty of this GeoLocation.
		:type altitude_uncertainty: int
		"""

		self._altitude_uncertainty = altitude_uncertainty

	@property
	def datum(self) -> int:
		"""Gets the datum of this GeoLocation.

		The datum value to express how coordinates are organized and related to real world as defined in IETF RFC 6225 [6]  # noqa: E501

		:return: The datum of this GeoLocation.
		:rtype: int
		"""
		return self._datum

	@datum.setter
	def datum(self, datum: int):
		"""Sets the datum of this GeoLocation.

		The datum value to express how coordinates are organized and related to real world as defined in IETF RFC 6225 [6]  # noqa: E501

		:param datum: The datum of this GeoLocation.
		:type datum: int
		"""
		if datum is None:
			raise ValueError("Invalid value for `datum`, must not be `None`")  # noqa: E501

		self._datum = datum

	@property
	def lat(self) -> int:
		"""Gets the lat of this GeoLocation.

		The latitude value of location as defined in IETF RFC 6225 [6]  # noqa: E501

		:return: The lat of this GeoLocation.
		:rtype: int
		"""
		return self._lat

	@lat.setter
	def lat(self, lat: int):
		"""Sets the lat of this GeoLocation.

		The latitude value of location as defined in IETF RFC 6225 [6]  # noqa: E501

		:param lat: The lat of this GeoLocation.
		:type lat: int
		"""
		if lat is None:
			raise ValueError("Invalid value for `lat`, must not be `None`")  # noqa: E501

		self._lat = lat

	@property
	def lat_uncertainty(self) -> int:
		"""Gets the lat_uncertainty of this GeoLocation.

		The uncertainty for Latitude information as defined in IETF RFC 6225 [6]  # noqa: E501

		:return: The lat_uncertainty of this GeoLocation.
		:rtype: int
		"""
		return self._lat_uncertainty

	@lat_uncertainty.setter
	def lat_uncertainty(self, lat_uncertainty: int):
		"""Sets the lat_uncertainty of this GeoLocation.

		The uncertainty for Latitude information as defined in IETF RFC 6225 [6]  # noqa: E501

		:param lat_uncertainty: The lat_uncertainty of this GeoLocation.
		:type lat_uncertainty: int
		"""
		if lat_uncertainty is None:
			raise ValueError("Invalid value for `lat_uncertainty`, must not be `None`")  # noqa: E501

		self._lat_uncertainty = lat_uncertainty

	@property
	def long(self) -> int:
		"""Gets the long of this GeoLocation.

		The longitude value of location as defined in IETF RFC 6225 [6]  # noqa: E501

		:return: The long of this GeoLocation.
		:rtype: int
		"""
		return self._long

	@long.setter
	def long(self, long: int):
		"""Sets the long of this GeoLocation.

		The longitude value of location as defined in IETF RFC 6225 [6]  # noqa: E501

		:param long: The long of this GeoLocation.
		:type long: int
		"""
		if long is None:
			raise ValueError("Invalid value for `long`, must not be `None`")  # noqa: E501

		self._long = long

	@property
	def long_uncertainty(self) -> int:
		"""Gets the long_uncertainty of this GeoLocation.

		The uncertainty for Longitude information as defined in IETF RFC 6225 [6]  # noqa: E501

		:return: The long_uncertainty of this GeoLocation.
		:rtype: int
		"""
		return self._long_uncertainty

	@long_uncertainty.setter
	def long_uncertainty(self, long_uncertainty: int):
		"""Sets the long_uncertainty of this GeoLocation.

		The uncertainty for Longitude information as defined in IETF RFC 6225 [6]  # noqa: E501

		:param long_uncertainty: The long_uncertainty of this GeoLocation.
		:type long_uncertainty: int
		"""
		if long_uncertainty is None:
			raise ValueError("Invalid value for `long_uncertainty`, must not be `None`")  # noqa: E501

		self._long_uncertainty = long_uncertainty
