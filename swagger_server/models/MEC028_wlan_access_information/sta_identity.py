# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401 # pylint: disable=unused-import

from typing import List, Dict  # noqa: F401 # pylint: disable=unused-import

from swagger_server.models.base_model_ import Model
from swagger_server import util


class StaIdentity(Model):
	"""NOTE: This class is auto generated by the swagger code generator program.

	Do not edit the class manually.
	"""

	def __init__(self, aid: str = None, ip_address: List[str] = None, mac_id: str = None,
	             ssid: List[str] = None):  # noqa: E501
		"""StaIdentity - a model defined in Swagger

		:param aid: The aid of this StaIdentity.  # noqa: E501
		:type aid: str
		:param ip_address: The ip_address of this StaIdentity.  # noqa: E501
		:type ip_address: List[str]
		:param mac_id: The mac_id of this StaIdentity.  # noqa: E501
		:type mac_id: str
		:param ssid: The ssid of this StaIdentity.  # noqa: E501
		:type ssid: List[str]
		"""
		self.swagger_types = {
			'aid': str,
			'ip_address': List[str],
			'mac_id': str,
			'ssid': List[str]
		}

		self.attribute_map = {
			'aid': 'aid',
			'ip_address': 'ipAddress',
			'mac_id': 'macId',
			'ssid': 'ssid'
		}
		self._aid = aid
		self._ip_address = ip_address
		self._mac_id = mac_id
		self._ssid = ssid

	@classmethod
	def from_dict(cls, dikt) -> 'StaIdentity':
		"""Returns the dict as a model

		:param dikt: A dict.
		:type: dict
		:return: The StaIdentity of this StaIdentity.  # noqa: E501
		:rtype: StaIdentity
		"""
		return util.deserialize_model(dikt, cls)

	@property
	def aid(self) -> str:
		"""Gets the aid of this StaIdentity.

		Number which identifies a particular association between a station and an Access Point  # noqa: E501

		:return: The aid of this StaIdentity.
		:rtype: str
		"""
		return self._aid

	@aid.setter
	def aid(self, aid: str):
		"""Sets the aid of this StaIdentity.

		Number which identifies a particular association between a station and an Access Point  # noqa: E501

		:param aid: The aid of this StaIdentity.
		:type aid: str
		"""

		self._aid = aid

	@property
	def ip_address(self) -> List[str]:
		"""Gets the ip_address of this StaIdentity.

		IPv4 or IPv6 address(es) allocated for the station.  # noqa: E501

		:return: The ip_address of this StaIdentity.
		:rtype: List[str]
		"""
		return self._ip_address

	@ip_address.setter
	def ip_address(self, ip_address: List[str]):
		"""Sets the ip_address of this StaIdentity.

		IPv4 or IPv6 address(es) allocated for the station.  # noqa: E501

		:param ip_address: The ip_address of this StaIdentity.
		:type ip_address: List[str]
		"""

		self._ip_address = ip_address

	@property
	def mac_id(self) -> str:
		"""Gets the mac_id of this StaIdentity.

		Unique identifier assigned to station (as network interface controller) for communications at the data link layer of a network segment.  # noqa: E501

		:return: The mac_id of this StaIdentity.
		:rtype: str
		"""
		return self._mac_id

	@mac_id.setter
	def mac_id(self, mac_id: str):
		"""Sets the mac_id of this StaIdentity.

		Unique identifier assigned to station (as network interface controller) for communications at the data link layer of a network segment.  # noqa: E501

		:param mac_id: The mac_id of this StaIdentity.
		:type mac_id: str
		"""
		if mac_id is None:
			raise ValueError("Invalid value for `mac_id`, must not be `None`")  # noqa: E501

		self._mac_id = mac_id

	@property
	def ssid(self) -> List[str]:
		"""Gets the ssid of this StaIdentity.

		Service Set Identifier(s) to identify logical networks.  # noqa: E501

		:return: The ssid of this StaIdentity.
		:rtype: List[str]
		"""
		return self._ssid

	@ssid.setter
	def ssid(self, ssid: List[str]):
		"""Sets the ssid of this StaIdentity.

		Service Set Identifier(s) to identify logical networks.  # noqa: E501

		:param ssid: The ssid of this StaIdentity.
		:type ssid: List[str]
		"""

		self._ssid = ssid
