# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401 # pylint: disable=unused-import

from typing import List, Dict  # noqa: F401 # pylint: disable=unused-import

from swagger_server.models.base_model_ import Model
from swagger_server import util


class WanMetrics(Model):
	"""NOTE: This class is auto generated by the swagger code generator program.

	Do not edit the class manually.
	"""

	def __init__(self, downlink_load: int = None, downlink_speed: int = None, lmd: int = None, uplink_load: int = None,
	             uplink_speed: int = None, wan_info: int = None):  # noqa: E501
		"""WanMetrics - a model defined in Swagger

		:param downlink_load: The downlink_load of this WanMetrics.  # noqa: E501
		:type downlink_load: int
		:param downlink_speed: The downlink_speed of this WanMetrics.  # noqa: E501
		:type downlink_speed: int
		:param lmd: The lmd of this WanMetrics.  # noqa: E501
		:type lmd: int
		:param uplink_load: The uplink_load of this WanMetrics.  # noqa: E501
		:type uplink_load: int
		:param uplink_speed: The uplink_speed of this WanMetrics.  # noqa: E501
		:type uplink_speed: int
		:param wan_info: The wan_info of this WanMetrics.  # noqa: E501
		:type wan_info: int
		"""
		self.swagger_types = {
			'downlink_load': int,
			'downlink_speed': int,
			'lmd': int,
			'uplink_load': int,
			'uplink_speed': int,
			'wan_info': int
		}

		self.attribute_map = {
			'downlink_load': 'downlinkLoad',
			'downlink_speed': 'downlinkSpeed',
			'lmd': 'lmd',
			'uplink_load': 'uplinkLoad',
			'uplink_speed': 'uplinkSpeed',
			'wan_info': 'wanInfo'
		}
		self._downlink_load = downlink_load
		self._downlink_speed = downlink_speed
		self._lmd = lmd
		self._uplink_load = uplink_load
		self._uplink_speed = uplink_speed
		self._wan_info = wan_info

	@classmethod
	def from_dict(cls, dikt) -> 'WanMetrics':
		"""Returns the dict as a model

		:param dikt: A dict.
		:type: dict
		:return: The WanMetrics of this WanMetrics.  # noqa: E501
		:rtype: WanMetrics
		"""
		return util.deserialize_model(dikt, cls)

	@property
	def downlink_load(self) -> int:
		"""Gets the downlink_load of this WanMetrics.

		1-octet positive integer representing the current percentage loading of the downlink WAN connection, scaled linearly with 255 representing 100 %, as measured over an interval the duration of which is reported in Load Measurement Duration. In cases where the downlink load is unknown to the AP, the value is set to zero.  # noqa: E501

		:return: The downlink_load of this WanMetrics.
		:rtype: int
		"""
		return self._downlink_load

	@downlink_load.setter
	def downlink_load(self, downlink_load: int):
		"""Sets the downlink_load of this WanMetrics.

		1-octet positive integer representing the current percentage loading of the downlink WAN connection, scaled linearly with 255 representing 100 %, as measured over an interval the duration of which is reported in Load Measurement Duration. In cases where the downlink load is unknown to the AP, the value is set to zero.  # noqa: E501

		:param downlink_load: The downlink_load of this WanMetrics.
		:type downlink_load: int
		"""
		if downlink_load is None:
			raise ValueError("Invalid value for `downlink_load`, must not be `None`")  # noqa: E501

		self._downlink_load = downlink_load

	@property
	def downlink_speed(self) -> int:
		"""Gets the downlink_speed of this WanMetrics.

		4-octet positive integer whose value is an estimate of the WAN Backhaul link current downlink speed in kilobits per second.  # noqa: E501

		:return: The downlink_speed of this WanMetrics.
		:rtype: int
		"""
		return self._downlink_speed

	@downlink_speed.setter
	def downlink_speed(self, downlink_speed: int):
		"""Sets the downlink_speed of this WanMetrics.

		4-octet positive integer whose value is an estimate of the WAN Backhaul link current downlink speed in kilobits per second.  # noqa: E501

		:param downlink_speed: The downlink_speed of this WanMetrics.
		:type downlink_speed: int
		"""
		if downlink_speed is None:
			raise ValueError("Invalid value for `downlink_speed`, must not be `None`")  # noqa: E501

		self._downlink_speed = downlink_speed

	@property
	def lmd(self) -> int:
		"""Gets the lmd of this WanMetrics.

		The LMD (Load Measurement Duration) field is a 2-octet positive integer representing the duration over which the Downlink Load and Uplink Load have been measured, in tenths of a second. When the actual load measurement duration is greater than the maximum value, the maximum value will be reported. The value of the LMD field is set to 0 when neither the uplink nor downlink load can be computed. When the uplink and downlink loads are computed over different intervals, the maximum interval is reported.  # noqa: E501

		:return: The lmd of this WanMetrics.
		:rtype: int
		"""
		return self._lmd

	@lmd.setter
	def lmd(self, lmd: int):
		"""Sets the lmd of this WanMetrics.

		The LMD (Load Measurement Duration) field is a 2-octet positive integer representing the duration over which the Downlink Load and Uplink Load have been measured, in tenths of a second. When the actual load measurement duration is greater than the maximum value, the maximum value will be reported. The value of the LMD field is set to 0 when neither the uplink nor downlink load can be computed. When the uplink and downlink loads are computed over different intervals, the maximum interval is reported.  # noqa: E501

		:param lmd: The lmd of this WanMetrics.
		:type lmd: int
		"""
		if lmd is None:
			raise ValueError("Invalid value for `lmd`, must not be `None`")  # noqa: E501

		self._lmd = lmd

	@property
	def uplink_load(self) -> int:
		"""Gets the uplink_load of this WanMetrics.

		1-octet positive integer representing the current percentage loading of the uplink WAN connection, scaled linearly with 255 representing 100 %, as measured over an interval, the duration of which is reported in Load Measurement Duration. In cases where the uplink load is unknown to the AP, the value is set to zero.  # noqa: E501

		:return: The uplink_load of this WanMetrics.
		:rtype: int
		"""
		return self._uplink_load

	@uplink_load.setter
	def uplink_load(self, uplink_load: int):
		"""Sets the uplink_load of this WanMetrics.

		1-octet positive integer representing the current percentage loading of the uplink WAN connection, scaled linearly with 255 representing 100 %, as measured over an interval, the duration of which is reported in Load Measurement Duration. In cases where the uplink load is unknown to the AP, the value is set to zero.  # noqa: E501

		:param uplink_load: The uplink_load of this WanMetrics.
		:type uplink_load: int
		"""
		if uplink_load is None:
			raise ValueError("Invalid value for `uplink_load`, must not be `None`")  # noqa: E501

		self._uplink_load = uplink_load

	@property
	def uplink_speed(self) -> int:
		"""Gets the uplink_speed of this WanMetrics.

		4-octet positive integer whose value is an estimate of the WAN Backhaul link's current uplink speed in kilobits per second.  # noqa: E501

		:return: The uplink_speed of this WanMetrics.
		:rtype: int
		"""
		return self._uplink_speed

	@uplink_speed.setter
	def uplink_speed(self, uplink_speed: int):
		"""Sets the uplink_speed of this WanMetrics.

		4-octet positive integer whose value is an estimate of the WAN Backhaul link's current uplink speed in kilobits per second.  # noqa: E501

		:param uplink_speed: The uplink_speed of this WanMetrics.
		:type uplink_speed: int
		"""
		if uplink_speed is None:
			raise ValueError("Invalid value for `uplink_speed`, must not be `None`")  # noqa: E501

		self._uplink_speed = uplink_speed

	@property
	def wan_info(self) -> int:
		"""Gets the wan_info of this WanMetrics.

		Info about WAN link status, link symmetricity and capacity currently used.  # noqa: E501

		:return: The wan_info of this WanMetrics.
		:rtype: int
		"""
		return self._wan_info

	@wan_info.setter
	def wan_info(self, wan_info: int):
		"""Sets the wan_info of this WanMetrics.

		Info about WAN link status, link symmetricity and capacity currently used.  # noqa: E501

		:param wan_info: The wan_info of this WanMetrics.
		:type wan_info: int
		"""
		if wan_info is None:
			raise ValueError("Invalid value for `wan_info`, must not be `None`")  # noqa: E501

		self._wan_info = wan_info
