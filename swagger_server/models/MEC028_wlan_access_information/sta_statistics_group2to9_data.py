# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401 # pylint: disable=unused-import

from typing import List, Dict  # noqa: F401 # pylint: disable=unused-import

from swagger_server.models.base_model_ import Model
from swagger_server.models.MEC028_wlan_access_information.reporting_reason_qo_s_counters import \
	ReportingReasonQoSCounters  # noqa: F401 # pylint: disable=unused-import,E501
from swagger_server import util


class StaStatisticsGroup2to9Data(Model):
	"""NOTE: This class is auto generated by the swagger code generator program.

	Do not edit the class manually.
	"""

	def __init__(self, qos_ack_failure_count: int = None, qos_discarded_frame_count: int = None,
	             qos_failed_count: int = None, qos_frame_duplicate_count: int = None,
	             qos_mpd_us_received_count: int = None, qos_multiple_retry_count: int = None,
	             qos_rts_failure_count: int = None, qos_rts_success_count: int = None,
	             qos_received_fragment_count: int = None, qos_retries_received_count: int = None,
	             qos_retry_count: int = None, qos_transmitted_fragment_count: int = None,
	             qos_transmitted_frame_count: int = None,
	             reporting_reason_qo_s_counters: ReportingReasonQoSCounters = None):  # noqa: E501
		"""StaStatisticsGroup2to9Data - a model defined in Swagger

		:param qos_ack_failure_count: The qos_ack_failure_count of this StaStatisticsGroup2to9Data.  # noqa: E501
		:type qos_ack_failure_count: int
		:param qos_discarded_frame_count: The qos_discarded_frame_count of this StaStatisticsGroup2to9Data.  # noqa: E501
		:type qos_discarded_frame_count: int
		:param qos_failed_count: The qos_failed_count of this StaStatisticsGroup2to9Data.  # noqa: E501
		:type qos_failed_count: int
		:param qos_frame_duplicate_count: The qos_frame_duplicate_count of this StaStatisticsGroup2to9Data.  # noqa: E501
		:type qos_frame_duplicate_count: int
		:param qos_mpd_us_received_count: The qos_mpd_us_received_count of this StaStatisticsGroup2to9Data.  # noqa: E501
		:type qos_mpd_us_received_count: int
		:param qos_multiple_retry_count: The qos_multiple_retry_count of this StaStatisticsGroup2to9Data.  # noqa: E501
		:type qos_multiple_retry_count: int
		:param qos_rts_failure_count: The qos_rts_failure_count of this StaStatisticsGroup2to9Data.  # noqa: E501
		:type qos_rts_failure_count: int
		:param qos_rts_success_count: The qos_rts_success_count of this StaStatisticsGroup2to9Data.  # noqa: E501
		:type qos_rts_success_count: int
		:param qos_received_fragment_count: The qos_received_fragment_count of this StaStatisticsGroup2to9Data.  # noqa: E501
		:type qos_received_fragment_count: int
		:param qos_retries_received_count: The qos_retries_received_count of this StaStatisticsGroup2to9Data.  # noqa: E501
		:type qos_retries_received_count: int
		:param qos_retry_count: The qos_retry_count of this StaStatisticsGroup2to9Data.  # noqa: E501
		:type qos_retry_count: int
		:param qos_transmitted_fragment_count: The qos_transmitted_fragment_count of this StaStatisticsGroup2to9Data.  # noqa: E501
		:type qos_transmitted_fragment_count: int
		:param qos_transmitted_frame_count: The qos_transmitted_frame_count of this StaStatisticsGroup2to9Data.  # noqa: E501
		:type qos_transmitted_frame_count: int
		:param reporting_reason_qo_s_counters: The reporting_reason_qo_s_counters of this StaStatisticsGroup2to9Data.  # noqa: E501
		:type reporting_reason_qo_s_counters: ReportingReasonQoSCounters
		"""
		self.swagger_types = {
			'qos_ack_failure_count': int,
			'qos_discarded_frame_count': int,
			'qos_failed_count': int,
			'qos_frame_duplicate_count': int,
			'qos_mpd_us_received_count': int,
			'qos_multiple_retry_count': int,
			'qos_rts_failure_count': int,
			'qos_rts_success_count': int,
			'qos_received_fragment_count': int,
			'qos_retries_received_count': int,
			'qos_retry_count': int,
			'qos_transmitted_fragment_count': int,
			'qos_transmitted_frame_count': int,
			'reporting_reason_qo_s_counters': ReportingReasonQoSCounters
		}

		self.attribute_map = {
			'qos_ack_failure_count': 'qosAckFailureCount',
			'qos_discarded_frame_count': 'qosDiscardedFrameCount',
			'qos_failed_count': 'qosFailedCount',
			'qos_frame_duplicate_count': 'qosFrameDuplicateCount',
			'qos_mpd_us_received_count': 'qosMPDUsReceivedCount',
			'qos_multiple_retry_count': 'qosMultipleRetryCount',
			'qos_rts_failure_count': 'qosRTSFailureCount',
			'qos_rts_success_count': 'qosRTSSuccessCount',
			'qos_received_fragment_count': 'qosReceivedFragmentCount',
			'qos_retries_received_count': 'qosRetriesReceivedCount',
			'qos_retry_count': 'qosRetryCount',
			'qos_transmitted_fragment_count': 'qosTransmittedFragmentCount',
			'qos_transmitted_frame_count': 'qosTransmittedFrameCount',
			'reporting_reason_qo_s_counters': 'reportingReasonQoSCounters'
		}
		self._qos_ack_failure_count = qos_ack_failure_count
		self._qos_discarded_frame_count = qos_discarded_frame_count
		self._qos_failed_count = qos_failed_count
		self._qos_frame_duplicate_count = qos_frame_duplicate_count
		self._qos_mpd_us_received_count = qos_mpd_us_received_count
		self._qos_multiple_retry_count = qos_multiple_retry_count
		self._qos_rts_failure_count = qos_rts_failure_count
		self._qos_rts_success_count = qos_rts_success_count
		self._qos_received_fragment_count = qos_received_fragment_count
		self._qos_retries_received_count = qos_retries_received_count
		self._qos_retry_count = qos_retry_count
		self._qos_transmitted_fragment_count = qos_transmitted_fragment_count
		self._qos_transmitted_frame_count = qos_transmitted_frame_count
		self._reporting_reason_qo_s_counters = reporting_reason_qo_s_counters

	@classmethod
	def from_dict(cls, dikt) -> 'StaStatisticsGroup2to9Data':
		"""Returns the dict as a model

		:param dikt: A dict.
		:type: dict
		:return: The StaStatisticsGroup2to9Data of this StaStatisticsGroup2to9Data.  # noqa: E501
		:rtype: StaStatisticsGroup2to9Data
		"""
		return util.deserialize_model(dikt, cls)

	@property
	def qos_ack_failure_count(self) -> int:
		"""Gets the qos_ack_failure_count of this StaStatisticsGroup2to9Data.

		dot11QosAckFailureCount counter  # noqa: E501

		:return: The qos_ack_failure_count of this StaStatisticsGroup2to9Data.
		:rtype: int
		"""
		return self._qos_ack_failure_count

	@qos_ack_failure_count.setter
	def qos_ack_failure_count(self, qos_ack_failure_count: int):
		"""Sets the qos_ack_failure_count of this StaStatisticsGroup2to9Data.

		dot11QosAckFailureCount counter  # noqa: E501

		:param qos_ack_failure_count: The qos_ack_failure_count of this StaStatisticsGroup2to9Data.
		:type qos_ack_failure_count: int
		"""
		if qos_ack_failure_count is None:
			raise ValueError("Invalid value for `qos_ack_failure_count`, must not be `None`")  # noqa: E501

		self._qos_ack_failure_count = qos_ack_failure_count

	@property
	def qos_discarded_frame_count(self) -> int:
		"""Gets the qos_discarded_frame_count of this StaStatisticsGroup2to9Data.

		dot11QosDiscardedFrameCount counter  # noqa: E501

		:return: The qos_discarded_frame_count of this StaStatisticsGroup2to9Data.
		:rtype: int
		"""
		return self._qos_discarded_frame_count

	@qos_discarded_frame_count.setter
	def qos_discarded_frame_count(self, qos_discarded_frame_count: int):
		"""Sets the qos_discarded_frame_count of this StaStatisticsGroup2to9Data.

		dot11QosDiscardedFrameCount counter  # noqa: E501

		:param qos_discarded_frame_count: The qos_discarded_frame_count of this StaStatisticsGroup2to9Data.
		:type qos_discarded_frame_count: int
		"""
		if qos_discarded_frame_count is None:
			raise ValueError("Invalid value for `qos_discarded_frame_count`, must not be `None`")  # noqa: E501

		self._qos_discarded_frame_count = qos_discarded_frame_count

	@property
	def qos_failed_count(self) -> int:
		"""Gets the qos_failed_count of this StaStatisticsGroup2to9Data.

		dot11QosFailedCount counter  # noqa: E501

		:return: The qos_failed_count of this StaStatisticsGroup2to9Data.
		:rtype: int
		"""
		return self._qos_failed_count

	@qos_failed_count.setter
	def qos_failed_count(self, qos_failed_count: int):
		"""Sets the qos_failed_count of this StaStatisticsGroup2to9Data.

		dot11QosFailedCount counter  # noqa: E501

		:param qos_failed_count: The qos_failed_count of this StaStatisticsGroup2to9Data.
		:type qos_failed_count: int
		"""
		if qos_failed_count is None:
			raise ValueError("Invalid value for `qos_failed_count`, must not be `None`")  # noqa: E501

		self._qos_failed_count = qos_failed_count

	@property
	def qos_frame_duplicate_count(self) -> int:
		"""Gets the qos_frame_duplicate_count of this StaStatisticsGroup2to9Data.

		dot11QosFrameDuplicateCount counter  # noqa: E501

		:return: The qos_frame_duplicate_count of this StaStatisticsGroup2to9Data.
		:rtype: int
		"""
		return self._qos_frame_duplicate_count

	@qos_frame_duplicate_count.setter
	def qos_frame_duplicate_count(self, qos_frame_duplicate_count: int):
		"""Sets the qos_frame_duplicate_count of this StaStatisticsGroup2to9Data.

		dot11QosFrameDuplicateCount counter  # noqa: E501

		:param qos_frame_duplicate_count: The qos_frame_duplicate_count of this StaStatisticsGroup2to9Data.
		:type qos_frame_duplicate_count: int
		"""
		if qos_frame_duplicate_count is None:
			raise ValueError("Invalid value for `qos_frame_duplicate_count`, must not be `None`")  # noqa: E501

		self._qos_frame_duplicate_count = qos_frame_duplicate_count

	@property
	def qos_mpd_us_received_count(self) -> int:
		"""Gets the qos_mpd_us_received_count of this StaStatisticsGroup2to9Data.

		dot11QosMPDUsReceivedCount counter  # noqa: E501

		:return: The qos_mpd_us_received_count of this StaStatisticsGroup2to9Data.
		:rtype: int
		"""
		return self._qos_mpd_us_received_count

	@qos_mpd_us_received_count.setter
	def qos_mpd_us_received_count(self, qos_mpd_us_received_count: int):
		"""Sets the qos_mpd_us_received_count of this StaStatisticsGroup2to9Data.

		dot11QosMPDUsReceivedCount counter  # noqa: E501

		:param qos_mpd_us_received_count: The qos_mpd_us_received_count of this StaStatisticsGroup2to9Data.
		:type qos_mpd_us_received_count: int
		"""
		if qos_mpd_us_received_count is None:
			raise ValueError("Invalid value for `qos_mpd_us_received_count`, must not be `None`")  # noqa: E501

		self._qos_mpd_us_received_count = qos_mpd_us_received_count

	@property
	def qos_multiple_retry_count(self) -> int:
		"""Gets the qos_multiple_retry_count of this StaStatisticsGroup2to9Data.

		dot11QosMultipleRetryCount counter  # noqa: E501

		:return: The qos_multiple_retry_count of this StaStatisticsGroup2to9Data.
		:rtype: int
		"""
		return self._qos_multiple_retry_count

	@qos_multiple_retry_count.setter
	def qos_multiple_retry_count(self, qos_multiple_retry_count: int):
		"""Sets the qos_multiple_retry_count of this StaStatisticsGroup2to9Data.

		dot11QosMultipleRetryCount counter  # noqa: E501

		:param qos_multiple_retry_count: The qos_multiple_retry_count of this StaStatisticsGroup2to9Data.
		:type qos_multiple_retry_count: int
		"""
		if qos_multiple_retry_count is None:
			raise ValueError("Invalid value for `qos_multiple_retry_count`, must not be `None`")  # noqa: E501

		self._qos_multiple_retry_count = qos_multiple_retry_count

	@property
	def qos_rts_failure_count(self) -> int:
		"""Gets the qos_rts_failure_count of this StaStatisticsGroup2to9Data.

		dot11QosRTSFailureCount counter  # noqa: E501

		:return: The qos_rts_failure_count of this StaStatisticsGroup2to9Data.
		:rtype: int
		"""
		return self._qos_rts_failure_count

	@qos_rts_failure_count.setter
	def qos_rts_failure_count(self, qos_rts_failure_count: int):
		"""Sets the qos_rts_failure_count of this StaStatisticsGroup2to9Data.

		dot11QosRTSFailureCount counter  # noqa: E501

		:param qos_rts_failure_count: The qos_rts_failure_count of this StaStatisticsGroup2to9Data.
		:type qos_rts_failure_count: int
		"""
		if qos_rts_failure_count is None:
			raise ValueError("Invalid value for `qos_rts_failure_count`, must not be `None`")  # noqa: E501

		self._qos_rts_failure_count = qos_rts_failure_count

	@property
	def qos_rts_success_count(self) -> int:
		"""Gets the qos_rts_success_count of this StaStatisticsGroup2to9Data.

		dot11QosRTSSuccessCount counter  # noqa: E501

		:return: The qos_rts_success_count of this StaStatisticsGroup2to9Data.
		:rtype: int
		"""
		return self._qos_rts_success_count

	@qos_rts_success_count.setter
	def qos_rts_success_count(self, qos_rts_success_count: int):
		"""Sets the qos_rts_success_count of this StaStatisticsGroup2to9Data.

		dot11QosRTSSuccessCount counter  # noqa: E501

		:param qos_rts_success_count: The qos_rts_success_count of this StaStatisticsGroup2to9Data.
		:type qos_rts_success_count: int
		"""
		if qos_rts_success_count is None:
			raise ValueError("Invalid value for `qos_rts_success_count`, must not be `None`")  # noqa: E501

		self._qos_rts_success_count = qos_rts_success_count

	@property
	def qos_received_fragment_count(self) -> int:
		"""Gets the qos_received_fragment_count of this StaStatisticsGroup2to9Data.

		dot11QosReceivedFragmentCount counter  # noqa: E501

		:return: The qos_received_fragment_count of this StaStatisticsGroup2to9Data.
		:rtype: int
		"""
		return self._qos_received_fragment_count

	@qos_received_fragment_count.setter
	def qos_received_fragment_count(self, qos_received_fragment_count: int):
		"""Sets the qos_received_fragment_count of this StaStatisticsGroup2to9Data.

		dot11QosReceivedFragmentCount counter  # noqa: E501

		:param qos_received_fragment_count: The qos_received_fragment_count of this StaStatisticsGroup2to9Data.
		:type qos_received_fragment_count: int
		"""
		if qos_received_fragment_count is None:
			raise ValueError("Invalid value for `qos_received_fragment_count`, must not be `None`")  # noqa: E501

		self._qos_received_fragment_count = qos_received_fragment_count

	@property
	def qos_retries_received_count(self) -> int:
		"""Gets the qos_retries_received_count of this StaStatisticsGroup2to9Data.

		dot11QosRetriesReceivedCount counter  # noqa: E501

		:return: The qos_retries_received_count of this StaStatisticsGroup2to9Data.
		:rtype: int
		"""
		return self._qos_retries_received_count

	@qos_retries_received_count.setter
	def qos_retries_received_count(self, qos_retries_received_count: int):
		"""Sets the qos_retries_received_count of this StaStatisticsGroup2to9Data.

		dot11QosRetriesReceivedCount counter  # noqa: E501

		:param qos_retries_received_count: The qos_retries_received_count of this StaStatisticsGroup2to9Data.
		:type qos_retries_received_count: int
		"""
		if qos_retries_received_count is None:
			raise ValueError("Invalid value for `qos_retries_received_count`, must not be `None`")  # noqa: E501

		self._qos_retries_received_count = qos_retries_received_count

	@property
	def qos_retry_count(self) -> int:
		"""Gets the qos_retry_count of this StaStatisticsGroup2to9Data.

		dot11QosRetryCount counter  # noqa: E501

		:return: The qos_retry_count of this StaStatisticsGroup2to9Data.
		:rtype: int
		"""
		return self._qos_retry_count

	@qos_retry_count.setter
	def qos_retry_count(self, qos_retry_count: int):
		"""Sets the qos_retry_count of this StaStatisticsGroup2to9Data.

		dot11QosRetryCount counter  # noqa: E501

		:param qos_retry_count: The qos_retry_count of this StaStatisticsGroup2to9Data.
		:type qos_retry_count: int
		"""
		if qos_retry_count is None:
			raise ValueError("Invalid value for `qos_retry_count`, must not be `None`")  # noqa: E501

		self._qos_retry_count = qos_retry_count

	@property
	def qos_transmitted_fragment_count(self) -> int:
		"""Gets the qos_transmitted_fragment_count of this StaStatisticsGroup2to9Data.

		dot11QosTransmittedFragmentCount counter  # noqa: E501

		:return: The qos_transmitted_fragment_count of this StaStatisticsGroup2to9Data.
		:rtype: int
		"""
		return self._qos_transmitted_fragment_count

	@qos_transmitted_fragment_count.setter
	def qos_transmitted_fragment_count(self, qos_transmitted_fragment_count: int):
		"""Sets the qos_transmitted_fragment_count of this StaStatisticsGroup2to9Data.

		dot11QosTransmittedFragmentCount counter  # noqa: E501

		:param qos_transmitted_fragment_count: The qos_transmitted_fragment_count of this StaStatisticsGroup2to9Data.
		:type qos_transmitted_fragment_count: int
		"""
		if qos_transmitted_fragment_count is None:
			raise ValueError("Invalid value for `qos_transmitted_fragment_count`, must not be `None`")  # noqa: E501

		self._qos_transmitted_fragment_count = qos_transmitted_fragment_count

	@property
	def qos_transmitted_frame_count(self) -> int:
		"""Gets the qos_transmitted_frame_count of this StaStatisticsGroup2to9Data.

		dot11QosTransmittedFrameCount counter  # noqa: E501

		:return: The qos_transmitted_frame_count of this StaStatisticsGroup2to9Data.
		:rtype: int
		"""
		return self._qos_transmitted_frame_count

	@qos_transmitted_frame_count.setter
	def qos_transmitted_frame_count(self, qos_transmitted_frame_count: int):
		"""Sets the qos_transmitted_frame_count of this StaStatisticsGroup2to9Data.

		dot11QosTransmittedFrameCount counter  # noqa: E501

		:param qos_transmitted_frame_count: The qos_transmitted_frame_count of this StaStatisticsGroup2to9Data.
		:type qos_transmitted_frame_count: int
		"""
		if qos_transmitted_frame_count is None:
			raise ValueError("Invalid value for `qos_transmitted_frame_count`, must not be `None`")  # noqa: E501

		self._qos_transmitted_frame_count = qos_transmitted_frame_count

	@property
	def reporting_reason_qo_s_counters(self) -> ReportingReasonQoSCounters:
		"""Gets the reporting_reason_qo_s_counters of this StaStatisticsGroup2to9Data.


		:return: The reporting_reason_qo_s_counters of this StaStatisticsGroup2to9Data.
		:rtype: ReportingReasonQoSCounters
		"""
		return self._reporting_reason_qo_s_counters

	@reporting_reason_qo_s_counters.setter
	def reporting_reason_qo_s_counters(self, reporting_reason_qo_s_counters: ReportingReasonQoSCounters):
		"""Sets the reporting_reason_qo_s_counters of this StaStatisticsGroup2to9Data.


		:param reporting_reason_qo_s_counters: The reporting_reason_qo_s_counters of this StaStatisticsGroup2to9Data.
		:type reporting_reason_qo_s_counters: ReportingReasonQoSCounters
		"""

		self._reporting_reason_qo_s_counters = reporting_reason_qo_s_counters
