# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401 # pylint: disable=unused-import

from typing import List, Dict  # noqa: F401 # pylint: disable=unused-import

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ExtBssLoad(Model):
	"""NOTE: This class is auto generated by the swagger code generator program.

	Do not edit the class manually.
	"""

	def __init__(self, mu_mimo_sta_count: int = None, obs_sec20_mhz_util: int = None, obs_sec40_mhz_util: int = None,
	             obs_sec80_mhz_util: int = None, spat_stream_under_util: int = None):  # noqa: E501
		"""ExtBssLoad - a model defined in Swagger

		:param mu_mimo_sta_count: The mu_mimo_sta_count of this ExtBssLoad.  # noqa: E501
		:type mu_mimo_sta_count: int
		:param obs_sec20_mhz_util: The obs_sec20_mhz_util of this ExtBssLoad.  # noqa: E501
		:type obs_sec20_mhz_util: int
		:param obs_sec40_mhz_util: The obs_sec40_mhz_util of this ExtBssLoad.  # noqa: E501
		:type obs_sec40_mhz_util: int
		:param obs_sec80_mhz_util: The obs_sec80_mhz_util of this ExtBssLoad.  # noqa: E501
		:type obs_sec80_mhz_util: int
		:param spat_stream_under_util: The spat_stream_under_util of this ExtBssLoad.  # noqa: E501
		:type spat_stream_under_util: int
		"""
		self.swagger_types = {
			'mu_mimo_sta_count': int,
			'obs_sec20_mhz_util': int,
			'obs_sec40_mhz_util': int,
			'obs_sec80_mhz_util': int,
			'spat_stream_under_util': int
		}

		self.attribute_map = {
			'mu_mimo_sta_count': 'muMimoStaCount',
			'obs_sec20_mhz_util': 'obsSec20MhzUtil',
			'obs_sec40_mhz_util': 'obsSec40MhzUtil',
			'obs_sec80_mhz_util': 'obsSec80MhzUtil',
			'spat_stream_under_util': 'spatStreamUnderUtil'
		}
		self._mu_mimo_sta_count = mu_mimo_sta_count
		self._obs_sec20_mhz_util = obs_sec20_mhz_util
		self._obs_sec40_mhz_util = obs_sec40_mhz_util
		self._obs_sec80_mhz_util = obs_sec80_mhz_util
		self._spat_stream_under_util = spat_stream_under_util

	@classmethod
	def from_dict(cls, dikt) -> 'ExtBssLoad':
		"""Returns the dict as a model

		:param dikt: A dict.
		:type: dict
		:return: The ExtBssLoad of this ExtBssLoad.  # noqa: E501
		:rtype: ExtBssLoad
		"""
		return util.deserialize_model(dikt, cls)

	@property
	def mu_mimo_sta_count(self) -> int:
		"""Gets the mu_mimo_sta_count of this ExtBssLoad.

		Indicates the total number of STAs currently associated with this BSS that have a 1 in the MU Beamformee Capable field of their VHT Capabilities element.  # noqa: E501

		:return: The mu_mimo_sta_count of this ExtBssLoad.
		:rtype: int
		"""
		return self._mu_mimo_sta_count

	@mu_mimo_sta_count.setter
	def mu_mimo_sta_count(self, mu_mimo_sta_count: int):
		"""Sets the mu_mimo_sta_count of this ExtBssLoad.

		Indicates the total number of STAs currently associated with this BSS that have a 1 in the MU Beamformee Capable field of their VHT Capabilities element.  # noqa: E501

		:param mu_mimo_sta_count: The mu_mimo_sta_count of this ExtBssLoad.
		:type mu_mimo_sta_count: int
		"""
		if mu_mimo_sta_count is None:
			raise ValueError("Invalid value for `mu_mimo_sta_count`, must not be `None`")  # noqa: E501

		self._mu_mimo_sta_count = mu_mimo_sta_count

	@property
	def obs_sec20_mhz_util(self) -> int:
		"""Gets the obs_sec20_mhz_util of this ExtBssLoad.

		Observable loading on each of the secondary 20 MHz channel.  # noqa: E501

		:return: The obs_sec20_mhz_util of this ExtBssLoad.
		:rtype: int
		"""
		return self._obs_sec20_mhz_util

	@obs_sec20_mhz_util.setter
	def obs_sec20_mhz_util(self, obs_sec20_mhz_util: int):
		"""Sets the obs_sec20_mhz_util of this ExtBssLoad.

		Observable loading on each of the secondary 20 MHz channel.  # noqa: E501

		:param obs_sec20_mhz_util: The obs_sec20_mhz_util of this ExtBssLoad.
		:type obs_sec20_mhz_util: int
		"""
		if obs_sec20_mhz_util is None:
			raise ValueError("Invalid value for `obs_sec20_mhz_util`, must not be `None`")  # noqa: E501

		self._obs_sec20_mhz_util = obs_sec20_mhz_util

	@property
	def obs_sec40_mhz_util(self) -> int:
		"""Gets the obs_sec40_mhz_util of this ExtBssLoad.

		Observable loading on each of the secondary 40 MHz channel.  # noqa: E501

		:return: The obs_sec40_mhz_util of this ExtBssLoad.
		:rtype: int
		"""
		return self._obs_sec40_mhz_util

	@obs_sec40_mhz_util.setter
	def obs_sec40_mhz_util(self, obs_sec40_mhz_util: int):
		"""Sets the obs_sec40_mhz_util of this ExtBssLoad.

		Observable loading on each of the secondary 40 MHz channel.  # noqa: E501

		:param obs_sec40_mhz_util: The obs_sec40_mhz_util of this ExtBssLoad.
		:type obs_sec40_mhz_util: int
		"""
		if obs_sec40_mhz_util is None:
			raise ValueError("Invalid value for `obs_sec40_mhz_util`, must not be `None`")  # noqa: E501

		self._obs_sec40_mhz_util = obs_sec40_mhz_util

	@property
	def obs_sec80_mhz_util(self) -> int:
		"""Gets the obs_sec80_mhz_util of this ExtBssLoad.

		Observable loading on each of the secondary 80 MHz channel.  # noqa: E501

		:return: The obs_sec80_mhz_util of this ExtBssLoad.
		:rtype: int
		"""
		return self._obs_sec80_mhz_util

	@obs_sec80_mhz_util.setter
	def obs_sec80_mhz_util(self, obs_sec80_mhz_util: int):
		"""Sets the obs_sec80_mhz_util of this ExtBssLoad.

		Observable loading on each of the secondary 80 MHz channel.  # noqa: E501

		:param obs_sec80_mhz_util: The obs_sec80_mhz_util of this ExtBssLoad.
		:type obs_sec80_mhz_util: int
		"""
		if obs_sec80_mhz_util is None:
			raise ValueError("Invalid value for `obs_sec80_mhz_util`, must not be `None`")  # noqa: E501

		self._obs_sec80_mhz_util = obs_sec80_mhz_util

	@property
	def spat_stream_under_util(self) -> int:
		"""Gets the spat_stream_under_util of this ExtBssLoad.

		The percentage of time, linearly scaled with 255 representing 100 %, that the AP has underutilized spatial domain resources for given busy time of the medium.  # noqa: E501

		:return: The spat_stream_under_util of this ExtBssLoad.
		:rtype: int
		"""
		return self._spat_stream_under_util

	@spat_stream_under_util.setter
	def spat_stream_under_util(self, spat_stream_under_util: int):
		"""Sets the spat_stream_under_util of this ExtBssLoad.

		The percentage of time, linearly scaled with 255 representing 100 %, that the AP has underutilized spatial domain resources for given busy time of the medium.  # noqa: E501

		:param spat_stream_under_util: The spat_stream_under_util of this ExtBssLoad.
		:type spat_stream_under_util: int
		"""
		if spat_stream_under_util is None:
			raise ValueError("Invalid value for `spat_stream_under_util`, must not be `None`")  # noqa: E501

		self._spat_stream_under_util = spat_stream_under_util
