# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401 # pylint: disable=unused-import

from typing import List, Dict  # noqa: F401 # pylint: disable=unused-import

from swagger_server.models.base_model_ import Model
from swagger_server.models.MEC028_wlan_access_information.reporting_reason_sta_counters import \
	ReportingReasonStaCounters  # noqa: F401 # pylint: disable=unused-import,E501
from swagger_server import util


class StaStatisticsGroupOneData(Model):
	"""NOTE: This class is auto generated by the swagger code generator program.

	Do not edit the class manually.
	"""

	def __init__(self, ack_failure_count: int = None, frame_duplicate_count: int = None,
	             multiple_retry_count: int = None, reporting_reason_sta_counters: ReportingReasonStaCounters = None,
	             retry_count: int = None, rts_failure_count: int = None, rts_success_count: int = None):  # noqa: E501
		"""StaStatisticsGroupOneData - a model defined in Swagger

		:param ack_failure_count: The ack_failure_count of this StaStatisticsGroupOneData.  # noqa: E501
		:type ack_failure_count: int
		:param frame_duplicate_count: The frame_duplicate_count of this StaStatisticsGroupOneData.  # noqa: E501
		:type frame_duplicate_count: int
		:param multiple_retry_count: The multiple_retry_count of this StaStatisticsGroupOneData.  # noqa: E501
		:type multiple_retry_count: int
		:param reporting_reason_sta_counters: The reporting_reason_sta_counters of this StaStatisticsGroupOneData.  # noqa: E501
		:type reporting_reason_sta_counters: ReportingReasonStaCounters
		:param retry_count: The retry_count of this StaStatisticsGroupOneData.  # noqa: E501
		:type retry_count: int
		:param rts_failure_count: The rts_failure_count of this StaStatisticsGroupOneData.  # noqa: E501
		:type rts_failure_count: int
		:param rts_success_count: The rts_success_count of this StaStatisticsGroupOneData.  # noqa: E501
		:type rts_success_count: int
		"""
		self.swagger_types = {
			'ack_failure_count': int,
			'frame_duplicate_count': int,
			'multiple_retry_count': int,
			'reporting_reason_sta_counters': ReportingReasonStaCounters,
			'retry_count': int,
			'rts_failure_count': int,
			'rts_success_count': int
		}

		self.attribute_map = {
			'ack_failure_count': 'ackFailureCount',
			'frame_duplicate_count': 'frameDuplicateCount',
			'multiple_retry_count': 'multipleRetryCount',
			'reporting_reason_sta_counters': 'reportingReasonStaCounters',
			'retry_count': 'retryCount',
			'rts_failure_count': 'rtsFailureCount',
			'rts_success_count': 'rtsSuccessCount'
		}
		self._ack_failure_count = ack_failure_count
		self._frame_duplicate_count = frame_duplicate_count
		self._multiple_retry_count = multiple_retry_count
		self._reporting_reason_sta_counters = reporting_reason_sta_counters
		self._retry_count = retry_count
		self._rts_failure_count = rts_failure_count
		self._rts_success_count = rts_success_count

	@classmethod
	def from_dict(cls, dikt) -> 'StaStatisticsGroupOneData':
		"""Returns the dict as a model

		:param dikt: A dict.
		:type: dict
		:return: The StaStatisticsGroupOneData of this StaStatisticsGroupOneData.  # noqa: E501
		:rtype: StaStatisticsGroupOneData
		"""
		return util.deserialize_model(dikt, cls)

	@property
	def ack_failure_count(self) -> int:
		"""Gets the ack_failure_count of this StaStatisticsGroupOneData.

		dot11AckFailureCount counter  # noqa: E501

		:return: The ack_failure_count of this StaStatisticsGroupOneData.
		:rtype: int
		"""
		return self._ack_failure_count

	@ack_failure_count.setter
	def ack_failure_count(self, ack_failure_count: int):
		"""Sets the ack_failure_count of this StaStatisticsGroupOneData.

		dot11AckFailureCount counter  # noqa: E501

		:param ack_failure_count: The ack_failure_count of this StaStatisticsGroupOneData.
		:type ack_failure_count: int
		"""
		if ack_failure_count is None:
			raise ValueError("Invalid value for `ack_failure_count`, must not be `None`")  # noqa: E501

		self._ack_failure_count = ack_failure_count

	@property
	def frame_duplicate_count(self) -> int:
		"""Gets the frame_duplicate_count of this StaStatisticsGroupOneData.

		dot11FrameDuplicateCount counter  # noqa: E501

		:return: The frame_duplicate_count of this StaStatisticsGroupOneData.
		:rtype: int
		"""
		return self._frame_duplicate_count

	@frame_duplicate_count.setter
	def frame_duplicate_count(self, frame_duplicate_count: int):
		"""Sets the frame_duplicate_count of this StaStatisticsGroupOneData.

		dot11FrameDuplicateCount counter  # noqa: E501

		:param frame_duplicate_count: The frame_duplicate_count of this StaStatisticsGroupOneData.
		:type frame_duplicate_count: int
		"""
		if frame_duplicate_count is None:
			raise ValueError("Invalid value for `frame_duplicate_count`, must not be `None`")  # noqa: E501

		self._frame_duplicate_count = frame_duplicate_count

	@property
	def multiple_retry_count(self) -> int:
		"""Gets the multiple_retry_count of this StaStatisticsGroupOneData.

		dot11MultipleRetryCount counter  # noqa: E501

		:return: The multiple_retry_count of this StaStatisticsGroupOneData.
		:rtype: int
		"""
		return self._multiple_retry_count

	@multiple_retry_count.setter
	def multiple_retry_count(self, multiple_retry_count: int):
		"""Sets the multiple_retry_count of this StaStatisticsGroupOneData.

		dot11MultipleRetryCount counter  # noqa: E501

		:param multiple_retry_count: The multiple_retry_count of this StaStatisticsGroupOneData.
		:type multiple_retry_count: int
		"""
		if multiple_retry_count is None:
			raise ValueError("Invalid value for `multiple_retry_count`, must not be `None`")  # noqa: E501

		self._multiple_retry_count = multiple_retry_count

	@property
	def reporting_reason_sta_counters(self) -> ReportingReasonStaCounters:
		"""Gets the reporting_reason_sta_counters of this StaStatisticsGroupOneData.


		:return: The reporting_reason_sta_counters of this StaStatisticsGroupOneData.
		:rtype: ReportingReasonStaCounters
		"""
		return self._reporting_reason_sta_counters

	@reporting_reason_sta_counters.setter
	def reporting_reason_sta_counters(self, reporting_reason_sta_counters: ReportingReasonStaCounters):
		"""Sets the reporting_reason_sta_counters of this StaStatisticsGroupOneData.


		:param reporting_reason_sta_counters: The reporting_reason_sta_counters of this StaStatisticsGroupOneData.
		:type reporting_reason_sta_counters: ReportingReasonStaCounters
		"""

		self._reporting_reason_sta_counters = reporting_reason_sta_counters

	@property
	def retry_count(self) -> int:
		"""Gets the retry_count of this StaStatisticsGroupOneData.

		dot11RetryCount counter  # noqa: E501

		:return: The retry_count of this StaStatisticsGroupOneData.
		:rtype: int
		"""
		return self._retry_count

	@retry_count.setter
	def retry_count(self, retry_count: int):
		"""Sets the retry_count of this StaStatisticsGroupOneData.

		dot11RetryCount counter  # noqa: E501

		:param retry_count: The retry_count of this StaStatisticsGroupOneData.
		:type retry_count: int
		"""
		if retry_count is None:
			raise ValueError("Invalid value for `retry_count`, must not be `None`")  # noqa: E501

		self._retry_count = retry_count

	@property
	def rts_failure_count(self) -> int:
		"""Gets the rts_failure_count of this StaStatisticsGroupOneData.

		dot11RTSFailureCount counter  # noqa: E501

		:return: The rts_failure_count of this StaStatisticsGroupOneData.
		:rtype: int
		"""
		return self._rts_failure_count

	@rts_failure_count.setter
	def rts_failure_count(self, rts_failure_count: int):
		"""Sets the rts_failure_count of this StaStatisticsGroupOneData.

		dot11RTSFailureCount counter  # noqa: E501

		:param rts_failure_count: The rts_failure_count of this StaStatisticsGroupOneData.
		:type rts_failure_count: int
		"""
		if rts_failure_count is None:
			raise ValueError("Invalid value for `rts_failure_count`, must not be `None`")  # noqa: E501

		self._rts_failure_count = rts_failure_count

	@property
	def rts_success_count(self) -> int:
		"""Gets the rts_success_count of this StaStatisticsGroupOneData.

		dot11RTSSuccessCount counter  # noqa: E501

		:return: The rts_success_count of this StaStatisticsGroupOneData.
		:rtype: int
		"""
		return self._rts_success_count

	@rts_success_count.setter
	def rts_success_count(self, rts_success_count: int):
		"""Sets the rts_success_count of this StaStatisticsGroupOneData.

		dot11RTSSuccessCount counter  # noqa: E501

		:param rts_success_count: The rts_success_count of this StaStatisticsGroupOneData.
		:type rts_success_count: int
		"""
		if rts_success_count is None:
			raise ValueError("Invalid value for `rts_success_count`, must not be `None`")  # noqa: E501

		self._rts_success_count = rts_success_count
