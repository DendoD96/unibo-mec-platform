# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.MEC028_wlan_access_information.bssid_info import BssidInfo  # noqa: F401,E501
from swagger_server.models.MEC028_wlan_access_information.sta_identity import StaIdentity  # noqa: F401,E501
from swagger_server import util


class NeighborReport(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, bss_transition_candidate_preference: int=None, bssid: str=None, bssid_info: BssidInfo=None, channel: int=None, measurement_id: str=None, operating_class: int=None, phy_type: int=None, sta_id: StaIdentity=None):  # noqa: E501
        """NeighborReport - a model defined in Swagger

        :param bss_transition_candidate_preference: The bss_transition_candidate_preference of this NeighborReport.  # noqa: E501
        :type bss_transition_candidate_preference: int
        :param bssid: The bssid of this NeighborReport.  # noqa: E501
        :type bssid: str
        :param bssid_info: The bssid_info of this NeighborReport.  # noqa: E501
        :type bssid_info: BssidInfo
        :param channel: The channel of this NeighborReport.  # noqa: E501
        :type channel: int
        :param measurement_id: The measurement_id of this NeighborReport.  # noqa: E501
        :type measurement_id: str
        :param operating_class: The operating_class of this NeighborReport.  # noqa: E501
        :type operating_class: int
        :param phy_type: The phy_type of this NeighborReport.  # noqa: E501
        :type phy_type: int
        :param sta_id: The sta_id of this NeighborReport.  # noqa: E501
        :type sta_id: StaIdentity
        """
        self.swagger_types = {
            'bss_transition_candidate_preference': int,
            'bssid': str,
            'bssid_info': BssidInfo,
            'channel': int,
            'measurement_id': str,
            'operating_class': int,
            'phy_type': int,
            'sta_id': StaIdentity
        }

        self.attribute_map = {
            'bss_transition_candidate_preference': 'bssTransitionCandidatePreference',
            'bssid': 'bssid',
            'bssid_info': 'bssidInfo',
            'channel': 'channel',
            'measurement_id': 'measurementId',
            'operating_class': 'operatingClass',
            'phy_type': 'phyType',
            'sta_id': 'staId'
        }
        self._bss_transition_candidate_preference = bss_transition_candidate_preference
        self._bssid = bssid
        self._bssid_info = bssid_info
        self._channel = channel
        self._measurement_id = measurement_id
        self._operating_class = operating_class
        self._phy_type = phy_type
        self._sta_id = sta_id

    @classmethod
    def from_dict(cls, dikt) -> 'NeighborReport':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NeighborReport of this NeighborReport.  # noqa: E501
        :rtype: NeighborReport
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bss_transition_candidate_preference(self) -> int:
        """Gets the bss_transition_candidate_preference of this NeighborReport.

        Relative value indicating the preferred ordering for this BSS as a transition candidate for roaming. 255 indicating the most preferred candidate and 1 indicating the least preferred candidate, as defined in Table 9-152 within IEEE 802.112016 [8].  # noqa: E501

        :return: The bss_transition_candidate_preference of this NeighborReport.
        :rtype: int
        """
        return self._bss_transition_candidate_preference

    @bss_transition_candidate_preference.setter
    def bss_transition_candidate_preference(self, bss_transition_candidate_preference: int):
        """Sets the bss_transition_candidate_preference of this NeighborReport.

        Relative value indicating the preferred ordering for this BSS as a transition candidate for roaming. 255 indicating the most preferred candidate and 1 indicating the least preferred candidate, as defined in Table 9-152 within IEEE 802.112016 [8].  # noqa: E501

        :param bss_transition_candidate_preference: The bss_transition_candidate_preference of this NeighborReport.
        :type bss_transition_candidate_preference: int
        """

        self._bss_transition_candidate_preference = bss_transition_candidate_preference

    @property
    def bssid(self) -> str:
        """Gets the bssid of this NeighborReport.

        BSSID (MAC address) of the Access Point that is being reported.  # noqa: E501

        :return: The bssid of this NeighborReport.
        :rtype: str
        """
        return self._bssid

    @bssid.setter
    def bssid(self, bssid: str):
        """Sets the bssid of this NeighborReport.

        BSSID (MAC address) of the Access Point that is being reported.  # noqa: E501

        :param bssid: The bssid of this NeighborReport.
        :type bssid: str
        """
        if bssid is None:
            raise ValueError("Invalid value for `bssid`, must not be `None`")  # noqa: E501

        self._bssid = bssid

    @property
    def bssid_info(self) -> BssidInfo:
        """Gets the bssid_info of this NeighborReport.


        :return: The bssid_info of this NeighborReport.
        :rtype: BssidInfo
        """
        return self._bssid_info

    @bssid_info.setter
    def bssid_info(self, bssid_info: BssidInfo):
        """Sets the bssid_info of this NeighborReport.


        :param bssid_info: The bssid_info of this NeighborReport.
        :type bssid_info: BssidInfo
        """
        if bssid_info is None:
            raise ValueError("Invalid value for `bssid_info`, must not be `None`")  # noqa: E501

        self._bssid_info = bssid_info

    @property
    def channel(self) -> int:
        """Gets the channel of this NeighborReport.

        Channel field indicates a channel number, which is interpreted in the context of the indicated operating class. Channel numbers are defined in Annex E within IEEE 802.11-2016 [8].  # noqa: E501

        :return: The channel of this NeighborReport.
        :rtype: int
        """
        return self._channel

    @channel.setter
    def channel(self, channel: int):
        """Sets the channel of this NeighborReport.

        Channel field indicates a channel number, which is interpreted in the context of the indicated operating class. Channel numbers are defined in Annex E within IEEE 802.11-2016 [8].  # noqa: E501

        :param channel: The channel of this NeighborReport.
        :type channel: int
        """
        if channel is None:
            raise ValueError("Invalid value for `channel`, must not be `None`")  # noqa: E501

        self._channel = channel

    @property
    def measurement_id(self) -> str:
        """Gets the measurement_id of this NeighborReport.

        Measurement ID of the Measurement configuration applied to this Neighbor Report.  # noqa: E501

        :return: The measurement_id of this NeighborReport.
        :rtype: str
        """
        return self._measurement_id

    @measurement_id.setter
    def measurement_id(self, measurement_id: str):
        """Sets the measurement_id of this NeighborReport.

        Measurement ID of the Measurement configuration applied to this Neighbor Report.  # noqa: E501

        :param measurement_id: The measurement_id of this NeighborReport.
        :type measurement_id: str
        """
        if measurement_id is None:
            raise ValueError("Invalid value for `measurement_id`, must not be `None`")  # noqa: E501

        self._measurement_id = measurement_id

    @property
    def operating_class(self) -> int:
        """Gets the operating_class of this NeighborReport.

        Operating Class field indicates an operating class value as defined in Annex E within IEEE 802.11-2016 [8].  # noqa: E501

        :return: The operating_class of this NeighborReport.
        :rtype: int
        """
        return self._operating_class

    @operating_class.setter
    def operating_class(self, operating_class: int):
        """Sets the operating_class of this NeighborReport.

        Operating Class field indicates an operating class value as defined in Annex E within IEEE 802.11-2016 [8].  # noqa: E501

        :param operating_class: The operating_class of this NeighborReport.
        :type operating_class: int
        """
        if operating_class is None:
            raise ValueError("Invalid value for `operating_class`, must not be `None`")  # noqa: E501

        self._operating_class = operating_class

    @property
    def phy_type(self) -> int:
        """Gets the phy_type of this NeighborReport.

        PHY type of the AP indicated by this BSSID. It is an integer value coded according to the value of the dot11PHYType, Annex C within IEEE 802.11-2016 [8]. 2 = dsss 4 = ofdm 5 = hrdsss 6 = erp 7 = ht 8 = dmg 9 = vht 10 = tvht  # noqa: E501

        :return: The phy_type of this NeighborReport.
        :rtype: int
        """
        return self._phy_type

    @phy_type.setter
    def phy_type(self, phy_type: int):
        """Sets the phy_type of this NeighborReport.

        PHY type of the AP indicated by this BSSID. It is an integer value coded according to the value of the dot11PHYType, Annex C within IEEE 802.11-2016 [8]. 2 = dsss 4 = ofdm 5 = hrdsss 6 = erp 7 = ht 8 = dmg 9 = vht 10 = tvht  # noqa: E501

        :param phy_type: The phy_type of this NeighborReport.
        :type phy_type: int
        """
        if phy_type is None:
            raise ValueError("Invalid value for `phy_type`, must not be `None`")  # noqa: E501

        self._phy_type = phy_type

    @property
    def sta_id(self) -> StaIdentity:
        """Gets the sta_id of this NeighborReport.


        :return: The sta_id of this NeighborReport.
        :rtype: StaIdentity
        """
        return self._sta_id

    @sta_id.setter
    def sta_id(self, sta_id: StaIdentity):
        """Sets the sta_id of this NeighborReport.


        :param sta_id: The sta_id of this NeighborReport.
        :type sta_id: StaIdentity
        """

        self._sta_id = sta_id
