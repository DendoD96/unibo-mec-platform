# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401 # pylint: disable=unused-import

from typing import List, Dict  # noqa: F401 # pylint: disable=unused-import

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ChannelLoadConfig(Model):
	"""NOTE: This class is auto generated by the swagger code generator program.

	Do not edit the class manually.
	"""

	def __init__(self, channel: int = None, operating_class: int = None, reporting_condition: int = None,
	             threshold: int = None):  # noqa: E501
		"""ChannelLoadConfig - a model defined in Swagger

		:param channel: The channel of this ChannelLoadConfig.  # noqa: E501
		:type channel: int
		:param operating_class: The operating_class of this ChannelLoadConfig.  # noqa: E501
		:type operating_class: int
		:param reporting_condition: The reporting_condition of this ChannelLoadConfig.  # noqa: E501
		:type reporting_condition: int
		:param threshold: The threshold of this ChannelLoadConfig.  # noqa: E501
		:type threshold: int
		"""
		self.swagger_types = {
			'channel': int,
			'operating_class': int,
			'reporting_condition': int,
			'threshold': int
		}

		self.attribute_map = {
			'channel': 'channel',
			'operating_class': 'operatingClass',
			'reporting_condition': 'reportingCondition',
			'threshold': 'threshold'
		}
		self._channel = channel
		self._operating_class = operating_class
		self._reporting_condition = reporting_condition
		self._threshold = threshold

	@classmethod
	def from_dict(cls, dikt) -> 'ChannelLoadConfig':
		"""Returns the dict as a model

		:param dikt: A dict.
		:type: dict
		:return: The ChannelLoadConfig of this ChannelLoadConfig.  # noqa: E501
		:rtype: ChannelLoadConfig
		"""
		return util.deserialize_model(dikt, cls)

	@property
	def channel(self) -> int:
		"""Gets the channel of this ChannelLoadConfig.

		Channel for which the channel load report is requested.  # noqa: E501

		:return: The channel of this ChannelLoadConfig.
		:rtype: int
		"""
		return self._channel

	@channel.setter
	def channel(self, channel: int):
		"""Sets the channel of this ChannelLoadConfig.

		Channel for which the channel load report is requested.  # noqa: E501

		:param channel: The channel of this ChannelLoadConfig.
		:type channel: int
		"""
		if channel is None:
			raise ValueError("Invalid value for `channel`, must not be `None`")  # noqa: E501

		self._channel = channel

	@property
	def operating_class(self) -> int:
		"""Gets the operating_class of this ChannelLoadConfig.

		Operating Class field indicates an operating class value as defined in Annex E within IEEE 802.11-2016 [8].  # noqa: E501

		:return: The operating_class of this ChannelLoadConfig.
		:rtype: int
		"""
		return self._operating_class

	@operating_class.setter
	def operating_class(self, operating_class: int):
		"""Sets the operating_class of this ChannelLoadConfig.

		Operating Class field indicates an operating class value as defined in Annex E within IEEE 802.11-2016 [8].  # noqa: E501

		:param operating_class: The operating_class of this ChannelLoadConfig.
		:type operating_class: int
		"""
		if operating_class is None:
			raise ValueError("Invalid value for `operating_class`, must not be `None`")  # noqa: E501

		self._operating_class = operating_class

	@property
	def reporting_condition(self) -> int:
		"""Gets the reporting_condition of this ChannelLoadConfig.

		Reporting condition for the Beacon Report as per Table 9-153 of IEEE 802.11-2016 [8]: 0 = Report to be issued after each measurement. 1 = Report to be issued when Channel Load is greater than or equal to the threshold. 2 = Report to be issued when Channel Load is less than or equal to the threshold.  If this optional field is not provided, channel load report should be issued after each measurement (reportingCondition = 0).  # noqa: E501

		:return: The reporting_condition of this ChannelLoadConfig.
		:rtype: int
		"""
		return self._reporting_condition

	@reporting_condition.setter
	def reporting_condition(self, reporting_condition: int):
		"""Sets the reporting_condition of this ChannelLoadConfig.

		Reporting condition for the Beacon Report as per Table 9-153 of IEEE 802.11-2016 [8]: 0 = Report to be issued after each measurement. 1 = Report to be issued when Channel Load is greater than or equal to the threshold. 2 = Report to be issued when Channel Load is less than or equal to the threshold.  If this optional field is not provided, channel load report should be issued after each measurement (reportingCondition = 0).  # noqa: E501

		:param reporting_condition: The reporting_condition of this ChannelLoadConfig.
		:type reporting_condition: int
		"""

		self._reporting_condition = reporting_condition

	@property
	def threshold(self) -> int:
		"""Gets the threshold of this ChannelLoadConfig.

		Channel Load reference value for threshold reporting. This field shall be provided for reportingCondition values 1 and 2.  # noqa: E501

		:return: The threshold of this ChannelLoadConfig.
		:rtype: int
		"""
		return self._threshold

	@threshold.setter
	def threshold(self, threshold: int):
		"""Sets the threshold of this ChannelLoadConfig.

		Channel Load reference value for threshold reporting. This field shall be provided for reportingCondition values 1 and 2.  # noqa: E501

		:param threshold: The threshold of this ChannelLoadConfig.
		:type threshold: int
		"""

		self._threshold = threshold
