# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401 # pylint: disable=unused-import

from typing import List, Dict  # noqa: F401 # pylint: disable=unused-import

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ReportingReasonStaCounters(Model):
	"""NOTE: This class is auto generated by the swagger code generator program.

	Do not edit the class manually.
	"""

	def __init__(self, ack_failure: bool = None, failed: bool = None, fcs_error: bool = None,
	             frame_duplicate: bool = None, multiple_retry: bool = None, retry: bool = None,
	             rts_failure: bool = None):  # noqa: E501
		"""ReportingReasonStaCounters - a model defined in Swagger

		:param ack_failure: The ack_failure of this ReportingReasonStaCounters.  # noqa: E501
		:type ack_failure: bool
		:param failed: The failed of this ReportingReasonStaCounters.  # noqa: E501
		:type failed: bool
		:param fcs_error: The fcs_error of this ReportingReasonStaCounters.  # noqa: E501
		:type fcs_error: bool
		:param frame_duplicate: The frame_duplicate of this ReportingReasonStaCounters.  # noqa: E501
		:type frame_duplicate: bool
		:param multiple_retry: The multiple_retry of this ReportingReasonStaCounters.  # noqa: E501
		:type multiple_retry: bool
		:param retry: The retry of this ReportingReasonStaCounters.  # noqa: E501
		:type retry: bool
		:param rts_failure: The rts_failure of this ReportingReasonStaCounters.  # noqa: E501
		:type rts_failure: bool
		"""
		self.swagger_types = {
			'ack_failure': bool,
			'failed': bool,
			'fcs_error': bool,
			'frame_duplicate': bool,
			'multiple_retry': bool,
			'retry': bool,
			'rts_failure': bool
		}

		self.attribute_map = {
			'ack_failure': 'ackFailure',
			'failed': 'failed',
			'fcs_error': 'fcsError',
			'frame_duplicate': 'frameDuplicate',
			'multiple_retry': 'multipleRetry',
			'retry': 'retry',
			'rts_failure': 'rtsFailure'
		}
		self._ack_failure = ack_failure
		self._failed = failed
		self._fcs_error = fcs_error
		self._frame_duplicate = frame_duplicate
		self._multiple_retry = multiple_retry
		self._retry = retry
		self._rts_failure = rts_failure

	@classmethod
	def from_dict(cls, dikt) -> 'ReportingReasonStaCounters':
		"""Returns the dict as a model

		:param dikt: A dict.
		:type: dict
		:return: The ReportingReasonStaCounters of this ReportingReasonStaCounters.  # noqa: E501
		:rtype: ReportingReasonStaCounters
		"""
		return util.deserialize_model(dikt, cls)

	@property
	def ack_failure(self) -> bool:
		"""Gets the ack_failure of this ReportingReasonStaCounters.

		dot11AckFailure  # noqa: E501

		:return: The ack_failure of this ReportingReasonStaCounters.
		:rtype: bool
		"""
		return self._ack_failure

	@ack_failure.setter
	def ack_failure(self, ack_failure: bool):
		"""Sets the ack_failure of this ReportingReasonStaCounters.

		dot11AckFailure  # noqa: E501

		:param ack_failure: The ack_failure of this ReportingReasonStaCounters.
		:type ack_failure: bool
		"""
		if ack_failure is None:
			raise ValueError("Invalid value for `ack_failure`, must not be `None`")  # noqa: E501

		self._ack_failure = ack_failure

	@property
	def failed(self) -> bool:
		"""Gets the failed of this ReportingReasonStaCounters.

		dot11Failed  # noqa: E501

		:return: The failed of this ReportingReasonStaCounters.
		:rtype: bool
		"""
		return self._failed

	@failed.setter
	def failed(self, failed: bool):
		"""Sets the failed of this ReportingReasonStaCounters.

		dot11Failed  # noqa: E501

		:param failed: The failed of this ReportingReasonStaCounters.
		:type failed: bool
		"""
		if failed is None:
			raise ValueError("Invalid value for `failed`, must not be `None`")  # noqa: E501

		self._failed = failed

	@property
	def fcs_error(self) -> bool:
		"""Gets the fcs_error of this ReportingReasonStaCounters.

		dot11FCSError   # noqa: E501

		:return: The fcs_error of this ReportingReasonStaCounters.
		:rtype: bool
		"""
		return self._fcs_error

	@fcs_error.setter
	def fcs_error(self, fcs_error: bool):
		"""Sets the fcs_error of this ReportingReasonStaCounters.

		dot11FCSError   # noqa: E501

		:param fcs_error: The fcs_error of this ReportingReasonStaCounters.
		:type fcs_error: bool
		"""
		if fcs_error is None:
			raise ValueError("Invalid value for `fcs_error`, must not be `None`")  # noqa: E501

		self._fcs_error = fcs_error

	@property
	def frame_duplicate(self) -> bool:
		"""Gets the frame_duplicate of this ReportingReasonStaCounters.

		dot11FrameDuplicate   # noqa: E501

		:return: The frame_duplicate of this ReportingReasonStaCounters.
		:rtype: bool
		"""
		return self._frame_duplicate

	@frame_duplicate.setter
	def frame_duplicate(self, frame_duplicate: bool):
		"""Sets the frame_duplicate of this ReportingReasonStaCounters.

		dot11FrameDuplicate   # noqa: E501

		:param frame_duplicate: The frame_duplicate of this ReportingReasonStaCounters.
		:type frame_duplicate: bool
		"""
		if frame_duplicate is None:
			raise ValueError("Invalid value for `frame_duplicate`, must not be `None`")  # noqa: E501

		self._frame_duplicate = frame_duplicate

	@property
	def multiple_retry(self) -> bool:
		"""Gets the multiple_retry of this ReportingReasonStaCounters.

		dot11MultipleRetry  # noqa: E501

		:return: The multiple_retry of this ReportingReasonStaCounters.
		:rtype: bool
		"""
		return self._multiple_retry

	@multiple_retry.setter
	def multiple_retry(self, multiple_retry: bool):
		"""Sets the multiple_retry of this ReportingReasonStaCounters.

		dot11MultipleRetry  # noqa: E501

		:param multiple_retry: The multiple_retry of this ReportingReasonStaCounters.
		:type multiple_retry: bool
		"""
		if multiple_retry is None:
			raise ValueError("Invalid value for `multiple_retry`, must not be `None`")  # noqa: E501

		self._multiple_retry = multiple_retry

	@property
	def retry(self) -> bool:
		"""Gets the retry of this ReportingReasonStaCounters.

		dot11Retry  # noqa: E501

		:return: The retry of this ReportingReasonStaCounters.
		:rtype: bool
		"""
		return self._retry

	@retry.setter
	def retry(self, retry: bool):
		"""Sets the retry of this ReportingReasonStaCounters.

		dot11Retry  # noqa: E501

		:param retry: The retry of this ReportingReasonStaCounters.
		:type retry: bool
		"""
		if retry is None:
			raise ValueError("Invalid value for `retry`, must not be `None`")  # noqa: E501

		self._retry = retry

	@property
	def rts_failure(self) -> bool:
		"""Gets the rts_failure of this ReportingReasonStaCounters.

		dot11RTSFailure  # noqa: E501

		:return: The rts_failure of this ReportingReasonStaCounters.
		:rtype: bool
		"""
		return self._rts_failure

	@rts_failure.setter
	def rts_failure(self, rts_failure: bool):
		"""Sets the rts_failure of this ReportingReasonStaCounters.

		dot11RTSFailure  # noqa: E501

		:param rts_failure: The rts_failure of this ReportingReasonStaCounters.
		:type rts_failure: bool
		"""
		if rts_failure is None:
			raise ValueError("Invalid value for `rts_failure`, must not be `None`")  # noqa: E501

		self._rts_failure = rts_failure
