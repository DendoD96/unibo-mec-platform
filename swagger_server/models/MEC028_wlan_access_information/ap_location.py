# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.MEC028_wlan_access_information.civic_location import CivicLocation  # noqa: F401,E501
from swagger_server.models.MEC028_wlan_access_information.geo_location import GeoLocation  # noqa: F401,E501
from swagger_server import util


class ApLocation(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, civic_location: CivicLocation=None, geolocation: GeoLocation=None):  # noqa: E501
        """ApLocation - a model defined in Swagger

        :param civic_location: The civic_location of this ApLocation.  # noqa: E501
        :type civic_location: CivicLocation
        :param geolocation: The geolocation of this ApLocation.  # noqa: E501
        :type geolocation: GeoLocation
        """
        self.swagger_types = {
            'civic_location': CivicLocation,
            'geolocation': GeoLocation
        }

        self.attribute_map = {
            'civic_location': 'civicLocation',
            'geolocation': 'geolocation'
        }
        self._civic_location = civic_location
        self._geolocation = geolocation

    @classmethod
    def from_dict(cls, dikt) -> 'ApLocation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ApLocation of this ApLocation.  # noqa: E501
        :rtype: ApLocation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def civic_location(self) -> CivicLocation:
        """Gets the civic_location of this ApLocation.


        :return: The civic_location of this ApLocation.
        :rtype: CivicLocation
        """
        return self._civic_location

    @civic_location.setter
    def civic_location(self, civic_location: CivicLocation):
        """Sets the civic_location of this ApLocation.


        :param civic_location: The civic_location of this ApLocation.
        :type civic_location: CivicLocation
        """

        self._civic_location = civic_location

    @property
    def geolocation(self) -> GeoLocation:
        """Gets the geolocation of this ApLocation.


        :return: The geolocation of this ApLocation.
        :rtype: GeoLocation
        """
        return self._geolocation

    @geolocation.setter
    def geolocation(self, geolocation: GeoLocation):
        """Sets the geolocation of this ApLocation.


        :param geolocation: The geolocation of this ApLocation.
        :type geolocation: GeoLocation
        """

        self._geolocation = geolocation
