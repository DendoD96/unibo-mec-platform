# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.MEC028_wlan_access_information.beacon_reporting_config import BeaconReportingConfig  # noqa: F401,E501
from swagger_server import util


class BeaconRequestConfig(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, beacon_reporting_conf: BeaconReportingConfig=None, bssid: str=None, channel_id: int=None, measurement_mode: int=None, operating_class: int=None, ssid: str=None):  # noqa: E501
        """BeaconRequestConfig - a model defined in Swagger

        :param beacon_reporting_conf: The beacon_reporting_conf of this BeaconRequestConfig.  # noqa: E501
        :type beacon_reporting_conf: BeaconReportingConfig
        :param bssid: The bssid of this BeaconRequestConfig.  # noqa: E501
        :type bssid: str
        :param channel_id: The channel_id of this BeaconRequestConfig.  # noqa: E501
        :type channel_id: int
        :param measurement_mode: The measurement_mode of this BeaconRequestConfig.  # noqa: E501
        :type measurement_mode: int
        :param operating_class: The operating_class of this BeaconRequestConfig.  # noqa: E501
        :type operating_class: int
        :param ssid: The ssid of this BeaconRequestConfig.  # noqa: E501
        :type ssid: str
        """
        self.swagger_types = {
            'beacon_reporting_conf': BeaconReportingConfig,
            'bssid': str,
            'channel_id': int,
            'measurement_mode': int,
            'operating_class': int,
            'ssid': str
        }

        self.attribute_map = {
            'beacon_reporting_conf': 'beaconReportingConf',
            'bssid': 'bssid',
            'channel_id': 'channelId',
            'measurement_mode': 'measurementMode',
            'operating_class': 'operatingClass',
            'ssid': 'ssid'
        }
        self._beacon_reporting_conf = beacon_reporting_conf
        self._bssid = bssid
        self._channel_id = channel_id
        self._measurement_mode = measurement_mode
        self._operating_class = operating_class
        self._ssid = ssid

    @classmethod
    def from_dict(cls, dikt) -> 'BeaconRequestConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BeaconRequestConfig of this BeaconRequestConfig.  # noqa: E501
        :rtype: BeaconRequestConfig
        """
        return util.deserialize_model(dikt, cls)

    @property
    def beacon_reporting_conf(self) -> BeaconReportingConfig:
        """Gets the beacon_reporting_conf of this BeaconRequestConfig.


        :return: The beacon_reporting_conf of this BeaconRequestConfig.
        :rtype: BeaconReportingConfig
        """
        return self._beacon_reporting_conf

    @beacon_reporting_conf.setter
    def beacon_reporting_conf(self, beacon_reporting_conf: BeaconReportingConfig):
        """Sets the beacon_reporting_conf of this BeaconRequestConfig.


        :param beacon_reporting_conf: The beacon_reporting_conf of this BeaconRequestConfig.
        :type beacon_reporting_conf: BeaconReportingConfig
        """
        if beacon_reporting_conf is None:
            raise ValueError("Invalid value for `beacon_reporting_conf`, must not be `None`")  # noqa: E501

        self._beacon_reporting_conf = beacon_reporting_conf

    @property
    def bssid(self) -> str:
        """Gets the bssid of this BeaconRequestConfig.

        The BSSID field indicates the BSS for which a beacon report is requested. If absent, the requested beacon reports should include all BSSs on the channel.  # noqa: E501

        :return: The bssid of this BeaconRequestConfig.
        :rtype: str
        """
        return self._bssid

    @bssid.setter
    def bssid(self, bssid: str):
        """Sets the bssid of this BeaconRequestConfig.

        The BSSID field indicates the BSS for which a beacon report is requested. If absent, the requested beacon reports should include all BSSs on the channel.  # noqa: E501

        :param bssid: The bssid of this BeaconRequestConfig.
        :type bssid: str
        """

        self._bssid = bssid

    @property
    def channel_id(self) -> int:
        """Gets the channel_id of this BeaconRequestConfig.

        Channel number to scan. A Channel Number of 0 indicates a request to make iterative measurements for all supported channels in the Operating Class where the measurement is permitted on the channel and the channel is valid for the current regulatory domain. A Channel Number of 255 indicates a request to make iterative measurements for all supported channels in the current Operating Class listed in the latest AP Channel Report received from the serving AP.  # noqa: E501

        :return: The channel_id of this BeaconRequestConfig.
        :rtype: int
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id: int):
        """Sets the channel_id of this BeaconRequestConfig.

        Channel number to scan. A Channel Number of 0 indicates a request to make iterative measurements for all supported channels in the Operating Class where the measurement is permitted on the channel and the channel is valid for the current regulatory domain. A Channel Number of 255 indicates a request to make iterative measurements for all supported channels in the current Operating Class listed in the latest AP Channel Report received from the serving AP.  # noqa: E501

        :param channel_id: The channel_id of this BeaconRequestConfig.
        :type channel_id: int
        """
        if channel_id is None:
            raise ValueError("Invalid value for `channel_id`, must not be `None`")  # noqa: E501

        self._channel_id = channel_id

    @property
    def measurement_mode(self) -> int:
        """Gets the measurement_mode of this BeaconRequestConfig.

        0 for passive. 1 for active. 2 for beacon table.  # noqa: E501

        :return: The measurement_mode of this BeaconRequestConfig.
        :rtype: int
        """
        return self._measurement_mode

    @measurement_mode.setter
    def measurement_mode(self, measurement_mode: int):
        """Sets the measurement_mode of this BeaconRequestConfig.

        0 for passive. 1 for active. 2 for beacon table.  # noqa: E501

        :param measurement_mode: The measurement_mode of this BeaconRequestConfig.
        :type measurement_mode: int
        """
        if measurement_mode is None:
            raise ValueError("Invalid value for `measurement_mode`, must not be `None`")  # noqa: E501

        self._measurement_mode = measurement_mode

    @property
    def operating_class(self) -> int:
        """Gets the operating_class of this BeaconRequestConfig.

        Operating Class field indicates an operating class value as defined in Annex E within IEEE 802.112016 [8].  # noqa: E501

        :return: The operating_class of this BeaconRequestConfig.
        :rtype: int
        """
        return self._operating_class

    @operating_class.setter
    def operating_class(self, operating_class: int):
        """Sets the operating_class of this BeaconRequestConfig.

        Operating Class field indicates an operating class value as defined in Annex E within IEEE 802.112016 [8].  # noqa: E501

        :param operating_class: The operating_class of this BeaconRequestConfig.
        :type operating_class: int
        """
        if operating_class is None:
            raise ValueError("Invalid value for `operating_class`, must not be `None`")  # noqa: E501

        self._operating_class = operating_class

    @property
    def ssid(self) -> str:
        """Gets the ssid of this BeaconRequestConfig.

        The SSID subelement indicates the ESS or IBSS for which a beacon report is requested.  # noqa: E501

        :return: The ssid of this BeaconRequestConfig.
        :rtype: str
        """
        return self._ssid

    @ssid.setter
    def ssid(self, ssid: str):
        """Sets the ssid of this BeaconRequestConfig.

        The SSID subelement indicates the ESS or IBSS for which a beacon report is requested.  # noqa: E501

        :param ssid: The ssid of this BeaconRequestConfig.
        :type ssid: str
        """

        self._ssid = ssid
