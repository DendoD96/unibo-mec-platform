# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401 # pylint: disable=unused-import

from typing import List, Dict  # noqa: F401 # pylint: disable=unused-import

from swagger_server.models.base_model_ import Model
from swagger_server.models.MEC028_wlan_access_information.ap_associated import \
	ApAssociated  # noqa: F401 # pylint: disable=unused-import,E501
from swagger_server.models.MEC028_wlan_access_information.beacon_report import \
	BeaconReport  # noqa: F401 # pylint: disable=unused-import,E501
from swagger_server.models.MEC028_wlan_access_information.channel_load import \
	ChannelLoad  # noqa: F401 # pylint: disable=unused-import,E501
from swagger_server.models.MEC028_wlan_access_information.neighbor_report import \
	NeighborReport  # noqa: F401 # pylint: disable=unused-import,E501
from swagger_server.models.MEC028_wlan_access_information.rssi import \
	Rssi  # noqa: F401 # pylint: disable=unused-import,E501
from swagger_server.models.MEC028_wlan_access_information.sta_data_rate import \
	StaDataRate  # noqa: F401 # pylint: disable=unused-import,E501
from swagger_server.models.MEC028_wlan_access_information.sta_identity import \
	StaIdentity  # noqa: F401 # pylint: disable=unused-import,E501
from swagger_server.models.MEC028_wlan_access_information.sta_statistics import \
	StaStatistics  # noqa: F401 # pylint: disable=unused-import,E501
from swagger_server.models.MEC028_wlan_access_information.time_stamp import \
	TimeStamp  # noqa: F401 # pylint: disable=unused-import,E501
from swagger_server import util


class StaInfo(Model):
	"""NOTE: This class is auto generated by the swagger code generator program.

	Do not edit the class manually.
	"""

	def __init__(self, ap_associated: ApAssociated = None, beacon_report: List[BeaconReport] = None,
	             channel: int = None, channel_load: List[ChannelLoad] = None,
	             neighbor_report: List[NeighborReport] = None, rssi: Rssi = None, sta_data_rate: StaDataRate = None,
	             sta_id: StaIdentity = None, sta_statistics: List[StaStatistics] = None,
	             time_stamp: TimeStamp = None):  # noqa: E501
		"""StaInfo - a model defined in Swagger

		:param ap_associated: The ap_associated of this StaInfo.  # noqa: E501
		:type ap_associated: ApAssociated
		:param beacon_report: The beacon_report of this StaInfo.  # noqa: E501
		:type beacon_report: List[BeaconReport]
		:param channel: The channel of this StaInfo.  # noqa: E501
		:type channel: int
		:param channel_load: The channel_load of this StaInfo.  # noqa: E501
		:type channel_load: List[ChannelLoad]
		:param neighbor_report: The neighbor_report of this StaInfo.  # noqa: E501
		:type neighbor_report: List[NeighborReport]
		:param rssi: The rssi of this StaInfo.  # noqa: E501
		:type rssi: Rssi
		:param sta_data_rate: The sta_data_rate of this StaInfo.  # noqa: E501
		:type sta_data_rate: StaDataRate
		:param sta_id: The sta_id of this StaInfo.  # noqa: E501
		:type sta_id: StaIdentity
		:param sta_statistics: The sta_statistics of this StaInfo.  # noqa: E501
		:type sta_statistics: List[StaStatistics]
		:param time_stamp: The time_stamp of this StaInfo.  # noqa: E501
		:type time_stamp: TimeStamp
		"""
		self.swagger_types = {
			'ap_associated': ApAssociated,
			'beacon_report': List[BeaconReport],
			'channel': int,
			'channel_load': List[ChannelLoad],
			'neighbor_report': List[NeighborReport],
			'rssi': Rssi,
			'sta_data_rate': StaDataRate,
			'sta_id': StaIdentity,
			'sta_statistics': List[StaStatistics],
			'time_stamp': TimeStamp
		}

		self.attribute_map = {
			'ap_associated': 'apAssociated',
			'beacon_report': 'beaconReport',
			'channel': 'channel',
			'channel_load': 'channelLoad',
			'neighbor_report': 'neighborReport',
			'rssi': 'rssi',
			'sta_data_rate': 'staDataRate',
			'sta_id': 'staId',
			'sta_statistics': 'staStatistics',
			'time_stamp': 'timeStamp'
		}
		self._ap_associated = ap_associated
		self._beacon_report = beacon_report
		self._channel = channel
		self._channel_load = channel_load
		self._neighbor_report = neighbor_report
		self._rssi = rssi
		self._sta_data_rate = sta_data_rate
		self._sta_id = sta_id
		self._sta_statistics = sta_statistics
		self._time_stamp = time_stamp

	@classmethod
	def from_dict(cls, dikt) -> 'StaInfo':
		"""Returns the dict as a model

		:param dikt: A dict.
		:type: dict
		:return: The StaInfo of this StaInfo.  # noqa: E501
		:rtype: StaInfo
		"""
		return util.deserialize_model(dikt, cls)

	@property
	def ap_associated(self) -> ApAssociated:
		"""Gets the ap_associated of this StaInfo.


		:return: The ap_associated of this StaInfo.
		:rtype: ApAssociated
		"""
		return self._ap_associated

	@ap_associated.setter
	def ap_associated(self, ap_associated: ApAssociated):
		"""Sets the ap_associated of this StaInfo.


		:param ap_associated: The ap_associated of this StaInfo.
		:type ap_associated: ApAssociated
		"""

		self._ap_associated = ap_associated

	@property
	def beacon_report(self) -> List[BeaconReport]:
		"""Gets the beacon_report of this StaInfo.

		Beacon Report as defined in IEEE 802.11-2016 [8].   # noqa: E501

		:return: The beacon_report of this StaInfo.
		:rtype: List[BeaconReport]
		"""
		return self._beacon_report

	@beacon_report.setter
	def beacon_report(self, beacon_report: List[BeaconReport]):
		"""Sets the beacon_report of this StaInfo.

		Beacon Report as defined in IEEE 802.11-2016 [8].   # noqa: E501

		:param beacon_report: The beacon_report of this StaInfo.
		:type beacon_report: List[BeaconReport]
		"""

		self._beacon_report = beacon_report

	@property
	def channel(self) -> int:
		"""Gets the channel of this StaInfo.

		Channel currently used by the station to connect with its associated Access Point.  # noqa: E501

		:return: The channel of this StaInfo.
		:rtype: int
		"""
		return self._channel

	@channel.setter
	def channel(self, channel: int):
		"""Sets the channel of this StaInfo.

		Channel currently used by the station to connect with its associated Access Point.  # noqa: E501

		:param channel: The channel of this StaInfo.
		:type channel: int
		"""

		self._channel = channel

	@property
	def channel_load(self) -> List[ChannelLoad]:
		"""Gets the channel_load of this StaInfo.

		Channel Load reports as seen by the station as defined IEEE 802.11-2016 [8]. Channel Load reports may be configured for any channel, including the station's current channel for association.  # noqa: E501

		:return: The channel_load of this StaInfo.
		:rtype: List[ChannelLoad]
		"""
		return self._channel_load

	@channel_load.setter
	def channel_load(self, channel_load: List[ChannelLoad]):
		"""Sets the channel_load of this StaInfo.

		Channel Load reports as seen by the station as defined IEEE 802.11-2016 [8]. Channel Load reports may be configured for any channel, including the station's current channel for association.  # noqa: E501

		:param channel_load: The channel_load of this StaInfo.
		:type channel_load: List[ChannelLoad]
		"""

		self._channel_load = channel_load

	@property
	def neighbor_report(self) -> List[NeighborReport]:
		"""Gets the neighbor_report of this StaInfo.

		Information about neighbor Access Points seen by the station as defined IEEE 802.11-2016 [8].  # noqa: E501

		:return: The neighbor_report of this StaInfo.
		:rtype: List[NeighborReport]
		"""
		return self._neighbor_report

	@neighbor_report.setter
	def neighbor_report(self, neighbor_report: List[NeighborReport]):
		"""Sets the neighbor_report of this StaInfo.

		Information about neighbor Access Points seen by the station as defined IEEE 802.11-2016 [8].  # noqa: E501

		:param neighbor_report: The neighbor_report of this StaInfo.
		:type neighbor_report: List[NeighborReport]
		"""

		self._neighbor_report = neighbor_report

	@property
	def rssi(self) -> Rssi:
		"""Gets the rssi of this StaInfo.


		:return: The rssi of this StaInfo.
		:rtype: Rssi
		"""
		return self._rssi

	@rssi.setter
	def rssi(self, rssi: Rssi):
		"""Sets the rssi of this StaInfo.


		:param rssi: The rssi of this StaInfo.
		:type rssi: Rssi
		"""

		self._rssi = rssi

	@property
	def sta_data_rate(self) -> StaDataRate:
		"""Gets the sta_data_rate of this StaInfo.


		:return: The sta_data_rate of this StaInfo.
		:rtype: StaDataRate
		"""
		return self._sta_data_rate

	@sta_data_rate.setter
	def sta_data_rate(self, sta_data_rate: StaDataRate):
		"""Sets the sta_data_rate of this StaInfo.


		:param sta_data_rate: The sta_data_rate of this StaInfo.
		:type sta_data_rate: StaDataRate
		"""

		self._sta_data_rate = sta_data_rate

	@property
	def sta_id(self) -> StaIdentity:
		"""Gets the sta_id of this StaInfo.


		:return: The sta_id of this StaInfo.
		:rtype: StaIdentity
		"""
		return self._sta_id

	@sta_id.setter
	def sta_id(self, sta_id: StaIdentity):
		"""Sets the sta_id of this StaInfo.


		:param sta_id: The sta_id of this StaInfo.
		:type sta_id: StaIdentity
		"""
		if sta_id is None:
			raise ValueError("Invalid value for `sta_id`, must not be `None`")  # noqa: E501

		self._sta_id = sta_id

	@property
	def sta_statistics(self) -> List[StaStatistics]:
		"""Gets the sta_statistics of this StaInfo.

		Statistics as defined in IEEE 802.11-2016 [8] for the client station collected over measurement duration.  # noqa: E501

		:return: The sta_statistics of this StaInfo.
		:rtype: List[StaStatistics]
		"""
		return self._sta_statistics

	@sta_statistics.setter
	def sta_statistics(self, sta_statistics: List[StaStatistics]):
		"""Sets the sta_statistics of this StaInfo.

		Statistics as defined in IEEE 802.11-2016 [8] for the client station collected over measurement duration.  # noqa: E501

		:param sta_statistics: The sta_statistics of this StaInfo.
		:type sta_statistics: List[StaStatistics]
		"""

		self._sta_statistics = sta_statistics

	@property
	def time_stamp(self) -> TimeStamp:
		"""Gets the time_stamp of this StaInfo.


		:return: The time_stamp of this StaInfo.
		:rtype: TimeStamp
		"""
		return self._time_stamp

	@time_stamp.setter
	def time_stamp(self, time_stamp: TimeStamp):
		"""Sets the time_stamp of this StaInfo.


		:param time_stamp: The time_stamp of this StaInfo.
		:type time_stamp: TimeStamp
		"""

		self._time_stamp = time_stamp
