# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401 # pylint: disable=unused-import

from typing import List, Dict  # noqa: F401 # pylint: disable=unused-import

from swagger_server.models.base_model_ import Model
from swagger_server.models.MEC028_wlan_access_information.beacon_report import \
	BeaconReport  # noqa: F401 # pylint: disable=unused-import,E501
from swagger_server.models.MEC028_wlan_access_information.channel_load import \
	ChannelLoad  # noqa: F401 # pylint: disable=unused-import,E501
from swagger_server.models.MEC028_wlan_access_information.neighbor_report import \
	NeighborReport  # noqa: F401 # pylint: disable=unused-import,E501
from swagger_server.models.MEC028_wlan_access_information.sta_statistics import \
	StaStatistics  # noqa: F401 # pylint: disable=unused-import,E501
from swagger_server.models.MEC028_wlan_access_information.time_stamp import \
	TimeStamp  # noqa: F401 # pylint: disable=unused-import,E501
from swagger_server import util


class MeasurementReportNotification(Model):
	"""NOTE: This class is auto generated by the swagger code generator program.

	Do not edit the class manually.
	"""

	def __init__(self, beacon_report: List[BeaconReport] = None, channel_load: List[ChannelLoad] = None,
	             neighbor_report: List[NeighborReport] = None, notification_type: str = None,
	             sta_statistics: List[StaStatistics] = None, time_stamp: TimeStamp = None):  # noqa: E501
		"""MeasurementReportNotification - a model defined in Swagger

		:param beacon_report: The beacon_report of this MeasurementReportNotification.  # noqa: E501
		:type beacon_report: List[BeaconReport]
		:param channel_load: The channel_load of this MeasurementReportNotification.  # noqa: E501
		:type channel_load: List[ChannelLoad]
		:param neighbor_report: The neighbor_report of this MeasurementReportNotification.  # noqa: E501
		:type neighbor_report: List[NeighborReport]
		:param notification_type: The notification_type of this MeasurementReportNotification.  # noqa: E501
		:type notification_type: str
		:param sta_statistics: The sta_statistics of this MeasurementReportNotification.  # noqa: E501
		:type sta_statistics: List[StaStatistics]
		:param time_stamp: The time_stamp of this MeasurementReportNotification.  # noqa: E501
		:type time_stamp: TimeStamp
		"""
		self.swagger_types = {
			'beacon_report': List[BeaconReport],
			'channel_load': List[ChannelLoad],
			'neighbor_report': List[NeighborReport],
			'notification_type': str,
			'sta_statistics': List[StaStatistics],
			'time_stamp': TimeStamp
		}

		self.attribute_map = {
			'beacon_report': 'beaconReport',
			'channel_load': 'channelLoad',
			'neighbor_report': 'neighborReport',
			'notification_type': 'notificationType',
			'sta_statistics': 'staStatistics',
			'time_stamp': 'timeStamp'
		}
		self._beacon_report = beacon_report
		self._channel_load = channel_load
		self._neighbor_report = neighbor_report
		self._notification_type = notification_type
		self._sta_statistics = sta_statistics
		self._time_stamp = time_stamp

	@classmethod
	def from_dict(cls, dikt) -> 'MeasurementReportNotification':
		"""Returns the dict as a model

		:param dikt: A dict.
		:type: dict
		:return: The MeasurementReportNotification of this MeasurementReportNotification.  # noqa: E501
		:rtype: MeasurementReportNotification
		"""
		return util.deserialize_model(dikt, cls)

	@property
	def beacon_report(self) -> List[BeaconReport]:
		"""Gets the beacon_report of this MeasurementReportNotification.

		Beacon Report as defined in IEEE 802.11-2016 [8].  # noqa: E501

		:return: The beacon_report of this MeasurementReportNotification.
		:rtype: List[BeaconReport]
		"""
		return self._beacon_report

	@beacon_report.setter
	def beacon_report(self, beacon_report: List[BeaconReport]):
		"""Sets the beacon_report of this MeasurementReportNotification.

		Beacon Report as defined in IEEE 802.11-2016 [8].  # noqa: E501

		:param beacon_report: The beacon_report of this MeasurementReportNotification.
		:type beacon_report: List[BeaconReport]
		"""

		self._beacon_report = beacon_report

	@property
	def channel_load(self) -> List[ChannelLoad]:
		"""Gets the channel_load of this MeasurementReportNotification.

		Channel Load reports as seen by the station as defined in IEEE 802.11-2016 [8].  # noqa: E501

		:return: The channel_load of this MeasurementReportNotification.
		:rtype: List[ChannelLoad]
		"""
		return self._channel_load

	@channel_load.setter
	def channel_load(self, channel_load: List[ChannelLoad]):
		"""Sets the channel_load of this MeasurementReportNotification.

		Channel Load reports as seen by the station as defined in IEEE 802.11-2016 [8].  # noqa: E501

		:param channel_load: The channel_load of this MeasurementReportNotification.
		:type channel_load: List[ChannelLoad]
		"""

		self._channel_load = channel_load

	@property
	def neighbor_report(self) -> List[NeighborReport]:
		"""Gets the neighbor_report of this MeasurementReportNotification.

		Neighbor Report providing information about neighbor Access Points seen by the station as defined in IEEE 802.112016 [8].  # noqa: E501

		:return: The neighbor_report of this MeasurementReportNotification.
		:rtype: List[NeighborReport]
		"""
		return self._neighbor_report

	@neighbor_report.setter
	def neighbor_report(self, neighbor_report: List[NeighborReport]):
		"""Sets the neighbor_report of this MeasurementReportNotification.

		Neighbor Report providing information about neighbor Access Points seen by the station as defined in IEEE 802.112016 [8].  # noqa: E501

		:param neighbor_report: The neighbor_report of this MeasurementReportNotification.
		:type neighbor_report: List[NeighborReport]
		"""

		self._neighbor_report = neighbor_report

	@property
	def notification_type(self) -> str:
		"""Gets the notification_type of this MeasurementReportNotification.

		Shall be set to \"MeasurementReportNotification\".  # noqa: E501

		:return: The notification_type of this MeasurementReportNotification.
		:rtype: str
		"""
		return self._notification_type

	@notification_type.setter
	def notification_type(self, notification_type: str):
		"""Sets the notification_type of this MeasurementReportNotification.

		Shall be set to \"MeasurementReportNotification\".  # noqa: E501

		:param notification_type: The notification_type of this MeasurementReportNotification.
		:type notification_type: str
		"""
		if notification_type is None:
			raise ValueError("Invalid value for `notification_type`, must not be `None`")  # noqa: E501

		self._notification_type = notification_type

	@property
	def sta_statistics(self) -> List[StaStatistics]:
		"""Gets the sta_statistics of this MeasurementReportNotification.

		STA Statistics Report as defined in IEEE 802.11-2016 [8].  # noqa: E501

		:return: The sta_statistics of this MeasurementReportNotification.
		:rtype: List[StaStatistics]
		"""
		return self._sta_statistics

	@sta_statistics.setter
	def sta_statistics(self, sta_statistics: List[StaStatistics]):
		"""Sets the sta_statistics of this MeasurementReportNotification.

		STA Statistics Report as defined in IEEE 802.11-2016 [8].  # noqa: E501

		:param sta_statistics: The sta_statistics of this MeasurementReportNotification.
		:type sta_statistics: List[StaStatistics]
		"""

		self._sta_statistics = sta_statistics

	@property
	def time_stamp(self) -> TimeStamp:
		"""Gets the time_stamp of this MeasurementReportNotification.


		:return: The time_stamp of this MeasurementReportNotification.
		:rtype: TimeStamp
		"""
		return self._time_stamp

	@time_stamp.setter
	def time_stamp(self, time_stamp: TimeStamp):
		"""Sets the time_stamp of this MeasurementReportNotification.


		:param time_stamp: The time_stamp of this MeasurementReportNotification.
		:type time_stamp: TimeStamp
		"""

		self._time_stamp = time_stamp
