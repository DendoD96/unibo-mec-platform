# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401 # pylint: disable=unused-import

from typing import List, Dict  # noqa: F401 # pylint: disable=unused-import

from swagger_server.models.base_model_ import Model
from swagger_server.models.MEC028_wlan_access_information.assoc_sta_subscription_links import \
	AssocStaSubscriptionLinks  # noqa: F401 # pylint: disable=unused-import,E501
from swagger_server.models.MEC028_wlan_access_information.measurement_info import \
	MeasurementInfo  # noqa: F401 # pylint: disable=unused-import,E501
from swagger_server.models.MEC028_wlan_access_information.sta_identity import \
	StaIdentity  # noqa: F401 # pylint: disable=unused-import,E501
from swagger_server.models.MEC028_wlan_access_information.time_stamp import \
	TimeStamp  # noqa: F401 # pylint: disable=unused-import,E501
from swagger_server.models.MEC028_wlan_access_information.websock_notif_config import \
	WebsockNotifConfig  # noqa: F401 # pylint: disable=unused-import,E501
from swagger_server import util


class MeasurementReportSubscription(Model):
	"""NOTE: This class is auto generated by the swagger code generator program.

	Do not edit the class manually.
	"""

	def __init__(self, links: AssocStaSubscriptionLinks = None, callback_reference: str = None,
	             expiry_deadline: TimeStamp = None, measurement_id: str = None,
	             measurement_info: MeasurementInfo = None, request_test_notification: bool = None,
	             sta_id: List[StaIdentity] = None, subscription_type: str = None,
	             websock_notif_config: WebsockNotifConfig = None):  # noqa: E501
		"""MeasurementReportSubscription - a model defined in Swagger

		:param links: The links of this MeasurementReportSubscription.  # noqa: E501
		:type links: AssocStaSubscriptionLinks
		:param callback_reference: The callback_reference of this MeasurementReportSubscription.  # noqa: E501
		:type callback_reference: str
		:param expiry_deadline: The expiry_deadline of this MeasurementReportSubscription.  # noqa: E501
		:type expiry_deadline: TimeStamp
		:param measurement_id: The measurement_id of this MeasurementReportSubscription.  # noqa: E501
		:type measurement_id: str
		:param measurement_info: The measurement_info of this MeasurementReportSubscription.  # noqa: E501
		:type measurement_info: MeasurementInfo
		:param request_test_notification: The request_test_notification of this MeasurementReportSubscription.  # noqa: E501
		:type request_test_notification: bool
		:param sta_id: The sta_id of this MeasurementReportSubscription.  # noqa: E501
		:type sta_id: List[StaIdentity]
		:param subscription_type: The subscription_type of this MeasurementReportSubscription.  # noqa: E501
		:type subscription_type: str
		:param websock_notif_config: The websock_notif_config of this MeasurementReportSubscription.  # noqa: E501
		:type websock_notif_config: WebsockNotifConfig
		"""
		self.swagger_types = {
			'links': AssocStaSubscriptionLinks,
			'callback_reference': str,
			'expiry_deadline': TimeStamp,
			'measurement_id': str,
			'measurement_info': MeasurementInfo,
			'request_test_notification': bool,
			'sta_id': List[StaIdentity],
			'subscription_type': str,
			'websock_notif_config': WebsockNotifConfig
		}

		self.attribute_map = {
			'links': '_links',
			'callback_reference': 'callbackReference',
			'expiry_deadline': 'expiryDeadline',
			'measurement_id': 'measurementId',
			'measurement_info': 'measurementInfo',
			'request_test_notification': 'requestTestNotification',
			'sta_id': 'staId',
			'subscription_type': 'subscriptionType',
			'websock_notif_config': 'websockNotifConfig'
		}
		self._links = links
		self._callback_reference = callback_reference
		self._expiry_deadline = expiry_deadline
		self._measurement_id = measurement_id
		self._measurement_info = measurement_info
		self._request_test_notification = request_test_notification
		self._sta_id = sta_id
		self._subscription_type = subscription_type
		self._websock_notif_config = websock_notif_config

	@classmethod
	def from_dict(cls, dikt) -> 'MeasurementReportSubscription':
		"""Returns the dict as a model

		:param dikt: A dict.
		:type: dict
		:return: The MeasurementReportSubscription of this MeasurementReportSubscription.  # noqa: E501
		:rtype: MeasurementReportSubscription
		"""
		return util.deserialize_model(dikt, cls)

	@property
	def links(self) -> AssocStaSubscriptionLinks:
		"""Gets the links of this MeasurementReportSubscription.


		:return: The links of this MeasurementReportSubscription.
		:rtype: AssocStaSubscriptionLinks
		"""
		return self._links

	@links.setter
	def links(self, links: AssocStaSubscriptionLinks):
		"""Sets the links of this MeasurementReportSubscription.


		:param links: The links of this MeasurementReportSubscription.
		:type links: AssocStaSubscriptionLinks
		"""

		self._links = links

	@property
	def callback_reference(self) -> str:
		"""Gets the callback_reference of this MeasurementReportSubscription.


		:return: The callback_reference of this MeasurementReportSubscription.
		:rtype: str
		"""
		return self._callback_reference

	@callback_reference.setter
	def callback_reference(self, callback_reference: str):
		"""Sets the callback_reference of this MeasurementReportSubscription.


		:param callback_reference: The callback_reference of this MeasurementReportSubscription.
		:type callback_reference: str
		"""

		self._callback_reference = callback_reference

	@property
	def expiry_deadline(self) -> TimeStamp:
		"""Gets the expiry_deadline of this MeasurementReportSubscription.


		:return: The expiry_deadline of this MeasurementReportSubscription.
		:rtype: TimeStamp
		"""
		return self._expiry_deadline

	@expiry_deadline.setter
	def expiry_deadline(self, expiry_deadline: TimeStamp):
		"""Sets the expiry_deadline of this MeasurementReportSubscription.


		:param expiry_deadline: The expiry_deadline of this MeasurementReportSubscription.
		:type expiry_deadline: TimeStamp
		"""

		self._expiry_deadline = expiry_deadline

	@property
	def measurement_id(self) -> str:
		"""Gets the measurement_id of this MeasurementReportSubscription.

		Unique identifier allocated by the service consumer to identify measurement reports associated with this measurement subscription.  # noqa: E501

		:return: The measurement_id of this MeasurementReportSubscription.
		:rtype: str
		"""
		return self._measurement_id

	@measurement_id.setter
	def measurement_id(self, measurement_id: str):
		"""Sets the measurement_id of this MeasurementReportSubscription.

		Unique identifier allocated by the service consumer to identify measurement reports associated with this measurement subscription.  # noqa: E501

		:param measurement_id: The measurement_id of this MeasurementReportSubscription.
		:type measurement_id: str
		"""
		if measurement_id is None:
			raise ValueError("Invalid value for `measurement_id`, must not be `None`")  # noqa: E501

		self._measurement_id = measurement_id

	@property
	def measurement_info(self) -> MeasurementInfo:
		"""Gets the measurement_info of this MeasurementReportSubscription.


		:return: The measurement_info of this MeasurementReportSubscription.
		:rtype: MeasurementInfo
		"""
		return self._measurement_info

	@measurement_info.setter
	def measurement_info(self, measurement_info: MeasurementInfo):
		"""Sets the measurement_info of this MeasurementReportSubscription.


		:param measurement_info: The measurement_info of this MeasurementReportSubscription.
		:type measurement_info: MeasurementInfo
		"""
		if measurement_info is None:
			raise ValueError("Invalid value for `measurement_info`, must not be `None`")  # noqa: E501

		self._measurement_info = measurement_info

	@property
	def request_test_notification(self) -> bool:
		"""Gets the request_test_notification of this MeasurementReportSubscription.

		Set to TRUE by the service consumer to request a test notification on the callbackReference URI to determine if it is reachable by the WAIS for notifications.  # noqa: E501

		:return: The request_test_notification of this MeasurementReportSubscription.
		:rtype: bool
		"""
		return self._request_test_notification

	@request_test_notification.setter
	def request_test_notification(self, request_test_notification: bool):
		"""Sets the request_test_notification of this MeasurementReportSubscription.

		Set to TRUE by the service consumer to request a test notification on the callbackReference URI to determine if it is reachable by the WAIS for notifications.  # noqa: E501

		:param request_test_notification: The request_test_notification of this MeasurementReportSubscription.
		:type request_test_notification: bool
		"""

		self._request_test_notification = request_test_notification

	@property
	def sta_id(self) -> List[StaIdentity]:
		"""Gets the sta_id of this MeasurementReportSubscription.

		Identifier(s) to uniquely specify the target client station(s) for the subscription.  # noqa: E501

		:return: The sta_id of this MeasurementReportSubscription.
		:rtype: List[StaIdentity]
		"""
		return self._sta_id

	@sta_id.setter
	def sta_id(self, sta_id: List[StaIdentity]):
		"""Sets the sta_id of this MeasurementReportSubscription.

		Identifier(s) to uniquely specify the target client station(s) for the subscription.  # noqa: E501

		:param sta_id: The sta_id of this MeasurementReportSubscription.
		:type sta_id: List[StaIdentity]
		"""
		if sta_id is None:
			raise ValueError("Invalid value for `sta_id`, must not be `None`")  # noqa: E501

		self._sta_id = sta_id

	@property
	def subscription_type(self) -> str:
		"""Gets the subscription_type of this MeasurementReportSubscription.

		Shall be set to \"MeasurementReportSubscription\".  # noqa: E501

		:return: The subscription_type of this MeasurementReportSubscription.
		:rtype: str
		"""
		return self._subscription_type

	@subscription_type.setter
	def subscription_type(self, subscription_type: str):
		"""Sets the subscription_type of this MeasurementReportSubscription.

		Shall be set to \"MeasurementReportSubscription\".  # noqa: E501

		:param subscription_type: The subscription_type of this MeasurementReportSubscription.
		:type subscription_type: str
		"""
		if subscription_type is None:
			raise ValueError("Invalid value for `subscription_type`, must not be `None`")  # noqa: E501

		self._subscription_type = subscription_type

	@property
	def websock_notif_config(self) -> WebsockNotifConfig:
		"""Gets the websock_notif_config of this MeasurementReportSubscription.


		:return: The websock_notif_config of this MeasurementReportSubscription.
		:rtype: WebsockNotifConfig
		"""
		return self._websock_notif_config

	@websock_notif_config.setter
	def websock_notif_config(self, websock_notif_config: WebsockNotifConfig):
		"""Sets the websock_notif_config of this MeasurementReportSubscription.


		:param websock_notif_config: The websock_notif_config of this MeasurementReportSubscription.
		:type websock_notif_config: WebsockNotifConfig
		"""

		self._websock_notif_config = websock_notif_config
