# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401 # pylint: disable=unused-import

from typing import List, Dict  # noqa: F401 # pylint: disable=unused-import

from swagger_server.models.base_model_ import Model
from swagger_server import util


class StaDataRateSubscriptionNotificationEvent(Model):
	"""NOTE: This class is auto generated by the swagger code generator program.

	Do not edit the class manually.
	"""

	def __init__(self, downlink_rate_threshold: int = None, trigger: int = None,
	             uplink_rate_threshold: int = None):  # noqa: E501
		"""StaDataRateSubscriptionNotificationEvent - a model defined in Swagger

		:param downlink_rate_threshold: The downlink_rate_threshold of this StaDataRateSubscriptionNotificationEvent.  # noqa: E501
		:type downlink_rate_threshold: int
		:param trigger: The trigger of this StaDataRateSubscriptionNotificationEvent.  # noqa: E501
		:type trigger: int
		:param uplink_rate_threshold: The uplink_rate_threshold of this StaDataRateSubscriptionNotificationEvent.  # noqa: E501
		:type uplink_rate_threshold: int
		"""
		self.swagger_types = {
			'downlink_rate_threshold': int,
			'trigger': int,
			'uplink_rate_threshold': int
		}

		self.attribute_map = {
			'downlink_rate_threshold': 'downlinkRateThreshold',
			'trigger': 'trigger',
			'uplink_rate_threshold': 'uplinkRateThreshold'
		}
		self._downlink_rate_threshold = downlink_rate_threshold
		self._trigger = trigger
		self._uplink_rate_threshold = uplink_rate_threshold

	@classmethod
	def from_dict(cls, dikt) -> 'StaDataRateSubscriptionNotificationEvent':
		"""Returns the dict as a model

		:param dikt: A dict.
		:type: dict
		:return: The StaDataRateSubscription_notificationEvent of this StaDataRateSubscriptionNotificationEvent.  # noqa: E501
		:rtype: StaDataRateSubscriptionNotificationEvent
		"""
		return util.deserialize_model(dikt, cls)

	@property
	def downlink_rate_threshold(self) -> int:
		"""Gets the downlink_rate_threshold of this StaDataRateSubscriptionNotificationEvent.

		Downlink data rate threshold for StaDataRate reporting.  # noqa: E501

		:return: The downlink_rate_threshold of this StaDataRateSubscriptionNotificationEvent.
		:rtype: int
		"""
		return self._downlink_rate_threshold

	@downlink_rate_threshold.setter
	def downlink_rate_threshold(self, downlink_rate_threshold: int):
		"""Sets the downlink_rate_threshold of this StaDataRateSubscriptionNotificationEvent.

		Downlink data rate threshold for StaDataRate reporting.  # noqa: E501

		:param downlink_rate_threshold: The downlink_rate_threshold of this StaDataRateSubscriptionNotificationEvent.
		:type downlink_rate_threshold: int
		"""

		self._downlink_rate_threshold = downlink_rate_threshold

	@property
	def trigger(self) -> int:
		"""Gets the trigger of this StaDataRateSubscriptionNotificationEvent.

		Trigger event for the notification: 1 = Notification issued when the STA's downlink data rate is greater than or equal to the downlink threshold. 2 = Notification issued when the STA's downlink data rate is less than or equal to the downlink threshold. 3 = Notification issued when the STA's uplink data rate is greater than or equal to the uplink threshold. 4 = Notification issued when the STA's uplink data rate is less than or equal to the uplink threshold. 5 = Notification issued when the STA's downlink and uplink data rate is greater than or equal to their thresholds. 6 = Notification issued when the STA's downlink and uplink data rate is less than or equal to their thresholds. 7 = Notification issued when the STA's downlink or uplink data rate is greater than or equal to their thresholds. 8 = Notification issued when the STA's downlink or uplink data rate is less than or equal to their thresholds.  # noqa: E501

		:return: The trigger of this StaDataRateSubscriptionNotificationEvent.
		:rtype: int
		"""
		return self._trigger

	@trigger.setter
	def trigger(self, trigger: int):
		"""Sets the trigger of this StaDataRateSubscriptionNotificationEvent.

		Trigger event for the notification: 1 = Notification issued when the STA's downlink data rate is greater than or equal to the downlink threshold. 2 = Notification issued when the STA's downlink data rate is less than or equal to the downlink threshold. 3 = Notification issued when the STA's uplink data rate is greater than or equal to the uplink threshold. 4 = Notification issued when the STA's uplink data rate is less than or equal to the uplink threshold. 5 = Notification issued when the STA's downlink and uplink data rate is greater than or equal to their thresholds. 6 = Notification issued when the STA's downlink and uplink data rate is less than or equal to their thresholds. 7 = Notification issued when the STA's downlink or uplink data rate is greater than or equal to their thresholds. 8 = Notification issued when the STA's downlink or uplink data rate is less than or equal to their thresholds.  # noqa: E501

		:param trigger: The trigger of this StaDataRateSubscriptionNotificationEvent.
		:type trigger: int
		"""
		allowed_values = ["1", "2", "3", "4", "5", "6", "7", "8"]  # noqa: E501
		if trigger not in allowed_values:
			raise ValueError(
				"Invalid value for `trigger` ({0}), must be one of {1}"
					.format(trigger, allowed_values)
			)

		self._trigger = trigger

	@property
	def uplink_rate_threshold(self) -> int:
		"""Gets the uplink_rate_threshold of this StaDataRateSubscriptionNotificationEvent.

		Uplink data rate threshold for StaDataRate reporting.  # noqa: E501

		:return: The uplink_rate_threshold of this StaDataRateSubscriptionNotificationEvent.
		:rtype: int
		"""
		return self._uplink_rate_threshold

	@uplink_rate_threshold.setter
	def uplink_rate_threshold(self, uplink_rate_threshold: int):
		"""Sets the uplink_rate_threshold of this StaDataRateSubscriptionNotificationEvent.

		Uplink data rate threshold for StaDataRate reporting.  # noqa: E501

		:param uplink_rate_threshold: The uplink_rate_threshold of this StaDataRateSubscriptionNotificationEvent.
		:type uplink_rate_threshold: int
		"""

		self._uplink_rate_threshold = uplink_rate_threshold
