# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401 # pylint: disable=unused-import

from typing import List, Dict  # noqa: F401 # pylint: disable=unused-import

from swagger_server.models.base_model_ import Model
from swagger_server.models.MEC028_wlan_access_information.reported_beacon_frame_info import \
	ReportedBeaconFrameInfo  # noqa: F401 # pylint: disable=unused-import,E501
from swagger_server.models.MEC028_wlan_access_information.sta_identity import \
	StaIdentity  # noqa: F401 # pylint: disable=unused-import,E501
from swagger_server import util


class BeaconReport(Model):
	"""NOTE: This class is auto generated by the swagger code generator program.

	Do not edit the class manually.
	"""

	def __init__(self, antenna_id: int = None, bssid: str = None, channel: int = None, measurement_id: str = None,
	             operating_class: int = None, parent_tsf: int = None, rcpi: int = None,
	             reported_frame_info: ReportedBeaconFrameInfo = None, rsni: int = None, ssid: str = None,
	             sta_id: StaIdentity = None):  # noqa: E501
		"""BeaconReport - a model defined in Swagger

		:param antenna_id: The antenna_id of this BeaconReport.  # noqa: E501
		:type antenna_id: int
		:param bssid: The bssid of this BeaconReport.  # noqa: E501
		:type bssid: str
		:param channel: The channel of this BeaconReport.  # noqa: E501
		:type channel: int
		:param measurement_id: The measurement_id of this BeaconReport.  # noqa: E501
		:type measurement_id: str
		:param operating_class: The operating_class of this BeaconReport.  # noqa: E501
		:type operating_class: int
		:param parent_tsf: The parent_tsf of this BeaconReport.  # noqa: E501
		:type parent_tsf: int
		:param rcpi: The rcpi of this BeaconReport.  # noqa: E501
		:type rcpi: int
		:param reported_frame_info: The reported_frame_info of this BeaconReport.  # noqa: E501
		:type reported_frame_info: ReportedBeaconFrameInfo
		:param rsni: The rsni of this BeaconReport.  # noqa: E501
		:type rsni: int
		:param ssid: The ssid of this BeaconReport.  # noqa: E501
		:type ssid: str
		:param sta_id: The sta_id of this BeaconReport.  # noqa: E501
		:type sta_id: StaIdentity
		"""
		self.swagger_types = {
			'antenna_id': int,
			'bssid': str,
			'channel': int,
			'measurement_id': str,
			'operating_class': int,
			'parent_tsf': int,
			'rcpi': int,
			'reported_frame_info': ReportedBeaconFrameInfo,
			'rsni': int,
			'ssid': str,
			'sta_id': StaIdentity
		}

		self.attribute_map = {
			'antenna_id': 'antennaId',
			'bssid': 'bssid',
			'channel': 'channel',
			'measurement_id': 'measurementId',
			'operating_class': 'operatingClass',
			'parent_tsf': 'parentTsf',
			'rcpi': 'rcpi',
			'reported_frame_info': 'reportedFrameInfo',
			'rsni': 'rsni',
			'ssid': 'ssid',
			'sta_id': 'staId'
		}
		self._antenna_id = antenna_id
		self._bssid = bssid
		self._channel = channel
		self._measurement_id = measurement_id
		self._operating_class = operating_class
		self._parent_tsf = parent_tsf
		self._rcpi = rcpi
		self._reported_frame_info = reported_frame_info
		self._rsni = rsni
		self._ssid = ssid
		self._sta_id = sta_id

	@classmethod
	def from_dict(cls, dikt) -> 'BeaconReport':
		"""Returns the dict as a model

		:param dikt: A dict.
		:type: dict
		:return: The BeaconReport of this BeaconReport.  # noqa: E501
		:rtype: BeaconReport
		"""
		return util.deserialize_model(dikt, cls)

	@property
	def antenna_id(self) -> int:
		"""Gets the antenna_id of this BeaconReport.

		The Antenna ID field contains the identifying number for the antenna(s) used for this measurement. Antenna ID is defined in section 9.4.2.40 of IEEE 802.11-2016 [8].  # noqa: E501

		:return: The antenna_id of this BeaconReport.
		:rtype: int
		"""
		return self._antenna_id

	@antenna_id.setter
	def antenna_id(self, antenna_id: int):
		"""Sets the antenna_id of this BeaconReport.

		The Antenna ID field contains the identifying number for the antenna(s) used for this measurement. Antenna ID is defined in section 9.4.2.40 of IEEE 802.11-2016 [8].  # noqa: E501

		:param antenna_id: The antenna_id of this BeaconReport.
		:type antenna_id: int
		"""

		self._antenna_id = antenna_id

	@property
	def bssid(self) -> str:
		"""Gets the bssid of this BeaconReport.

		Indicates the BSSID of the BSS for which a beacon report has been received.  # noqa: E501

		:return: The bssid of this BeaconReport.
		:rtype: str
		"""
		return self._bssid

	@bssid.setter
	def bssid(self, bssid: str):
		"""Sets the bssid of this BeaconReport.

		Indicates the BSSID of the BSS for which a beacon report has been received.  # noqa: E501

		:param bssid: The bssid of this BeaconReport.
		:type bssid: str
		"""
		if bssid is None:
			raise ValueError("Invalid value for `bssid`, must not be `None`")  # noqa: E501

		self._bssid = bssid

	@property
	def channel(self) -> int:
		"""Gets the channel of this BeaconReport.

		Channel number where the beacon was received.  # noqa: E501

		:return: The channel of this BeaconReport.
		:rtype: int
		"""
		return self._channel

	@channel.setter
	def channel(self, channel: int):
		"""Sets the channel of this BeaconReport.

		Channel number where the beacon was received.  # noqa: E501

		:param channel: The channel of this BeaconReport.
		:type channel: int
		"""
		if channel is None:
			raise ValueError("Invalid value for `channel`, must not be `None`")  # noqa: E501

		self._channel = channel

	@property
	def measurement_id(self) -> str:
		"""Gets the measurement_id of this BeaconReport.

		Measurement ID of the Measurement configuration applied to this Beacon Report.  # noqa: E501

		:return: The measurement_id of this BeaconReport.
		:rtype: str
		"""
		return self._measurement_id

	@measurement_id.setter
	def measurement_id(self, measurement_id: str):
		"""Sets the measurement_id of this BeaconReport.

		Measurement ID of the Measurement configuration applied to this Beacon Report.  # noqa: E501

		:param measurement_id: The measurement_id of this BeaconReport.
		:type measurement_id: str
		"""
		if measurement_id is None:
			raise ValueError("Invalid value for `measurement_id`, must not be `None`")  # noqa: E501

		self._measurement_id = measurement_id

	@property
	def operating_class(self) -> int:
		"""Gets the operating_class of this BeaconReport.

		Operating Class field indicates an operating class value as defined in Annex E within IEEE 802.11-2016 [8].  # noqa: E501

		:return: The operating_class of this BeaconReport.
		:rtype: int
		"""
		return self._operating_class

	@operating_class.setter
	def operating_class(self, operating_class: int):
		"""Sets the operating_class of this BeaconReport.

		Operating Class field indicates an operating class value as defined in Annex E within IEEE 802.11-2016 [8].  # noqa: E501

		:param operating_class: The operating_class of this BeaconReport.
		:type operating_class: int
		"""
		if operating_class is None:
			raise ValueError("Invalid value for `operating_class`, must not be `None`")  # noqa: E501

		self._operating_class = operating_class

	@property
	def parent_tsf(self) -> int:
		"""Gets the parent_tsf of this BeaconReport.

		The Parent TSF field contains the lower 4 octets of the measuring STA's TSF timer value at the start of reception of the first octet of the timestamp field of the reported Beacon, Measurement Pilot, or Probe Response frame at the time the Beacon, Measurement Pilot, or Probe Response frame being reported was received.  # noqa: E501

		:return: The parent_tsf of this BeaconReport.
		:rtype: int
		"""
		return self._parent_tsf

	@parent_tsf.setter
	def parent_tsf(self, parent_tsf: int):
		"""Sets the parent_tsf of this BeaconReport.

		The Parent TSF field contains the lower 4 octets of the measuring STA's TSF timer value at the start of reception of the first octet of the timestamp field of the reported Beacon, Measurement Pilot, or Probe Response frame at the time the Beacon, Measurement Pilot, or Probe Response frame being reported was received.  # noqa: E501

		:param parent_tsf: The parent_tsf of this BeaconReport.
		:type parent_tsf: int
		"""

		self._parent_tsf = parent_tsf

	@property
	def rcpi(self) -> int:
		"""Gets the rcpi of this BeaconReport.

		RCPI indicates the received channel power of the Beacon, Measurement Pilot, or Probe Response frame, which is a logarithmic function of the received signal power, as defined in section 9.4.2.38 of IEEE 802.11-2016 [8].  # noqa: E501

		:return: The rcpi of this BeaconReport.
		:rtype: int
		"""
		return self._rcpi

	@rcpi.setter
	def rcpi(self, rcpi: int):
		"""Sets the rcpi of this BeaconReport.

		RCPI indicates the received channel power of the Beacon, Measurement Pilot, or Probe Response frame, which is a logarithmic function of the received signal power, as defined in section 9.4.2.38 of IEEE 802.11-2016 [8].  # noqa: E501

		:param rcpi: The rcpi of this BeaconReport.
		:type rcpi: int
		"""

		self._rcpi = rcpi

	@property
	def reported_frame_info(self) -> ReportedBeaconFrameInfo:
		"""Gets the reported_frame_info of this BeaconReport.


		:return: The reported_frame_info of this BeaconReport.
		:rtype: ReportedBeaconFrameInfo
		"""
		return self._reported_frame_info

	@reported_frame_info.setter
	def reported_frame_info(self, reported_frame_info: ReportedBeaconFrameInfo):
		"""Sets the reported_frame_info of this BeaconReport.


		:param reported_frame_info: The reported_frame_info of this BeaconReport.
		:type reported_frame_info: ReportedBeaconFrameInfo
		"""
		if reported_frame_info is None:
			raise ValueError("Invalid value for `reported_frame_info`, must not be `None`")  # noqa: E501

		self._reported_frame_info = reported_frame_info

	@property
	def rsni(self) -> int:
		"""Gets the rsni of this BeaconReport.

		RSNI indicates the received signal-to-noise indication for the Beacon, Measurement Pilot, or Probe Response frame, as described in section 9.4.2.41 of IEEE 802.11-2016 [8].  # noqa: E501

		:return: The rsni of this BeaconReport.
		:rtype: int
		"""
		return self._rsni

	@rsni.setter
	def rsni(self, rsni: int):
		"""Sets the rsni of this BeaconReport.

		RSNI indicates the received signal-to-noise indication for the Beacon, Measurement Pilot, or Probe Response frame, as described in section 9.4.2.41 of IEEE 802.11-2016 [8].  # noqa: E501

		:param rsni: The rsni of this BeaconReport.
		:type rsni: int
		"""

		self._rsni = rsni

	@property
	def ssid(self) -> str:
		"""Gets the ssid of this BeaconReport.

		The SSID subelement indicates the ESS or IBSS for which a beacon report is received.  # noqa: E501

		:return: The ssid of this BeaconReport.
		:rtype: str
		"""
		return self._ssid

	@ssid.setter
	def ssid(self, ssid: str):
		"""Sets the ssid of this BeaconReport.

		The SSID subelement indicates the ESS or IBSS for which a beacon report is received.  # noqa: E501

		:param ssid: The ssid of this BeaconReport.
		:type ssid: str
		"""

		self._ssid = ssid

	@property
	def sta_id(self) -> StaIdentity:
		"""Gets the sta_id of this BeaconReport.


		:return: The sta_id of this BeaconReport.
		:rtype: StaIdentity
		"""
		return self._sta_id

	@sta_id.setter
	def sta_id(self, sta_id: StaIdentity):
		"""Sets the sta_id of this BeaconReport.


		:param sta_id: The sta_id of this BeaconReport.
		:type sta_id: StaIdentity
		"""

		self._sta_id = sta_id
