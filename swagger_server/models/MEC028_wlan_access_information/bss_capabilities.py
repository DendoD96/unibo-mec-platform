# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401 # pylint: disable=unused-import

from typing import List, Dict  # noqa: F401 # pylint: disable=unused-import

from swagger_server.models.base_model_ import Model
from swagger_server import util


class BssCapabilities(Model):
	"""NOTE: This class is auto generated by the swagger code generator program.

	Do not edit the class manually.
	"""

	def __init__(self, apsd: bool = None, delayed_back: bool = None, immediate_back: bool = None, qos: bool = None,
	             radio_measurements: bool = None, spectrum_management: bool = None):  # noqa: E501
		"""BssCapabilities - a model defined in Swagger

		:param apsd: The apsd of this BssCapabilities.  # noqa: E501
		:type apsd: bool
		:param delayed_back: The delayed_back of this BssCapabilities.  # noqa: E501
		:type delayed_back: bool
		:param immediate_back: The immediate_back of this BssCapabilities.  # noqa: E501
		:type immediate_back: bool
		:param qos: The qos of this BssCapabilities.  # noqa: E501
		:type qos: bool
		:param radio_measurements: The radio_measurements of this BssCapabilities.  # noqa: E501
		:type radio_measurements: bool
		:param spectrum_management: The spectrum_management of this BssCapabilities.  # noqa: E501
		:type spectrum_management: bool
		"""
		self.swagger_types = {
			'apsd': bool,
			'delayed_back': bool,
			'immediate_back': bool,
			'qos': bool,
			'radio_measurements': bool,
			'spectrum_management': bool
		}

		self.attribute_map = {
			'apsd': 'apsd',
			'delayed_back': 'delayedBACK',
			'immediate_back': 'immediateBACK',
			'qos': 'qos',
			'radio_measurements': 'radioMeasurements',
			'spectrum_management': 'spectrumManagement'
		}
		self._apsd = apsd
		self._delayed_back = delayed_back
		self._immediate_back = immediate_back
		self._qos = qos
		self._radio_measurements = radio_measurements
		self._spectrum_management = spectrum_management

	@classmethod
	def from_dict(cls, dikt) -> 'BssCapabilities':
		"""Returns the dict as a model

		:param dikt: A dict.
		:type: dict
		:return: The BssCapabilities of this BssCapabilities.  # noqa: E501
		:rtype: BssCapabilities
		"""
		return util.deserialize_model(dikt, cls)

	@property
	def apsd(self) -> bool:
		"""Gets the apsd of this BssCapabilities.

		APSD Option implemented  # noqa: E501

		:return: The apsd of this BssCapabilities.
		:rtype: bool
		"""
		return self._apsd

	@apsd.setter
	def apsd(self, apsd: bool):
		"""Sets the apsd of this BssCapabilities.

		APSD Option implemented  # noqa: E501

		:param apsd: The apsd of this BssCapabilities.
		:type apsd: bool
		"""
		if apsd is None:
			raise ValueError("Invalid value for `apsd`, must not be `None`")  # noqa: E501

		self._apsd = apsd

	@property
	def delayed_back(self) -> bool:
		"""Gets the delayed_back of this BssCapabilities.

		Delayed Block Ack Option implemented  # noqa: E501

		:return: The delayed_back of this BssCapabilities.
		:rtype: bool
		"""
		return self._delayed_back

	@delayed_back.setter
	def delayed_back(self, delayed_back: bool):
		"""Sets the delayed_back of this BssCapabilities.

		Delayed Block Ack Option implemented  # noqa: E501

		:param delayed_back: The delayed_back of this BssCapabilities.
		:type delayed_back: bool
		"""
		if delayed_back is None:
			raise ValueError("Invalid value for `delayed_back`, must not be `None`")  # noqa: E501

		self._delayed_back = delayed_back

	@property
	def immediate_back(self) -> bool:
		"""Gets the immediate_back of this BssCapabilities.

		Immediate Block Ack Option implemented  # noqa: E501

		:return: The immediate_back of this BssCapabilities.
		:rtype: bool
		"""
		return self._immediate_back

	@immediate_back.setter
	def immediate_back(self, immediate_back: bool):
		"""Sets the immediate_back of this BssCapabilities.

		Immediate Block Ack Option implemented  # noqa: E501

		:param immediate_back: The immediate_back of this BssCapabilities.
		:type immediate_back: bool
		"""
		if immediate_back is None:
			raise ValueError("Invalid value for `immediate_back`, must not be `None`")  # noqa: E501

		self._immediate_back = immediate_back

	@property
	def qos(self) -> bool:
		"""Gets the qos of this BssCapabilities.

		QoS Option implemented  # noqa: E501

		:return: The qos of this BssCapabilities.
		:rtype: bool
		"""
		return self._qos

	@qos.setter
	def qos(self, qos: bool):
		"""Sets the qos of this BssCapabilities.

		QoS Option implemented  # noqa: E501

		:param qos: The qos of this BssCapabilities.
		:type qos: bool
		"""
		if qos is None:
			raise ValueError("Invalid value for `qos`, must not be `None`")  # noqa: E501

		self._qos = qos

	@property
	def radio_measurements(self) -> bool:
		"""Gets the radio_measurements of this BssCapabilities.

		Radio Measurement Activated  # noqa: E501

		:return: The radio_measurements of this BssCapabilities.
		:rtype: bool
		"""
		return self._radio_measurements

	@radio_measurements.setter
	def radio_measurements(self, radio_measurements: bool):
		"""Sets the radio_measurements of this BssCapabilities.

		Radio Measurement Activated  # noqa: E501

		:param radio_measurements: The radio_measurements of this BssCapabilities.
		:type radio_measurements: bool
		"""
		if radio_measurements is None:
			raise ValueError("Invalid value for `radio_measurements`, must not be `None`")  # noqa: E501

		self._radio_measurements = radio_measurements

	@property
	def spectrum_management(self) -> bool:
		"""Gets the spectrum_management of this BssCapabilities.

		Spectrum Management required  # noqa: E501

		:return: The spectrum_management of this BssCapabilities.
		:rtype: bool
		"""
		return self._spectrum_management

	@spectrum_management.setter
	def spectrum_management(self, spectrum_management: bool):
		"""Sets the spectrum_management of this BssCapabilities.

		Spectrum Management required  # noqa: E501

		:param spectrum_management: The spectrum_management of this BssCapabilities.
		:type spectrum_management: bool
		"""
		if spectrum_management is None:
			raise ValueError("Invalid value for `spectrum_management`, must not be `None`")  # noqa: E501

		self._spectrum_management = spectrum_management
